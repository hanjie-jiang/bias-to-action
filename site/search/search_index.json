{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Machine Learning Notes <p>Curated notes on probability, foundations, and neural networks.</p> <p> ML Fundamentals Probability &amp; Markov Engineering &amp; Data Structure Language Model </p> Engineering &amp; Data Structure <p>Dictionary operations, sorting, and common data structure patterns.</p> Information Theory <p>Entropy, cross-entropy and KL divergence.</p> Neural Networks <p>Backpropagation, activations, training tips.</p> Linear Algebra <p>Vectors, matrices, SVD and more.</p>"},{"location":"Calculus_and_Gradient_Descent/","title":"Week7_Calculus_and_Gradient_Descent","text":""},{"location":"Calculus_and_Gradient_Descent/#title-calculus-gradient-descent","title":"title: Calculus &amp; Gradient Descent","text":""},{"location":"Calculus_and_Gradient_Descent/#introduction","title":"Introduction","text":"<p>Calculus provides the machinery to compute derivatives, which are essential for optimizing neural networks. Understanding gradients and how gradient descent navigates a loss landscape is critical for debugging and improving models.</p>"},{"location":"Calculus_and_Gradient_Descent/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Partial derivatives</li> <li>Chain rule</li> <li>Gradients as slopes in high dimensions</li> <li>Gradient descent algorithm &amp; intuition</li> <li>Visualization of gradient descent in 2D</li> </ul>"},{"location":"Foundational%20knowledge%20plan/","title":"Foundational knowledge plan","text":""},{"location":"Foundational%20knowledge%20plan/#week-0-overview-of-ml-fundamentals","title":"Week 0: Overview of ML Fundamentals","text":"<p>The ML fundamentals section introduces model evaluation, classical algorithms and more, which becomes the building blocks of the topics in the weeks following. </p>"},{"location":"Foundational%20knowledge%20plan/#week-1-2-probability-foundations-markov-assumption","title":"Week 1-2: Probability Foundations + Markov Assumption","text":"<ul> <li>Probability_and_Markov_Overview</li> <li>Topics:<ul> <li>conditional_probability_and_bayes_rule</li> <li>naive_bayes_and_gaussian_naive_bayes</li> <li>joint_and_marginal_distributions</li> <li>Markov Assumption: what it is and why it matters in NLP</li> </ul> </li> <li>Resources:<ul> <li>StatQuest: Conditional Probability (YouTube)</li> <li>StatQuest: Bayes' Rule</li> <li>3Blue1Brown: Bayes theorem, the geometry of changing beliefs</li> <li>StatQuest: Naive Bayes</li> <li>StatQuest: Gaussian Naive Bayes</li> <li>Khan Academy - Probability &amp; Statistics</li> <li>Speech and Language Processing by Jurafsky &amp; Martin Ch. 3 (Markov models)</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-3-n-gram-models-language-modeling","title":"Week 3: N-gram Models &amp; Language Modeling","text":"<ul> <li>Ngram_Language_Modeling</li> <li>Topics:<ul> <li>What is an n-gram?</li> <li>How n-gram language models work</li> <li>Perplexity and limitations of n-gram models</li> </ul> </li> <li>Activities:<ul> <li>Implement a bigram/trigram model on a toy corpus</li> </ul> </li> <li>Resources:<ul> <li>The Illustrated Transformer - start with n-gram part</li> <li>Happy-LLM intro chapter</li> <li>Optional: n-gram language model notebook</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-4-intro-to-information-theory","title":"Week 4: Intro to Information Theory","text":"<ul> <li> <p>Information_Theory</p> </li> <li> <p>Topics:</p> <ul> <li>Entropy, Cross-Entropy, KL Divergence</li> <li>Why they matter in language modeling</li> </ul> </li> <li>Activities:<ul> <li>Manually compute entropy of a simple probability distribution</li> <li>Implement cross-entropy loss</li> </ul> </li> <li>Resources:<ul> <li>3Blue1Brown \u00e2\u20ac\u201c But what is entropy?</li> <li>Stanford CS224n Lecture 1</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-5-6-linear-algebra-for-ml","title":"Week 5-6: Linear Algebra for ML","text":"<ul> <li>Linear_Algebra_for_ML</li> <li>Topics:<ul> <li>Vectors, Matrices, Matrix Multiplication</li> <li>Dot product, norms, projections </li> <li>Eigenvalues &amp; Singular Value Decomposition (SVD)  </li> </ul> </li> <li>Activities:<ul> <li>Practice via small matrix coding problems (NumPy or PyTorch)</li> </ul> </li> <li>Resources:<ul> <li>3Blue1Brown: Essence of Linear Algebra </li> <li>Stanford CS229 Linear Algebra Review</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-7-calculus-gradient-descent","title":"Week 7: Calculus + Gradient Descent","text":"<ul> <li>Calculus_and_Gradient_Descent</li> <li>Topics:<ul> <li>Partial Derivatives    </li> <li>Chain Rule    </li> <li>Gradients and optimization intuition    </li> </ul> </li> <li>Activities:<ul> <li>Derive gradients of simple functions    </li> <li>Visualize gradient descent in 2D    </li> </ul> </li> <li>Resources:<ul> <li>Khan Academy Calculus (focus on multivariable sections)    </li> <li>Gradient Descent Visualization (YouTube) </li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-8-9-neural-networks-backpropagation","title":"Week 8-9: Neural Networks &amp; Backpropagation","text":"<ul> <li>Neural_Networks_and_Deep_Learning_Overview</li> <li>Topics:<ul> <li>Introduction to Perceptron Algorithm</li> <li>Structure of a feedforward neural network</li> <li>Activation functions (ReLU, softmax)</li> <li>Backpropagation algorithm</li> </ul> </li> <li>Activities:<ul> <li>Implement a simple NN from scratch (e.g., on MNIST or XOR)</li> <li>Derive gradient of softmax + cross-entropy</li> </ul> </li> <li>Resources:<ul> <li>Michael Nielsen\u00e2\u20ac\u2122s NN book: http://neuralnetworksanddeeplearning.com/</li> <li>CS231n lecture on backprop</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-10-integration-and-project","title":"Week 10: Integration and Project","text":"<ul> <li>Integration_and_Project</li> <li>Goal:<ul> <li>Build a mini-project combining n-gram + neural net ideas</li> <li>Example: Predict the next word using both n-gram and a small MLP</li> </ul> </li> <li>Outcome:<ul> <li>Review all learned concepts</li> <li>Prepare to transition to Happy-LLM\u00e2\u20ac\u2122s transformer section</li> </ul> </li> </ul>"},{"location":"Information_Theory/","title":"Information_Theory","text":""},{"location":"Information_Theory/#title-introduction-to-information-theory","title":"title: Introduction to Information Theory","text":""},{"location":"Information_Theory/#introduction","title":"Introduction","text":"<p>Information theory quantifies uncertainty and information content. Concepts such as entropy and cross-entropy are deeply entwined with language modeling and loss functions used to train neural networks.</p>"},{"location":"Information_Theory/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Entropy</li> <li>Cross-Entropy</li> <li>Kullback-Leibler (KL) Divergence</li> <li>Why information theory matters for language modeling</li> <li>Manual entropy calculation exercise</li> <li>Implementing cross-entropy loss</li> </ul>"},{"location":"Integration_and_Project/","title":"Integration_and_Project","text":""},{"location":"Integration_and_Project/#title-integration-mini-project","title":"title: Integration &amp; Mini-Project","text":""},{"location":"Integration_and_Project/#introduction","title":"Introduction","text":"<p>The capstone week integrates probabilistic and neural methods. You will build a hybrid language predictor that combines an n-gram baseline with a small neural network, reinforcing all concepts learned so far.</p>"},{"location":"Integration_and_Project/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Designing a hybrid n-gram + neural model</li> <li>Predicting the next word with combined methods</li> <li>Review of all learned concepts</li> <li>Transition plan to transformer architectures</li> </ul>"},{"location":"Linear_Algebra_for_ML/","title":"Linear_Algebra_for_ML","text":""},{"location":"Linear_Algebra_for_ML/#title-linear-algebra-for-machine-learning","title":"title: Linear Algebra for Machine Learning","text":""},{"location":"Linear_Algebra_for_ML/#introduction","title":"Introduction","text":"<p>Linear algebra is the backbone of all modern machine-learning frameworks. Vectors and matrices represent data and parameters, while operations such as matrix multiplication power everything from linear regression to transformers.</p>"},{"location":"Linear_Algebra_for_ML/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Vectors &amp; vector operations</li> <li>Matrices &amp; matrix multiplication</li> <li>Dot product, norms, and projections</li> <li>Eigenvalues &amp; eigenvectors</li> <li>Singular Value Decomposition (SVD)</li> <li>Practical coding exercises with NumPy/PyTorch</li> </ul>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/","title":"Engineering_and_Data_Structure_Questions","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#dictionary-sets","title":"Dictionary &amp; Sets","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#leetcode-1056-confusing-number","title":"Leetcode 1056: Confusing Number","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-convert-a-string-of-digits-in-dictionary-to-a-number","title":"How to convert a string of digits in dictionary to a number","text":"<pre><code>int(\"\".join([value for _, value in dictionary.items()]))\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-sort-a-dictionary-in-python","title":"How to sort a dictionary in python","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#based-on-key","title":"based on key","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_key = dict(sorted(my_dict.items()))  \nprint(sorted_by_key)  \n# Output: {'apple': 3, 'banana': 2, 'orange': 1}\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#based-on-value","title":"based on value","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_value = dict(sorted(my_dict.items(), key=lambda item: item[1]))  \nprint(sorted_by_value)  \n# Output: {'orange': 1, 'banana': 2, 'apple': 3}\n</code></pre>"},{"location":"language_model/Ngram_Language_Modeling/","title":"Week3_Ngram_Language_Modeling","text":""},{"location":"language_model/Ngram_Language_Modeling/#n-gram-models-language-modeling","title":"N-gram Models &amp; Language Modeling","text":""},{"location":"language_model/Ngram_Language_Modeling/#introduction","title":"Introduction","text":"<p>N-gram language models are the classical approach to predicting words based on fixed-length context. They remain a great entry point for understanding how language modeling works, how to evaluate models with perplexity, and why data sparsity motivates neural approaches.</p>"},{"location":"language_model/Ngram_Language_Modeling/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Textual Descriptive Models</li> <li>What is an n-gram?</li> <li>Building and training an n-gram language model</li> <li>Perplexity: definition &amp; interpretation</li> <li>Limitations of n-gram models (data sparsity, context window)</li> <li>Implementing bigram or trigram models on a toy corpus</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/","title":"ML Fundamentals","text":""},{"location":"ml_fundamentals/ML_fundamentals/#feature-engineering","title":"Feature Engineering","text":"<p>Two types of data: - Structured / Tabular data: Could be viewed as a data table from the relational database, which every columns has their clear definition, including numerical and categorial data types. - Unstructured data: Includes text, image, audio, video data, and the information that this type of data contains cannot be represented easily as a numerical value, and also they do not have clear categorical definition, furthermore, the size of these data are not identical.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#normalization-of-features","title":"Normalization of Features","text":""},{"location":"ml_fundamentals/ML_fundamentals/#why-does-one-need-to-do-normalization-on-numerical-features","title":"Why does one need to do normalization on numerical features?","text":"<p>In order to eliminate the magnitude impact between features, we should always do normalization to the features that we use, i.e. to uniformly normalize all the features to a similar range, so that it could help compare between different metrics. There are two different types of normalization that people most commonly use: - min-max scaling: It linearly changes the original data so that the data could be projected to [0, 1] range so that it is an equal ratio transformation of the original data: X_{\\text{norm}} = \\frac{X-X_{\\text{min}}}{X_{\\text{max}-X_{\\text{min}}}} - Z-Score normalization: It would project the original data to a mean of 0 and variance = 1 distribution. Specifically, assume that the original feature has mean \\mu and variance \\sigma , then the normalization equation would be defined as: Z = \\frac{x-\\mu}{\\sigma}  Using stochastic gradient descent (SGD) as an example, when two numerical features, x_1 of range [0,10] and x_2 of range [0,3], then when the x_1 and x_2 are not normalized, the  gradient descent would not be as efficient as when one does the normalization of the features. However, feature normalization is not always working. In real life,  whenever a model utilizes SGD, it is suggested to use the normalization, including linear regression, logistic regression, support vector machine, neural networks, whereas decision tress it does not help.  As for decision tree models, the node split usually is determined by the data and how much <sup>1</sup>information gain ratio that data contains about X. This information gain ratio is not impacted by whether the feature has been normalized, rather it would not change the information gain of the specific feature X.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#categorical-features","title":"Categorical Features","text":"<p>Categorical features include male / female, blood type (A,B,AB,O) and etc, which can only select values from a finite set of choices. Categorical features original input are mostly strings. Despite that decision trees and some other numbers of models can directly take in the strings, for logistic regression or SVM models, the categorical features need to be translated to numerical form so that they could properly work.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-do-feature-engineering-on-categorical-features","title":"How to do feature engineering on categorical features?","text":"<p>One would need to encode the features to a higher dimensional vector to represent them in the model. - ordinal encoding: usually used to treat those data that has ordinal sequence, for example when scoring we have high &gt; middle &gt; low, then the ordinal encoder would help to describe this type of sequence via giving it a numerical ID. For example, we could represent high as 3, middle as 2 and low as 1 in this case, which helps retain the high to low relationship. - one-hot encoding: usually used to treat features that do not have ordinal relationships, for example, for blood type, one could directly use the [1,0,0,0], [0,1,0,0], [0,0,1,0] and [0,0,0,1] to represent the different types. Note:     - use of sparse vector for saving space     - high-dimensional features can be difficult in following scenarios: 1) K-nearest neighbors, the distance between two high-dimensional vectors can be hard to measure, 2) logistic regression, the parameters can increase with higher dimensions, thus causing overfitting problems and 3) only some of the dimensions could be helpful when doing clustering or predictions, so one could think to reduce dimensions with feature selections. - binary encoding: using binary to do a hash mapping on the original category ID, this can help save space when comparing with the one-hot encoding as it is usually of fewer dimensions.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#high-dimensional-feature-crosses","title":"High Dimensional Feature Crosses","text":""},{"location":"ml_fundamentals/ML_fundamentals/#what-are-feature-crosses-and-how-to-deal-with-high-dimensional-feature-crosses","title":"What are feature crosses? And how to deal with high-dimensional feature crosses?","text":"<p>Using single features to combine them together via dot-product or inner-product, one can get a combination of two features to help represent nonlinear relationships.</p> <p>Using logistic regression as an example, when a data set contains feature vector X=(x_1, x_2, ..., x_k) then one would have Y = \\text{sigmoid}(\\sum_i \\sum_j w_{ij} &lt;x_i, x_j&gt;) . w_{ij} is of dimension n_{x_i}\\cdot n_{x_j} . But when n_{x_i} \\times n_{x_j} is huge, especially in use cases of website customers and number of goods, this can be really huge dimension. So **one way to get around this is to use a k-dimensional low-dimension vector (k &lt;&lt; m, k &lt;&lt; n). Now,  w_{ij} = x_i' \\cdot x_j' and now the number of parameters one needs to tune is m\\times k + n \\times k . This can also be viewed as the <sup>2</sup>matrix vectorization, that has been widely used in the recommendation systems. **</p> <p>We have understood how to use dimension reduction to reduce the number of parameters that the model needs to learn given a feature cross of two high-dimensional features.  But in reality, we are facing a variety of high-dimensional features. So a single feature crosses of all the different pairs would induce 1) too many parameters and 2) overfitting issues. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-effectively-select-the-feature-combinations","title":"How to effectively select the feature combinations?","text":"<p>We introduce a feature cross selection based on decision tree models. Taking CTR prediction as an example, assume that the input includes age, gender, user type (free vs paid), searched item type (skincare vs foods), etc. We could thus make a decision tree from the original input and their labels.  We could then view the feature crosses from the tree, that contains four different type of pairs: 1. age + gender 2. age + searched item type 3. paid user + search item type 4. paid user + age How to best construct the decision trees? One can use the Gradient Boosting Decision Tree\u00ef\u00bc\u0152GBDT or use the link to get a better idea of the algorithm. The idea behind is that whenever before constructing a decision tree, we first calculate the error from the true value and iteratively construct the tree from the error.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#textual-descriptive-models","title":"Textual Descriptive Models","text":"<p>Related Content: Ngram_Language_Modeling</p> <p>Text is a category of unstructured data. How to work with textual data has always been one of the most important research directions.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-of-the-textual-descriptive-models-what-pros-and-cons-each-have","title":"What are some of the textual descriptive models what pros and cons each have?","text":"<ul> <li>Bag of words: Consider each article as a bag of words, ignoring the sequence of how each word appears. Specifically, it separates the entire paragraph of texts at word unit and represent each paragraph as a long vector. Each dimension in the vector is a word, and the weight represents how important the word is in the original article. </li> <li>TF-IDF (Term Frequency-Inverse Document Frequency): Is often used to calculate the weight of the words, \\text{TF-IDF}(t,d)=\\text{TF}(t,d) \\times \\text{IDF}(t) , where \\text{TF}(t,d) represents the frequency of word t in document d, whereas \\text{IDF}(t) is the reverse document frequency to measure word t's importance in grammar, corresponds to equation \\text{IDF}(t) = log^{\\frac{\\text{total article}}{\\text{total article that contains word} t +1}} the general meaning behind is that if a word appears so in various articles, then it means that it is a commonly used word, hence it would not contribute much in differentiating the specific meaning behind each articles, hence it should be penalized when weighting.</li> <li>N-gram: when \"natural language processing\" being separated into 3 words as word unit, the meaning of this phrase is totally different from it is now, hence usually we could add n words as a feature unit into the vector to form the N-gram model. </li> <li>Topic Model</li> <li>Word Embedding: word embedding is a family of word vector models, the main idea is to project each word to a low-dimensional space (K = 50 -300 dimensions) using a dense vector. Each dimension in K-dimension would be viewed as a implicit topic.  In general, in shallow learning models (traditional ML models), a good feature engineering step can help extremely good performance. Deep learning on the other hand, could help us with an automated feature engineering way via hidden layers. Hence, it makes sense for the deep learning model to beat the shallow learning model in general. Recurrent neural network and convolutional neural network are both good at capture the characteristics of the text while lowering the number of parameters that the model needs to learn, which can expedite the speed of training and also lower the risk of overfitting. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#word2vec","title":"Word2Vec","text":"<p>One of the most common word embedding models, it is actually a shallow neural network. It can be of two different types of structures:  1. Continuous Bag of Words 2. Skip-gram</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-does-word2vec-work-what-is-the-difference-between-word2vec-and-lda-latent-dirichlet-allocation","title":"How does word2vec work? what is the difference between word2vec and LDA (Latent Dirichlet allocation)","text":"<ul> <li>Continuous Bag of Words<ul> <li>Goal is to use contextual words that predict the probability of the current word to appear.</li> <li>Structure: <ul> <li>input layer: w(t-2), w(t-1), ..., w(t+1), w(t+2) using one-hot encoding</li> <li>projection/hidden layer: sum(probability)</li> <li>output layer: w(t) using softmax</li> </ul> </li> </ul> </li> <li>Skip-gram<ul> <li>Goal is to use the current word to predict the probability of each contextual word.</li> <li>Structure:<ul> <li>input layer: w(t) using one-hot encoding</li> <li>projection/hidden layer</li> <li>output layer: w(t-2), w(t-1), ..., w(t+1), w(t+2) using softmax</li> </ul> </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#image-data-not-sufficient-cold-start","title":"Image Data not sufficient - Cold Start","text":"<p>When doing machine learning modeling, one very big problem that everyone may face would be not sufficient training data. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-would-you-do-if-the-training-data-is-not-sufficient-how-to-mitigate-this-issue","title":"What would you do if the training data is not sufficient? How to mitigate this issue?","text":"<p>Information that a model can provide include 1) information from training and 2) heuristic information that people provide from model formation (including design / learn / deduct). When training data not enough, it means that the model lacks information from training data, but need more a priori. a priori can be effective on models, including certain internal structure of the model, assumption or constraints. a priori can also be applied to datasets, for example using certain assumption to change / tune or expand the training data so it contains more effective information, which can facilitate model training and learning.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#overfitting","title":"Overfitting","text":"<p>One big problem that comes from not enough data is overfitting, which is that the model performs well on training set but the evaluation / prediction set is not good. The treatment can come from two different categories: - methods based on models that decrease the risk of overfitting     - simplify model - downgrade from non-linear to linear model     - apply constraints to shrink hypothesis space - L1 / L2 regularization     - integrated training     - dropout hyperparameters - data augmentation: manipulating data to expand the data set     - image space manipulation         - rotation / shrinkage / expansion / crop of the original image when working with image data         - addition of noise to the image         - color change of image         - hue / contract / brightness of image     - image feature engineering / extraction         - data expansion or #over-sampling via SMOTE (Synthetic Minority Over-sampling Technique)         - using GAN or other generative methods for good samples     - transfer learning from other models and data         - using pre-trained general model from big dataset, we could fine-tune specifically using the small datasets</p>"},{"location":"ml_fundamentals/ML_fundamentals/#model-evaluation","title":"Model Evaluation","text":""},{"location":"ml_fundamentals/ML_fundamentals/#evaluation-metrics-and-their-limitations","title":"Evaluation metrics and their limitations","text":"<p>When doing model evaluation, the classification / sort / regression problems seems to always use different metrics for evaluation. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#accuracy-and-its-limitations","title":"Accuracy and its limitations","text":"<p>The accuracy only measures the number of correct labels divided by the number of total labels. This can potentially lead to a issue when the number of labels are limited in the dataset. When negative samples composed 99% of the data, if every label is a negative one, we still get 99% accuracy. So, if we use more effective mean accuracy that quantifies the mean accuracy under each category, it would be a better metrics to work with.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#precision-recall-and-their-balance","title":"Precision &amp; Recall and their balance","text":""},{"location":"ml_fundamentals/ML_fundamentals/#concept-of-precision-recall","title":"Concept of Precision &amp; Recall","text":"<p>Now we need to introduce the concept of precision and recall.  Precision cares about the correctness of positive predictions, whereas recall cares about coverage of actual positives.  Precision and recall trade off via the decision threshold. In a binary classification problem: $$\\text{Precision} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false positive}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{positive predictions}}} $$</p> <p>$$\\text{Recall} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false negative}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{actual positives}}} $$ The F1 score is their harmonic mean: $$\\text{F1} = \\frac{2(\\text{Precision})(\\text{Recall})}{\\text{Precision} + \\text{Recall}} = \\frac{2N_{\\text{true positive}}}{2N_{\\text{true positive}}+N_{\\text{false positive}}+N_{\\text{false negative}}} $$ this value ranges from 0 to 1 and penalizes imbalance, thus when either precision or recall is low, F1 drops sharply.  F1 should be used when false positives and false negatives matter about equally, especially with imbalanced classes. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#confusion-matrix-implementation","title":"Confusion Matrix Implementation","text":"<pre><code>import numpy as np\n\ntrue_labels = np.array([0, 0, 1, 1, 0, 1, 0, 1, 1, 1])\npredicted_labels = np.array([0, 1, 0, 1, 0, 1, 1, 1, 1, 0])\n\nTP = np.sum((predicted_labels == 1) &amp; (true_labels == 1))\nTN = np.sum((predicted_labels == 0) &amp; (true_labels == 0))\nFP = np.sum((predicted_labels == 1) &amp; (true_labels == 0))\nFN = np.sum((predicted_labels == 0) &amp; (true_labels == 1))\n\nprint(\"Confusion Matrix:\\n TP: \", TP, \"\\tFP: \", FP, \"\\n FN: \", FN, \"\\tTN: \", TN)\n\n'''Output:\nConfusion Matrix:\n TP:  4     FP:  2 \n FN:  2     TN:  2\n'''\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#precision-recall-in-ranking-retrieval-variants","title":"Precision &amp; Recall in Ranking / retrieval variants","text":"<pre><code>def precision_at_k(ground_truth_set, ranked_list, k):\n    return len(set(ranked_list[:k]) &amp; ground_truth_set) / k\n</code></pre> <p><pre><code># when there are more than one query / user / example that we would like to test on our predictions, we use the weighted average of the precision_at_k.\ndef mean_precision_at_k(ground_truth_sets, ranked_lists, k):\n    # ground_truth_sets and ranked_lists are aligned lists\n    return sum(precision_at_k(g, r, k) for g, r in zip(ground_truth_sets, ranked_lists)) / len(ground_truth_sets)\n</code></pre> - Precision@k for one case q (one list). - Mean Precision@k average of those values over all cases q \\in Q.</p> <p>Example: when dealing with video vague search functionality, it seems that the search ranking model can return the top 5 precision pretty high, however, the user in reality still cannot find the videos they want, especially those unpopular ones. Where does this problem coming from?</p> <p>Root cause analysis: Coming back to the example above, the top 5 precision being really high, meaning that the model can get the true positive results on a pretty good level with a certain set of positive predictions; however, when it comes down to cases where users would like to find not so popular videos, the precision of ranks can be rather no so useful as the user is looking for not so well-defined labels, hence the good precision of popular videos would not be helpful for this case as model is not providing all the relevant videos to the user and this is a problem of not so good recall rate.  Let's say for the top 5 results, the precision@5 to be 100%, meaning that the correctness of the positive results is pretty higher, however, the recall@5 can still be 5%, meaning that only predicted 5 true positives although there are 100 actual positives involved. When doing model evaluation, it means that we should be focusing on both precision and recall, and also using different top N values for observations. </p> <p>Hence, in general, when people evaluate the goodness of a sort algorithm, they also look at the P-R curve, where in this curve, the x-axis corresponds to recall rate whereas the y-axis corresponds to precision rate. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#use-of-p-r-curve-for-model-evaluation-and-threshold-choice","title":"Use of P-R Curve for model evaluation and threshold choice","text":"<p> Each data point on the curve corresponds to a precision-recall combination at a certain threshold for True samples of choice, for example 0.95 / 0.9, etc. The closer to the origin (0,0) point, the bigger the threshold is.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-pick-the-threshold-in-practice","title":"How to pick the threshold in practice","text":"<ul> <li>Capacity-constrained: If reviewers can handle 300 cases/day, pick the smallest threshold that yields \u00e2\u2030\u02c6300 flags/day; report the resulting (Precision, Recall).</li> <li>Recall target: If policy demands \u00e2\u2030\u00a595% recall, choose the lowest threshold achieving that, then report precision (and expected review load).</li> <li>Cost-based: Minimize \\text{Cost}_{\\text{false positives}}\\cdot{\\text{False Positives}}+\\text{Cost}_{\\text{false negatives}}\\cdot{\\text{False Negatives}} over thresholds. Also report AUPRC to compare models independent of a single threshold (higher is better, especially with class imbalance).</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#root-mean-squared-errors-rmse","title":"Root-mean Squared Errors (RMSE)","text":"RMSE = \\sqrt{\\frac{\\sum_{i=1}^{n}{(y_i - \\hat y_i)^2}}{n}}  <p>Root-mean squared error has long been used as the metric for evaluating the regression model.</p> <p>Example: as a streaming company, one would say that prediction of traffic for each series can be really important when it comes down to ads bidding and user expansion. One would like to use a regression model to predict the traffic trend of a certain series, but whatever regression model that one uses, the RMSE metric ends up being really high. But, in reality, the model 95% of the time predict error is less than 1%, with really good prediction results. What might be the reason of this extraordinarily good results?</p> <p>Root cause analysis: From what the example, says there are two possible ways for the RMSE to be ineffective: 1) n being really small hence at this moment, the calculated error cannot be measurable anymore, 2) all the errors between actual value and predicted value are over- / under-predicting that the summation at the end being really high, however, in reality it is not the case and 3) one outlier being really off when comparing with other data points, it is contaminating the RMSE to be really big.  Coming back to the question, as 95% of the time to model has really good prediction error hence it means the other 5% of the time the model can be really off with big outliers and it could happen when a series with small traffic / newly come-out / newly accoladed could produce this big error.</p> <p>How to solve: 1) When we think these outliers are noises, then we need to filter them out at the early stage when doing data cleaning, 2) If we do not think they are noises, then we need to further improve the prediction capability of our algorithm so that we could somehow model the formation of these outliers. and 3) We could also use a better metric for the model evaluation. There are indeed better evaluation metrics that are of better robustness than RMSE, for example, Mean Absolute Percentage Error (MAPE):</p>"},{"location":"ml_fundamentals/ML_fundamentals/#mean-absolute-percentage-error","title":"Mean Absolute Percentage Error","text":"MAPE = \\sum_{i=1}^n{|\\frac{(y_i - \\hat y_i)}{y_i}|\\cdot\\frac{100}{n}} <p>When comparing with RMSE, MAPE normalizes the error rate of each data point to mitigate the outlier impact from the absolute error.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#expanding-on-the-regression-evaluation-metrics","title":"Expanding on the regression evaluation metrics","text":""},{"location":"ml_fundamentals/ML_fundamentals/#quick-definitions","title":"Quick definitions","text":"<p>Let y be the true value and \\hat y\u00e2\u20ac\u2039 the prediction.   sMAPE (common form):  \\frac{100}{n}\\sum\\frac{2|y-\\hat y|}{|y|+|\\hat y|}</p>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-which","title":"When to use which","text":"<ul> <li>Use RMSE when:<ul> <li>Big errors are much worse than small ones (squared penalty).</li> <li>The target never hits zero/near-zero and units are meaningful (e.g., dollars, \u00c2\u00b0C).</li> <li>You care about calibration and smooth optimization (differentiable).</li> </ul> </li> <li>Use MAPE when:<ul> <li>Stakeholders want an average percentage error that is easy to read.</li> <li>True values are strictly positive and not near zero (e.g., revenue, demand &gt; 0).</li> <li>You're okay that over-forecasts and under-forecasts are weighted differently (MAPE tends to penalize under-forecasting less when y is small).</li> </ul> </li> <li>Use sMAPE when:<ul> <li>You want a percentage-like metric that is less explosive near zero than MAPE.</li> <li>You have occasional zeros or tiny values.</li> <li>You accept that sMAPE has its own quirks (bounded but not perfectly symmetric in practice).</li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#strengths-gotchas-tldr","title":"Strengths &amp; gotchas (TL;DR)","text":"<ul> <li>RMSE<ul> <li>Sensitive to large mistakes (good if that matches cost).</li> <li>Outlier-heavy data can dominate the score.</li> <li>Scale-dependent hard to compare across series with different scales.</li> </ul> </li> <li>MAPE<ul> <li>Intuitive (%).</li> <li>Undefined at y=0; huge when y ~ 0.</li> <li>Can favor under-forecasting for small y.</li> </ul> </li> <li>sMAPE<ul> <li>Handles zeros better; bounded.        </li> <li>Still quirky near zero and not a true solution for optimization.</li> <li>Different papers/tools use slightly different variants</li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#other-basic-metrics-you-should-know","title":"Other basic metrics you should know","text":"<ul> <li>MAE: Robust to outliers vs RMSE; easy to explain (units).</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#simple-decision-guide","title":"Simple decision guide","text":"<ol> <li>Zeros or tiny targets?<ul> <li>Avoid plain MAPE. Prefer sMAPE</li> </ul> </li> <li>Large errors are very costly?<ul> <li>Use RMSE (or set a business-weighted loss).</li> </ul> </li> <li>Need % interpretability across series?<ul> <li>Use sMAPE, or MASE (if comparing to a baseline).</li> </ul> </li> <li>Care about relative ratios?<ul> <li>Use RMSLE/MSLE (with positive targets).</li> </ul> </li> <li>Mixed scales or many series?<ul> <li>WAPE or MASE are safe, comparable choices.</li> </ul> </li> </ol>"},{"location":"ml_fundamentals/ML_fundamentals/#practical-tips","title":"Practical tips","text":"<ul> <li>If you must report a % and have zeros, say: We use sMAPE (formula shown) instead of MAPE to handle zeros; we also report WAPE for scale-free comparability.</li> <li>Always state the exact formula you use (especially for sMAPE) to avoid confusion.</li> <li>Consider reporting two metrics: one business-facing (% like WAPE/sMAPE) + one technical (MAE/RMSE).</li> </ul> <p>Overall, one should always report a pair / set of MECE metrics to evaluate their algorithms to better understand &amp; discover the problems in the model, to better solve cases in real business settings.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#roc-curves","title":"ROC Curves","text":"<p>Binary classifiers are the mostly used and applied classifier in the ML industry. There are a lot of different metrics that one could use for evaluate the binary classifiers, including precision, recall, F1 score and P-R curve. But these metrics are only reflecting one aspect of the model. Hence, ROC curves can be of really good use. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-a-roc-curve","title":"What is a ROC curve","text":"<p>ROC curves are called receiver Operating Characteristic Curves, which established from the military field and are often used in the medical industry as well. This curve's x-axis is the false positive rate, whereas the y-axis is the true-positive rate. </p> <p>\\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}} \\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}} Example: There are 10 patients, where in there are 3 positive cancer patients, and the rest are negative patients. The hospital decides to do diagnosis on these customers and figured that 2 are true positive cancer patients. In this case:</p> \\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}} = \\frac{1}{7}$$ $$\\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}}=\\frac{2}{3}"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-draw-a-roc-curve","title":"How to draw a ROC curve","text":"<ul> <li>What is needed<ul> <li>True labels y \\in \\{0,1\\}</li> <li>A score for the positive class per item (probability or decision score).  </li> </ul> </li> </ul> Sample Number True Label Model Output Probability as Positive 1 Positive 0.9 2 Positive 0.8 3 Negative 0.7 <p>From this example, we could then plot out the true positive rate (TPR) as the x-axis and false positive rate (FPR) as the y-axis for the curve, hence getting the ROC curve. There is a more direct way to plot the ROC curve as well:</p> <ul> <li>Getting the number of Positive &amp; Negative samples, i.e. assuming number of positive samples to be P and negative to be N.</li> <li>Getting the x-axis labels to be the count of negative samples, and y-axis labels to be the count of positive samples, then use the model output probability to do sorting of the samples</li> <li>Now draw the ROC curve from origin, whenever seeing a positive sample to draw a vertical line segment of +1 increment on y-axis, whenever seeing a negative sample then we draw a horizontal line segment along the x-axis until we reach the final sample with curve ending at (1,1).</li> </ul> <pre><code>from matplotlib import pyplot as plt\nfrom numpy import random\n\ntruth_labels = [1 if random.rand() &gt; 0.6 else 0 for _ in range(500)]\n# we generate some random predictions that would normally be obtained from the model\n# If a predicted probability is higher than the threshold, it is considered to be a positive outcome \npredicted_probs = [max(0, min(1, random.normal(loc=label, scale=0.3))) for label in truth_labels]\n\ndef roc_curve(truth_labels, predicted_probs):\n    thresholds = [0.1 * i for i in range(11)]\n    tprs, fprs = [], []\n    for threshold in thresholds:\n        tp = fp = tn = fn = 0  # initialize confusion matrix counts\n        # for each prediction\n        for i in range(len(truth_labels)):\n            # calculate confusion matrix counts\n            if predicted_probs[i] &gt;= threshold:\n                if truth_labels[i] == 1:\n                    tp += 1\n                else:\n                    fp += 1\n            else:\n                if truth_labels[i] == 1:\n                    fn += 1\n                else:\n                    tn += 1\n        # track the TPR and FPR for this threshold\n        tprs.append(tp / (tp + fn))  # True Positive Rate (TPR)\n        fprs.append(fp / (tn + fp))  # False Positive Rate (FPR)\n    return tprs, fprs\n\n\ntprs, fprs = roc_curve(truth_labels, predicted_probs)\nplt.plot(fprs, tprs, marker='.')\nplt.show()\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-calculate-the-auc-area-under-curve","title":"How to calculate the AUC (area under curve)?","text":"<p>As simple as it could be, AUC is the area under the ROC curve, which can quantitatively reflect the model performance based on ROC curve. It is simple to calculate AUC along RUC x-axis. Due to that ROC curve tends to be above y=x, AUC values are usually between 0.5-1. The bigger the AUC is, the better the classifier is as the more likely that the classifier put the true positive samples at the front. </p> <pre><code>def compute_aucroc(tprs, fprs):\n    aucroc = 0\n    for i in range(1, len(tprs)):\n        aucroc += 0.5 * abs(fprs[i] - fprs[i - 1]) * (tprs[i] + tprs[i - 1])\n    return aucroc\n\naucroc = compute_aucroc(tprs, fprs)\nprint(f\"The AUC-ROC value is: {aucroc}\")  # The AUC-ROC value is: 0.9827272125066242\n</code></pre> <p>We have touched on the P-R curve for evaluating classification or sort algorithms. Comparing with P-R curve, there is one important character of ROC curve, which is that when positive / negative sample distribution change significant, the ROC curve shape could stay rather consistently whereas the P-R curve shape would be changing. This makes the ROC curve to mitigate the interference from diverse test sets and could more objectively evaluate the algorithm. In reality, when positive counts are much less than the negative counts, when switching dataset the data can be of big change, so a stable and robust evaluation would be important. Hence, usually ROC can be used in more variety of scenarios and could be utilized in sort / recommendation / ads. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-each-curve-shows","title":"What each curve shows","text":"<ul> <li>ROC: y = True Positive Rate (recall), x = False Positive Rate. \"How well do I separate positives from negatives overall?\"     _\"If I take the items my model flags as positive, how many are actually positive?</li> <li>PR: y = Precision, x = Recall. \"When I go after positives, how clean are my catches?\"     _\"As I move the threshold, how well do I trade off catching positives vs accidentally flagging negatives?\"</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-which_1","title":"When to use which","text":"<ul> <li>Use PR (Precision &amp; Recall) when positives are rare or review capacity is limited.     Examples: fraud, disease screening, anomaly detection, search/retrieval, human-in-the-loop queues.     Why: PR focuses on the quality of retrieved positives. Baseline matters: random AUPRC prevalence (e.g., 1% positives random AUPRC = 0.01).</li> <li>Use ROC when classes are roughly balanced or you care about both error types evenly.     Examples: many general classifiers, spam vs ham with moderate prevalence, A/B classifiers in balanced datasets.     Why: ROC is insensitive to class imbalance and summarizes ranking quality across thresholds. Random AUC-ROC = 0.5.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#intuition-about-imbalance","title":"Intuition about imbalance","text":"<ul> <li>With 1,000,000 negatives and 1,000 positives, an FPR of 0.5% looks tiny on ROC, but it's 5,000 false alarms precision will be poor.     PR makes this visible; ROC can look deceptively great.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-choose-in-practice","title":"How to choose in practice","text":"<ul> <li>Rare positives or ops-constrained? Prefer PR (and report Precision/Recall at your operating threshold or Precision@k).</li> <li>Balanced costs/distribution? ROC is fine (and stable).</li> <li>Comparing models broadly? Report both AUC-ROC and AUPRC, plus a point metric at your intended threshold.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#reading-the-curves","title":"Reading the curves","text":"<ul> <li>ROC: closer to top-left is better; AUC near 1 is strong.</li> <li>PR: higher curve is better; sustaining high precision as recall grows is ideal.</li> <li>Curves can cross. Pick the model that\u00e2\u20ac\u2122s better in the recall region you care about (e.g., recall \u00e2\u2030\u00a5 0.9). Consider partial AUC (ROC) or AUPRC over a recall range.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-to-report-good-default","title":"What to report (good default)","text":"<ul> <li>AUPRC + AUC-ROC (global picture)</li> <li>(Precision, Recall) (or F_\\beta) at the chosen threshold</li> <li>If capacity-limited: Precision@k (and expected volume flagged)</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#use-of-cosine-distance","title":"Use of cosine distance","text":"<p>How to evaluate the distance between samples can also define the optimization target and training method. In ML problems, we usually take the features to be of vector form, so when analyzing the two feature vector similarity, we could use cosine similarity. The cosine similarity can range from -1 to 1, where when two vectors are exactly the same, the cosine similarity becomes 1. Hence, when looking at distances, 1-cosine similarity becomes the cosine distance. Overall, the cosine distance is [0,2] and the same two vectors their cosine distance becomes 0.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#definition-of-euclidean-distance-cosine-distance","title":"Definition of Euclidean Distance &amp; Cosine Distance","text":"<p>Euclidean Distance For vectors x,y\\in\\mathbb{R}^d:</p> d_{\\text{Euc}}(x,y)=\\sqrt{\\sum_{i=1}^{d}(x_i-y_i)^2} \\in [0,\\infty)  <ul> <li>What it measures: straight-line (L2) distance in space.</li> <li>Sensitive to scale/magnitude: doubling a vector doubles distances.</li> <li>Squared form: sometimes use \\|x-y\\|^2 (no square root) for speed/convexity.~</li> </ul> <p>Cosine Distance Start with cosine similarity:</p> \\text{cos\\_sim}(x,y)=\\frac{x\\cdot y}{\\|x\\|\\,\\|y\\|}\\in[-1,1] <p>Cosine distance (common definition): d_{\\text{cos}}(x,y)=1-\\text{cos\\_sim}(x,y)\\in[0,2]</p> <ul> <li>What it measures: difference in direction (angle) only.</li> <li>Scale-invariant: multiplying a vector by a positive constant doesn\u00e2\u20ac\u2122t change it.</li> </ul> <p>Overall, on unit vectors, Euclidean and cosine distances are monotonic transforms. Also, on a unit circle, one would see: \\|A-B\\|=\\sqrt{2(1-cos(A,B))} - When to use which     - Use Euclidean when magnitude matters (e.g., real spatial distances, continuous features with meaningful scales).     - Use Cosine when orientation matters more than length (e.g., text/image embeddings, TF-IDF vectors).</p>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-cosine-similarity-but-not-euclidean-distance","title":"When to use cosine similarity but not Euclidean distance?","text":"<p>For two vectors A and B, when their cosine similarity are being defined as cos(A,B)=\\frac{A\\cdot B}{\\|A\\|_2 \\|B\\|_2} , i.e. the cosine of angle between two vectors, we thus measure the angular distance between them, rather than the absolute magnitude, with the range being [-1,1]. When a pair of text being very different in length, but with similar content, if using Euclidean distance, one can think their distance being pretty big whereas when using cosine similarity, the angle between the two can be rather small, hence giving high similarity. In text, visual, video, image industries, when the objective has high dimensions, cosine can still retain its character of [-1,1] whereas the Euclidean distance number can be really big. </p> <p>Overall, Euclidean distance measures the absolute difference between numbers whereas the cosine distance measures the directional relative difference.  </p> <p>Taking an example of measuring user behavior of watching two different TV series:     - user A's watch vector = (0,1)     - user B's watch vector = (1,0) It is obvious that the cosine distance between the two can be really big whereas their Euclidean distance is small. </p> <p>When measuring user A/B preference, we focus more on relative difference, hence we should be using the cosine distance whereas when we are analyzing user login frequency or activity, we should be using Euclidean distance instead as the cosine distance would think two users of vector (1,10) and (10,100) are more similar to each other.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#is-cosine-distance-a-strictly-defined-distance","title":"Is cosine distance a strictly defined distance?","text":"<p>No, it is not strictly defined as it satisfies the Non-negativity &amp; identity (strictness), symmetry but does not satisfy the triangle inequality. A use case of this question is that when reading the word vector of <code>comedy</code> and <code>funny</code> and also <code>happy</code> and <code>funny</code>, their cosine distance is &lt; 0.3, whereas the distance between <code>comedy</code>and <code>happy</code> is 0.7. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#model-evaluation-methods","title":"Model Evaluation Methods","text":"<p>In ML algorithm design, we usually split the samples into training and test data set, where the training set is used to training the model and the test set is used to evaluate the model. In sample split and model evaluation process, we could use different sampling or evaluation methods. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#in-model-evaluation-what-are-the-main-evaluation-methods-what-are-their-pros-and-cons","title":"In model evaluation, what are the main evaluation methods, what are their pros and cons?","text":"<ul> <li>Holdout evaluation: Holdout evaluation is the easiest way as it randomly split the original sample set into training and evaluation. For example, for a clickthrough rate prediction algorithm, we split the samples into 70 - 30%. We use the 70% data for model training and the 30% for evaluation, including ROC curve, accuracy calculation and recall rate metric evaluation. This has significant downside: the calculated final evaluation metric is highly correlated with the original data split. In order to eliminate this randomness, researchers started to use the \"cross validation\" idea.</li> <li>cross-validation: k-fold cross validation would always split the data set into k different sets that are of same counts. The method goes through all the k sample sets and always use the current subset as the evaluation set whereas the other ones are training set. usually we use k = 10.</li> <li>Bootstrap: <ul> <li>Make a fake test set by randomly picking the same number of rows from your real test set with replacement (so rows can repeat and some are left out).<ul> <li>Suppose the test set has n rows.</li> <li>Pick n indices at random WITH replacement from <code>0..n-1</code>. (Duplicates allowed; some rows won't be picked.)</li> <li>Those picked rows form one fake test set. </li> </ul> </li> <li>On that fake set, compute your metric (accuracy, F1, AUC, RMSE whatever you care about).</li> <li>Repeat steps 1-2 a lot (like 1,000 times).</li> <li>Now you have 1,000 metric values.<ul> <li>The average is your central estimate.</li> <li>The middle 95% range (ignore the lowest 2.5% and highest 2.5%) is your 95% confidence interval. As n gets large, about 36.8% of items are not in the set (never selected) and 63.2% appear at least once. This is the source of the bootstrap terminology</li> </ul> </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#hyperparameter-tuning","title":"Hyperparameter tuning","text":"<p>For a lot of algorithm engineers, hyperparameter tuning can be really of headache, as there is no other way other than empirically tune the parameters to a reasonable range, while it is really important for the algorithm to be effective.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-of-the-common-ways-of-hyperparameter-tuning","title":"What are some of the common ways of hyperparameter tuning?","text":"<ul> <li>grid search: Exhaustive on a small, low-dimensional space. Deterministic but expensive; scales poorly. In reality, it tend to be used as a bigger search space and larger step size to find the possible range of optimal results, then to shrink the search space and find more accurate optimal solution.</li> <li>random search: Sample hyperparams at random (often log-uniform for learning rates). Much better than grid when only a few dims matter but cannot guarantee for a optimal solution.</li> <li>Bayesian optimization: Model config -&gt;score to pick promising next trials. Unlike random/grid search do not learn from past trials, BO uses what you have learned so far to place the next (expensive) trial where it is most likely to pay off.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#overfit-and-underfit","title":"Overfit and Underfit","text":"<p>This section tells how one could efficiently recognize overfit and underfit scenarios and do model improvements based on what has been identified. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-overfit-and-what-is-underfit","title":"What is overfit and what is underfit?","text":"<ul> <li>Overfit means that a model can be overfitting on its training data whereas on the test and new data sets, it's performing worse. </li> <li>Underfit means that the model is performing illy on both training and test data sets. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-ways-to-mitigate-the-overfit-and-underfit","title":"What are some ways to mitigate the overfit and underfit?","text":"<ul> <li>Avoid overfit: <ul> <li>Data: obtaining more data is one primitive way of solving overfit problem as more data can help the model to learn more efficient features to mitigate the impact from noise. Using rotation or expansion for image or GAN for getting more new training data.</li> <li>Model: one could use less complicated / complex model to avoid overfitting. For example, in NN one could reduce the number of layers or neurons in each layer; or in decision tree, one could reduce the depth of the tree or cut the tree.</li> <li>Regularization: one could use L2 regularization in model parameters to constraint the model. </li> <li>ensemble method: ensemble method is to integrate multiple models together to avoid a single model overfitting issue, such as bagging methods.</li> </ul> </li> <li>Avoid underfit:<ul> <li>add more features: when there is not enough features or the features are not relevant with the sample labels, there would be a underfit. We could dig into contextual features / ID features / combination of features to obtain better results. In deep learning, factor decomposition / gradient-boosted decision tree / deep-crossing can all be used for get more features.</li> <li>increase the complexity of model. </li> <li>decrease regularization parameters. </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#early-stoppings","title":"Early Stoppings","text":"<ul> <li>Early stopping watches validation loss/metric and halts training when it stops improving, and is a stopping rule driven by the validation metric\u2019s change, not a pre-fixed iteration count</li> <li>It reduces overfitting (lower variance) by not letting the model memorize noise; acts like implicit L2 regularization. Train while checking performance on a validation set. Whenever the validation score improves, remember those weights. If it doesn\u2019t improve for a while (patience), stop and roll back to the best checkpoint. This caps model complexity at the point where it generalized best, preventing the later epochs from fitting noise</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#l2-l1-regularization","title":"L2 / L1 Regularization","text":""},{"location":"ml_fundamentals/ML_fundamentals/#setup","title":"Setup","text":"<p>Model (no intercept for simplicity):</p> \\hat y_i = w\\,x_i <p>Data loss (sum of squared errors):</p> <p>\\sum_i (y_i - w x_i)^2 L2-regularized loss (ridge): \\underbrace{\\sum_i (y_i - w x_i)^2}_{\\text{fit the data}} \\;+\\; \\underbrace{\\lambda\\, w^2}_{\\text{penalize big weights}} - \\lambda&gt;0 controls the strength of the penalty (larger \\lambda stronger shrinkage). - In practice, we usually don't penalize the bias/intercept.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-l2-penalizes-the-parameter","title":"How L2 Penalizes the Parameter","text":"<p>Take derivative w.r.t. w and set to 0:</p> \\frac{\\partial}{\\partial w}\\Big[\\sum_i (y_i - w x_i)^2 + \\lambda w^2\\Big] = -2\\sum_i x_i(y_i - w x_i) + 2\\lambda w = 0 <p>Rearrange: w\\big(\\sum_i x_i^2 + \\lambda\\big) = \\sum_i x_i y_i \\quad\\Rightarrow\\quad \\boxed{\\,w_{\\text{ridge}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2 + \\lambda}\\,} Compare to unregularized OLS: w_{\\text{OLS}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2} L2 adds \\lambda to the denominator and shrinks w toward 0.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#why-l2-decrease-variance-and-increase-bias","title":"Why L2 decrease variance and increase bias?","text":"<p>L2 regularization constrains how large the parameters can get. Constraining parameters makes the fitted function smoother/less wiggly, so predictions don\u2019t swing wildly when the training sample changes\u2014this cuts variance. The tradeoff is that the constrained model can\u2019t perfectly adapt to the true signal, so estimates are pulled toward zero (or toward simpler shapes), which introduces bias.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#tiny-numeric-example","title":"Tiny Numeric Example","text":"<p>Data: x=[0,1,2,3], y=[0,1,2,60] (last point is an outlier) - \\sum x_i^2 = 14, \\sum x_i y_i = 185 Weights: - OLS (no L2): 185/14 \\approx 13.214 - L2, \\lambda=10: 185/(14+10) = 185/24 \\approx 7.708185 - L2, \\lambda=100: 185/(14+100) = 185/114 \\approx 1.623 As \\lambda grows, w is pulled toward 0, limiting the impact of the outlier.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#gradient-descent-view-weight-decay","title":"Gradient-Descent View (Weight Decay)","text":"<p>With learning rate \\eta: w_{\\text{new}} = w_{\\text{old}} - \\eta\\Big(\\underbrace{-2\\sum_i x_i(y_i - w_{\\text{old}} x_i)}_{\\text{data gradient}} \\;+\\; \\underbrace{2\\lambda w_{\\text{old}}}_{\\text{L2 shrink}}\\Big)</p> <p>The +2\\lambda w term is the shrinkage that steadily decays weights.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#multi-feature-form-for-reference","title":"Multi-Feature Form (for reference)","text":"<p>For features X\\in \\mathbb{R}^{n\\times d}, target \\mathbf{y}:</p> \\mathbf{w}_{\\text{ridge}} = (X^\\top X + \\lambda I)^{-1} X^\\top \\mathbf{y}"},{"location":"ml_fundamentals/ML_fundamentals/#copy-paste-python","title":"Copy-Paste Python","text":"<pre><code>import numpy as np\n\nx = np.array([0,1,2,3], dtype=float)\ny = np.array([0,1,2,60], dtype=float)\n\nSxx = np.sum(x**2)\nSxy = np.sum(x*y)\n\ndef ridge_weight(lmbda):\n    return Sxy / (Sxx + lmbda)\n\nprint(\"w_OLS        =\", Sxy / Sxx)\nfor lmbda in [10, 100]:\n    print(f\"w_ridge\", ridge_weight(lmbda))\n</code></pre> <p>Notes - Standardize features before using L2/L1 (esp. linear/logistic). - Tune \\lambda via cross-validation. - Do not penalize the bias term.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#classical-algorithms","title":"Classical Algorithms","text":""},{"location":"ml_fundamentals/ML_fundamentals/#linear-regression","title":"Linear Regression","text":"<p>There are two central provinces in the world of regression: simple linear regression and multiple linear regression. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#formula-of-simple-linear-regression","title":"Formula of Simple Linear Regression","text":"<p>The formula of linear regression can be represented as y=c+m\\cdot x The formula revolves around minimizing residuals. Imagine residuals as the distance between the actual and predicted values of the dependent variable y: m = \\frac{\\sum_{i=1}^N{(x_i-\\bar x)(y_i-\\bar y)}}{\\sum_{i=1}^N(x_i-\\bar x)^2} and the constant corresponds to c=\\bar y - m \\cdot\\bar x. </p> <pre><code>import numpy as np\n\n# Step 1: Get the data set\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 4, 5, 4, 5])\n\n# Step 2: Compute the mean of the X and y\nmean_x = np.mean(x)\nmean_y = np.mean(y)\n\n# Step 3: Calculate the coefficients\nm = np.sum((x - mean_x) * (y - mean_y)) / np.sum((x - mean_x) ** 2)\nc = mean_y - m * mean_x\n\n# Voila! We have our model\nprint(f\"Model: y = {c} + {m}*x\") \u00a0# Output: Model: y= 2.2 + 0.6*x\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#formula-of-multiple-linear-regression","title":"Formula of Multiple Linear Regression","text":"<p>For simple linear regression formula, we have y=\\beta_0 + \\beta_1x, for multiple linear regression, we add multiple independent variables x_1, x_2, ... , x_m. Suppose we had n data points, each with m features, then X would be like: \\mathbf{X}=\\begin{bmatrix}   1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\\\   1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\\\ \\end{bmatrix} \\in \\mathbb{R^{n\\times (m+1)}}, \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix} \\in \\mathbb{R^{n\\times 1}}, \\mathbf{\\beta} = \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_m \\end{bmatrix} \\in  \\mathbb{R^{(m+1)\\times 1}} Each row represents the m features for a single data point. The first column with \\mathbf{1}s are the bias / intercept of each equation. The normal equation would be of form \\beta = (X^T X)^{-1}X^Ty The predicted \\hat y values can be represented as \\hat y = (1 \\cdot \\beta_0)+(\\beta_1 \\cdot x_1) + (\\beta_2 \\cdot x_2) + \\dots + (\\beta_m \\cdot x_m) To calculate all the predictions at once, we take the dot product of X and \\beta: $$\\mathbf{y} = \\begin{bmatrix} y_1 \\ y_2 \\ \\vdots \\ y_n \\end{bmatrix} = X\\cdot \\beta =\\begin{bmatrix} 1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\ 1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\ \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\ \\beta_1 \\ \\vdots \\ \\beta_m \\end{bmatrix} $$</p>"},{"location":"ml_fundamentals/ML_fundamentals/#linear-regression-model-evaluation","title":"Linear Regression Model Evaluation","text":""},{"location":"ml_fundamentals/ML_fundamentals/#coefficient-of-determination-r2r2-score","title":"coefficient of determination (R^2 score)","text":"<p>R^2=1-\\frac{SS_\\text{residuals}}{SS_\\text{total}} = 1 - \\frac{\\sum_{i=1}^n(y_i - \\hat y_i)^2}{\\sum_{i=1}^n(y_i - \\bar y_i)^2} Where SS_\\text{residuals} denotes the residual sum of squares for predictions and SS_\\text{total} denotes the total sum of squares from actual values. A higher R-squared value / closer to 1 indicates a good model fit.</p> <pre><code>import numpy as np\n# given data\nhousing_data = np.array(\\[\\[1800, 3\\], \\[2400, 4\\],\\[1416, 2\\], \\[3000, 5\\]\\])\nprices = np.array([350000, 475000, 230000, 640000])\n\n# adding 1s to our matrix\n# ones = np.ones(shape=(len(housing_data), 1))\n# X = np.append(ones, housing_data, axis=1)\nX = np.c_[np.ones((len(housing_data),1)),X] # add bias parameter to X\n\n# calculating coefficients\ncoefficients = np.linalg.inv(X.T @ X) @ X.T @ prices\n\n# predicting prices\npredicted_prices = X @ coefficients\n\n# calculating residuals\nresiduals = prices - predicted_prices\n\n# calculating total sum of squares\nsst = np.sum((prices - np.mean(prices)) ** 2)\n\n# calculating residual sum of squares\nssr = np.sum(residuals ** 2)\n\n# calculating R^2\nr2 = 1 - (ssr/sst)\n\nprint(\"Coefficients:\", coefficients)\nprint(\"Predicted prices:\", predicted_prices)\nprint(\"R^2:\", r2)\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#gradient-descent","title":"Gradient Descent","text":"<p>Gradient descent\u00a0is an iterative optimization algorithm for minimizing a function, usually a loss function, quantifying the disparity between predicted and actual results. The goal of gradient descent is to find the parameters that minimize the value of the loss function.</p> <p>Gradient descent derives its name from its working mechanism: taking\u00a0descents\u00a0along the\u00a0gradient. It operates in several iterative steps as follows:</p> <ol> <li>Choose random values for initial parameters.</li> <li>Calculate the cost (the difference between actual and predicted value).</li> <li>Compute the gradient (the steepest slope of the function around that point).</li> <li>Update the parameters using the gradient.</li> <li>Repeat steps 2 to 4 until we reach an acceptable error rate or exhaust the maximum iterations.</li> </ol> <p>A vital component of gradient descent is the learning rate, which determines the size of the descent towards the optimum solution.</p> <p>The first step is to calculate the cost function, which takes the form of J(X, y, \\theta) = \\frac{1}{m}\\sum_{i=1}^m(X\\cdot \\theta - y_i)^2 where J is the cost, X is the data, y is the actual values and \\theta is the parameters, m is the length of y. It is calculating the mean square error. </p> <pre><code>import numpy as np\n\ndef cost(X, y, theta):\n    m = len(y)\n    predictions = X @ theta\n    cost = (1/m) * np.sum((predictions - y) ** 2)\n    return cost\n</code></pre> <p>The second step is to compute the gradient descent function, which will be updated in the iterative loop: \\theta:=\\theta-\\alpha\\frac{1}{m}X^T\\cdot(X\\cdot \\theta - y) Here \\alpha is the learning rate, which determines the size of steps in the descent and X^T is the transpose of data, which should have been multiplied by 2 but as we take the derivative of the mean squared error we could also consider it to be included as part of the learning rate \\alpha. </p> <pre><code>def gradient_descent(X, y, theta, alpha, threshold=0.01):\n\u00a0 \u00a0 m = len(y)\n\u00a0 \u00a0 cost_history = []\n\u00a0 \u00a0 prev_cost = float('inf')\n\u00a0 \u00a0 iterations = 0\n\u00a0 \u00a0 while True:\n\u00a0  \u00a0 \u00a0  prediction = X.dot(theta)\n\u00a0 \u00a0 \u00a0 \u00a0 theta = theta - (alpha / m) * X.T.dot(prediction - y)\n\u00a0 \u00a0 \u00a0 \u00a0 cost = (1/(2*m)) * np.sum((prediction - y) ** 2)\n\u00a0 \u00a0 \u00a0 \u00a0 cost_history.append(cost)\n\u00a0 \u00a0 \u00a0 \u00a0 if abs(prev_cost - cost) &lt; threshold:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 prev_cost = cost\n\u00a0 \u00a0 \u00a0 \u00a0 iterations += 1\n\u00a0 \u00a0 return theta, cost_history, iterations\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#support-vector-machine-svm","title":"Support Vector Machine (SVM)","text":""},{"location":"ml_fundamentals/ML_fundamentals/#additional-resources","title":"Additional Resources","text":"<p>StatQuest Part1 SVM Main Idea StatQuest Part2 The Polynomial Kernel</p>"},{"location":"ml_fundamentals/ML_fundamentals/#main-idea-behind-svm","title":"Main Idea behind SVM","text":"<ul> <li> <p>Soft Margin Classifier (Support Vector Classifier)     When data are 3-dimensional, the Support Vector Classifier is a 2-dimensional plane in a 3-dimensional space. In mathematical world, a plane is a \"flat affine 2-dimensional subspace (hyperplane)\".</p> <p>But it only works well on data that are perfectly separated into two groups, when it comes down to data that are within certain range versus out-of-range, it cannot handle that well. - Support Vector Machine In order to make the mathematics possible, SVM use something called kernel functions to systematically find support vector classifiers in higher dimensions. - Kernel Functions When d = 1, the polynomial kernel computes the relationships between each pair of observations in 1-dimension, and these relationships are used to find a support vector classifier. In summary, the polynomial kernel systematically increases dimensions by setting d, the degree of the polynomial.  - Polynomial Kernel (a\\times b + r)^d is the polynomial kernel format, where d sets the dimension of the kernel. Using (a\\times b + \\frac{1}{2})^2 as an example: (a\\times b + \\frac{1}{2})^2 = (a\\times b + \\frac{1}{2})(a\\times b + \\frac{1}{2}) = ab + a^2b^2+\\frac{1}{4} = (a,a^2,\\frac{1}{2})\\cdot (b,b^2,\\frac{1}{2})     where (a,a^2,\\frac{1}{2}) and (b,b^2,\\frac{1}{2}) are the coordinates of the data points x-y-z dimensions. r and d are determined via cross validation. Once we determines the parameters, then we plug in all the pairs of data points and do the math to get the high-dimensional relationships. - Radial Function Kernel      Radial function kernel finds support vector classifiers in infinite dimensions but in one / two dimensional data, it behaves like weighted nearest neighborhood model.     The equation looks like this e^{-\\gamma(a-b)^2} where a and b are the x-axis coordinates of two different data points. \\gamma is the parameter that determines how much influence the pair of data points have on each other.</p> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#logistic-regression","title":"Logistic Regression","text":"<p>Logistic regression are the most widely used and most fundamental model that one could use in the ML industry. One should always understand the deduction of logistic regression and application of it, as it is used in medical diagnosis, credit evaluation, email junk categorization, etc. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#formulation-behind-logistic-regression","title":"Formulation behind Logistic Regression","text":"<p>Logistic Regression calculates a raw model output, then transforms it using the sigmoid function, mapping it to a range between 0 and 1, thus making it a probability. The sigmoid function can be defined as S(x) = \\frac{1}{1+e^{-x}}. This can thus be implemented as:</p> <pre><code>def sigmoid(z):\n    return 1 / (1+np.exp(-z))\n</code></pre> <p>The mathematical form of logistic regression can be expressed as follows: P(Y=1|x) = \\frac{1}{1+e^{-(\\beta_0+\\beta_1x)}} where P(Y=1|x) is the probability of event Y=1 given x, \\beta_0 and \\beta_1 are parameters of the model, x is the input variable and \\beta_0+\\beta_1x is the linear combination of parameters and features. </p> <p>Log-Likelihood\u00a0in Logistic Regression plays a similar role to the\u00a0Least Squares method\u00a0in Linear Regression. A maximum likelihood estimation method estimates parameters that maximize the likelihood of making the observations we collected. In Logistic Regression, we seek to maximize the log-likelihood.</p> <p>The cost function for a single training instance in logistic regression can be expressed as -[y\\log{(\\hat p)+(1-y)\\log{(1-\\hat p)}}] where \\hat p denotes the predicted probability.</p> <pre><code>def cost_function(h, y): # h = sigmoid(z) where z = X @ theta\n    return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n\ndef logistic_regression(X, y, num_iterations, learning_rate): \n    # Add intercept to X \n    intercept = np.ones((X.shape[0], 1)) \n    X = np.concatenate((intercept, X), axis=1) \n\n    # Weights initialization \n    theta = np.zeros(X.shape[1]) \n    for i in range(num_iterations): \n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        gradient = np.dot(X.T, (h - y)) / y.size \n        theta -= learning_rate * gradient \n\n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        loss = cost_function(h, y) \n\n        if i % 10000 == 0:\n            print(f'Loss: {loss}\\t') \n\n    return theta\n\ndef predict_prob(X, theta):\n    # Add intercept to X\n    intercept = np.ones((X.shape[0], 1))\n    X = np.concatenate((intercept, X), axis=1)\n    return sigmoid(np.dot(X, theta))\n\ndef predict(X, theta, threshold=0.5):\n    return predict_prob(X, theta) &gt;= threshold\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-the-difference-between-logistic-regression-and-linear-regression","title":"What is the difference between logistic regression and linear regression?","text":"<ul> <li>logistic regression is used for categorization whereas linear regression is used for regression problems. This is the most significant difference between the two. In logistic regression, when given x and hyperparameter \\theta, we could get the expectation value of the y values to predict the categorization of the values. On the other hand, in linear regression, one is solving y' = \\theta^Tx , which is the approximate of the real relationship of y = \\theta^Tx+\\epsilon where \\epsilon corresponds to the system error.</li> <li>The actual logistic regression equation can be formulated via \\log{\\frac{p}{1-p}}=\\theta^Tx, where p=P(y=1|x) , corresponding to given x the probability of y being positive. Thus the most important difference between logistic regression and linear regression would be that the logistic regression ys are discretized whereas the linear regression ys are continuous. When x and \\theta are given, logistic regression can also be seen as generalized linear models where y follows the binary distribution, whereas  when using least-squares for linear regression we view y follows the normal distribution. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-the-same-between-logistic-regression-and-linear-regression","title":"What is the same between logistic regression and linear regression?","text":"<ul> <li>They both used maximum likelihood estimation for modeling the training data. </li> <li>They both could use gradient descent for getting the hyperparameters, and it is also a common strategy that all the supervised learning methods use.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#the-general-logic-behind-regression","title":"The general logic behind regression","text":"<pre><code>Inputs: X (N\u00d7d), y (N,), model \u2208 {\"linear\",\"logistic\"}\nHyperparams: learning_rate (lr), lambda (L2), max_iters, tol, patience\nPrep:\n  Xb = concat([ones(N,1), X])        # add bias column\n  w = zeros(d+1)                     # includes bias at index 0\n  mask = [0, 1, 1, ..., 1]           # no L2 on bias\n\nFor t in 1..max_iters:\n  z = Xb @ w\n  if model == \"linear\":\n      pred = z\n      loss_data = (1/(2N)) * sum((pred - y)^2)\n  else:  # logistic\n      pred = sigmoid(z)              # clip to [eps, 1-eps] for stability\n      loss_data = -(1/N) * sum(y*log(pred) + (1-y)*log(1-pred))\n\n  loss = loss_data + lambda * sum((w*mask)^2)\n  grad = (1/N) * (Xb.T @ (pred - y)) + 2*lambda*(w*mask)\n  w = w - learning_rate * grad\n  if norm(grad) &lt; tol or early_stopping_on_val(loss): break\n\nReturn w\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#note-for-binomial-distribution-vs-normal-distribution","title":"Note for binomial distribution vs normal distribution","text":"<p>The main difference between a binomial distribution and a normal distribution lies in the type of data they describe:\u00a0==binomial distributions deal with discrete data from a fixed number of trials, while normal distributions describe continuous data that tends to cluster around a mean==.\u00a0Binomial distributions are characterized by a fixed number of trials, each with two possible outcomes (success or failure), while normal distributions are continuous, symmetric, and have a bell-shaped curve.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#decision-tree","title":"Decision Tree","text":"<p>Decision trees are often used in marketing or biomedical industries as the tree-based structure is similar to sales or diagnosis use cases. Hence, when using decision tree as key component of the ensemble method, one could get random forest or gradient boosted decision tree models, etc. Fully grown decision tree model has its characters of being direct and easy-to-explain, hence it would be also important as the ensemble method section prerequisites. Overall, the formulation of decision tree involves 1) feature selection, 2) tree construction and 3) tree pruning. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#structuring-a-decision-tree","title":"Structuring a decision tree","text":"<p>A decision tree starts at a node, called root, which breaks down into branches. Each branch then further splits into more branches, building a hierarchical network. The final branches with no more splits are referred to as leaf nodes.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#understanding-gini-index","title":"Understanding Gini Index","text":"<p>Note: A more clear explanation can be found in videos: - StatQuest: Decision and Classification Trees, Clearly Explained!!! - StatQuest: Decision Trees, Part 2 - Feature Selection and Missing Data - StatQuest: How to Prune Regression Trees, Clearly Explained!!! A Gini Index endeavors to quantify the disorder within these groups. A greater Gini Index score signifies more disorder. The formula of Gini Index can be represented as G = 1-\\sum_{i=1}^n p_i^2 where G is the Gini index or coefficient, p_i is the proportion of individuals in the ith group, and the sum is taken over n groups. Gini index is used to describe the data purity, which has similar concept with information entropy.  \\text{Gini}(D) = 1 - \\sum_{k=1}^n(\\frac{C_k}{D})^2 \\text{Gini}(D|A) = \\sum_{i=1}^n\\frac{|D_i|}{|D|}\\text{Gini}(D_i) Now let's use an example to better understand how to compute Gini index:</p> Loves Popcorn Loves Soda Age like movie A Y Y 7 N B Y N 12 N C N Y 18 Y D N Y 35 Y E Y Y 38 Y F Y N 50 N G N N 83 N Loves Popcorn Loves Soda <p>All the three leaves except for the fourth one are called impure leaves, where the fourth one is called a pure leaf node. As both leaf nodes from <code>loves Popcorn</code> are impure but there is only one node from <code>Loves Soda</code> being impure, it means that the <code>Loves Soda</code> does a better job predicting who will and will not the movie. </p> \\text{Gini Impurity for a leaf} = 1 - (\\text{the probability of \"Yes\"}) ^ 2 - (\\text{the probability of \"No\"}) ^ 2$$ $$\\text{Gini Impurity (Loves Movie | Loves Popcorn)} = 1 - (\\frac{1}{1+3})^2 - (\\frac{3}{1+3})^2 = 0.375$$ $$\\text{Gini Impurity (Loves Movie | Hates Popcorn)} = 1 - (\\frac{2}{1+2})^2 - (\\frac{1}{1+2})^2 = 0.444$$ $$\\text{Total Gini Impurity} = \\text{weighted avg of Gini for the leaves} = (\\frac{1+3}{1+3+2+1})\\cdot(0.375)+\\frac{3}{4+3}(0.444)"},{"location":"ml_fundamentals/ML_fundamentals/#implementation-of-decision-tree-splits","title":"Implementation of decision tree splits","text":"<pre><code>groups = [\n    \\[\\['Red'], ['Blue'], ['Red'\\]\\],\n    \\[\\['Blue'], ['Red'], ['Blue'], ['Blue'\\]\\],\n]\nclasses = ['Red', 'Blue']\n\nn_instances = float(sum([len(group) for group in groups]))\n\ndef gini_index(groups, classes):\n    n_instances = float(sum([len(group) for group in groups]))\n    gini = 0.0\n    for group in groups:\n        size = len(group)\n        if size == 0:\n            continue\n        score = 0.0\n        for class_val in classes:\n            p = [row[-1] for row in group].count(class_val) / size\n            score += p * p gini # summed probabilities, 1 - score = gini impurity\n        gini += (1.0 - score) * (size / n_instances)\n    return gini\n\ndef test_split(index, value, dataset):\n    left, right = list(), list()\n    for row in dataset:\n        if row[index] &lt; value:\n            left.append(row)\n        else:\n            right.append(row)\n    return left, right\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#information-gain","title":"Information Gain","text":""},{"location":"ml_fundamentals/ML_fundamentals/#max-information-gain","title":"Max Information Gain","text":"<p>For a sample set D, there are K categories, the empirical entropy for this set D can be expressed as H(D) = -\\sum_{k=1}^K \\frac{|C_k|}{D}\\log_2\\frac{C_k}{D}.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#unsupervised-learnings","title":"Unsupervised Learnings","text":"<p>We may encounter problems such that providing the machine a tons of feature data and looking for the machine to learn the pattern or structure from the data, for example the video platforms would like to categorize the users from their activities for different recommendation strategies, or looking for relationship between whether the video playing smooth or not vs their relationship with user unsubscribe. These problems are called \"unsupervised learnings\", which does not like the supervised learnings where we expect to see outputs or predictions. The unsupervised learning inputs does not contain label information, instead it needs to dig into the internal data relationship from the algorithm model. There are two main categories of the unsupervised learnings: data clustering or feature variable correlation (using correlation analysis for relationships between variables). </p>"},{"location":"ml_fundamentals/ML_fundamentals/#k-nearest-neighbors-k-nn-algorithm","title":"K-Nearest Neighbors (k-NN) Algorithm","text":"<p>The kNN algorithm works on a basic principle: a data point is likely to be in the same category as the data points it is closest to. Note that choosing 'k' significantly impacts our model. A low 'k' might capture more noise in the data, whereas a high 'k' is computationally expensive.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#euclidean-distance-calculation","title":"Euclidean Distance Calculation","text":"<p>In k-NN, classification is determined by weighing the distance between data points. Euclidean distance is a frequently used metric that calculates the shortest straight-line distance \\sqrt{(x_1-x_2)^2 + (y_1 - y_2)^2} between two data points (x_1, y_1) and (x_2, y_2) in a Euclidean space. </p> <pre><code>import math\n\n# The 'euclidean_distance' function computes the Euclidean distance between two points\ndef euclidean_distance(point1, point2):\n    squares = [(p - q) ** 2 for p, q in zip(point1, point2)] # Calculate squared distance for each dimension\n    return math.sqrt(sum(squares)) # Return the square root of the sum of squares\n\n# Test it\npoint1 = (1, 2) # The coordinates of the first point\npoint2 = (4, 6) # The coordinates of the second point\nprint(euclidean_distance(point1, point2)) # 5.0\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#actual-knn-algorithm","title":"Actual KNN Algorithm","text":"<pre><code>from collections import Counter\nimport numpy as np\n\ndef k_nearest_neighbors(data, query, k, distance_fn):\n\u00a0 \u00a0 neighbor_distances_and_indices = []\n\u00a0 \u00a0 # Compute distance from each training data point\n\u00a0 \u00a0 for idx, label in enumerate(data):\n\u00a0 \u00a0 \u00a0 \u00a0 distance = euclidean_distance(label[0], query)\n\u00a0 \u00a0 neighbor_distances_and_indices.append((distance, idx))\n\u00a0 \u00a0 # Sort array by distance\n\u00a0 \u00a0 sorted_neighbor_distances_and_indices = sorted(neighbor_distances_and_indices)\n\u00a0 \u00a0 # Select k closest data points\n\u00a0 \u00a0 k_nearest_distances_and_indices = sorted_neighbor_distances_and_indices[:k]\n\u00a0 \u00a0 # Obtain class labels for those k data points\n\u00a0 \u00a0 k_nearest_labels = [data[i][1] for distance, i in k_nearest_distances_and_indices]\n\u00a0 \u00a0 # Majority vote\n\u00a0 \u00a0 most_common = Counter(k_nearest_labels).most_common(1)\n\u00a0 \u00a0 return most_common[0][0] # Return the label of the class that receives the majority vote\n\ndef euclidean_distance(point1, point2):\n\u00a0 \u00a0 distance = sum((p - q) ** 2 for p, q in zip(point1, point2))\n\u00a0 \u00a0 return np.sqrt(distance)\n\u00a0 \u00a0 \ndef mannhattan_distance(point1, point2):\n\u00a0 \u00a0 return np.sum(np.abs(p - q) for p, q in zip(point1, point2))\n\ndata = [\n\u00a0 \u00a0 ((2, 3), 0),\n\u00a0 \u00a0 ((5, 4), 0),\n\u00a0 \u00a0 ((9, 6), 1),\n\u00a0 \u00a0 ((4, 7), 0),\n\u00a0 \u00a0 ((8, 1), 1),\n\u00a0 \u00a0 ((7, 2), 1)\n]\nquery = (7,6)\nk=2\n\nclass_label = k_nearest_neighbors(data, query, k, distance_fn)\nprint(class_label)\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#k-means-clustering","title":"K-means Clustering","text":"<p>Algorithms such as SVM, logistic regression, decision trees are more for the categorization, i.e. based on the known labelled samples, classifiers are training so that it could apply the same logic on unlabeled samples. Unlike the classification problems, clustering is directly categorize the samples without any previously known labelling. </p> <p>Classification belongs to supervised learning whereas clustering is a type of unsupervised learning algorithm. K-means clustering, as one type of the most basic and fundamental clustering algorithm, has the main idea of iteratively finding the way of cutting the space into K clusters, so that the loss function is the lowest. The loss function can be defined as the sum of squared error distance of each sample from their clustered centers: J(c,\\mu) = \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2 where x_i represents the samples, c_i represents the cluster that x_i belongs to, mu_{c_i} corresponds to the center of the cluster that x_i's located in and M is the total number of samples.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#k-means-clustering-algorithm-in-steps","title":"K-means clustering algorithm in steps","text":"<p>The goal of K-means clustering is to categorize the dataset of interest into K-clusters, and also provides the cluster center corresponding to each data points: 1. data engineering and cleaning: normalization and outlier removal. 2. randomly pick K-cluster centers, labelled as \\mu_1^{(0)}, \\mu_2^{(0)}, ..., \\mu_K^{(0)}  3. define the loss function to be J(c,\\mu) = \\min_{\\mu} \\min_{c} \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2  4. iterate through the process below by t times, where t denotes the number of iterations:     1. for every sample x_i, categorize it to the cluster that has shortest distance c_i^{(t)} \\leftarrow {\\arg\\min}_k ||x_i - \\mu_k^{(t)}||^2     2. for every cluster k, recalculate the center: \\mu_k^{(t+1)}\\leftarrow {\\arg\\min}_\\mu \\sum_{i:c_i^{(t)}=k} ||x_i - \\mu||^2 <pre><code># k-Means algorithm\ndef k_means(data, centers, k):\n    while True:\n        clusters = [[] for _ in range(k)] \n\n        # Assign data points to the closest center\n        for point in data:\n            distances = [distance(point, center) for center in centers]\n            index = distances.index(min(distances)) \n            clusters[index].append(point)\n\n        # Update centers to be the mean of points in a cluster\n        new_centers = []\n        for cluster in clusters:\n            center = (sum([point[0] for point in cluster])/len(cluster), \n                      sum([point[1] for point in cluster])/len(cluster)) \n            new_centers.append(center)\n\n        # Break loop if centers don't change significantly\n        if max([distance(new, old) for new, old in zip(new_centers, centers)]) &lt; 0.0001:\n            break\n        else:\n            centers = new_centers\n    return clusters, centers\n</code></pre></p> <ol> <li> <p>need to work on the definition of this and learn more about information theory\u00a0\u21a9</p> </li> <li> <p>Please read through the recommendation system based on matrix vectorization to get a better idea on how recommenders are built based on SVD and matrices\u00a0\u21a9</p> </li> </ol>"},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/","title":"Neural_Networks_and_Deep_Learning_Overview","text":""},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/#introduction","title":"Introduction","text":"<p>Neural networks approximate complex nonlinear functions by stacking layers of linear transformations and nonlinear activations. Backpropagation efficiently computes gradients for training, enabling deep learning breakthroughs.</p>"},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Introduction to Perceptron Algorithm</li> <li>Structure of a feed-forward neural network</li> <li>Activation functions: ReLU, softmax</li> <li>Backpropagation algorithm</li> <li>Implementing a simple NN from scratch (e.g., MNIST/XOR)</li> <li>Deriving gradient of softmax + cross-entropy</li> </ul>"},{"location":"neural_networks_and_deep_learning/neural_networks_sections/Introduction_to_Perceptron_Algorithm/","title":"Introduction_to_Perceptron_Algorithm","text":"<pre><code>import numpy as np\n\nclass Perceptron(object):\n\u00a0 \u00a0 def __init__(self, no_of_inputs, max_iterations=100, learning_rate=0.01):\n\u00a0 \u00a0 \u00a0 \u00a0 self.weights = np.zeros(no_of_inputs + 1)\n\u00a0 \u00a0 \u00a0 \u00a0 self.max_iterations = max_iterations\n\u00a0 \u00a0 \u00a0 \u00a0 self.learning_rate = learning_rate\n\n\u00a0 \u00a0 def predict(self, inputs):\n\u00a0 \u00a0 \u00a0 \u00a0 summation = np.dot(inputs, self.weights[1:]) + self.weights[0]\n\u00a0 \u00a0 \u00a0 \u00a0 if summation &gt; 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 activation = 1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 activation = 0\n\u00a0 \u00a0 \u00a0 \u00a0 return activation\n\n\u00a0 \u00a0 def train(self, training_inputs, labels):\n\u00a0 \u00a0 \u00a0 \u00a0 for _ in range(self.max_iterations):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for inputs, label in zip(training_inputs, labels):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prediction = self.predict(inputs)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.weights[1:] += self.learning_rate * (label - prediction) * inputs\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.weights[0] += self.learning_rate * (label - prediction)\n\n# AND dataset\ntraining_inputs = [\n\u00a0 \u00a0 np.array([0, 0]),\n\u00a0 \u00a0 np.array([0, 1]),\n\u00a0 \u00a0 np.array([1, 0]),\n\u00a0 \u00a0 np.array([1, 1])\n]\nlabels = np.array([0, 0, 0, 1])\nperceptron = Perceptron(2)\nperceptron.train(training_inputs, labels)\n\ninputs = np.array([1, 1]) \u00a0# Expected: 1\nprint(perceptron.predict(inputs))\n</code></pre>"},{"location":"probability_and_markov/Probability_and_Markov_Overview/","title":"Week1_Probability_and_Markov","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#title-probability-markov","title":"title: Probability &amp; Markov","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#probability-foundations-markov-assumption","title":"Probability Foundations &amp; Markov Assumption","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#introduction","title":"Introduction","text":"<p>Probability theory provides the core mathematical language for reasoning under uncertainty, while the Markov assumption simplifies sequential dependencies\u00e2\u20ac\u201dboth are fundamental for modern NLP and language modeling.</p> <p>Through this module you will refresh key probability concepts and see how the Markov assumption enables tractable modeling of text sequences.</p>"},{"location":"probability_and_markov/Probability_and_Markov_Overview/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Conditional Probability &amp; Bayes' Rule</li> <li>Naive Bayes</li> <li>Joint &amp; Marginal</li> <li>ML Fundamentals</li> <li>Markov Assumption: definition &amp; role in NLP</li> </ul>"},{"location":"probability_and_markov/probability_and_markov_sections/","title":"Index","text":"<p># Week 1 Overview</p> <p>Short overview of Probability \\&amp; Markov topics.</p> <p>- [[Week1P1-conditional_probability_and_bayes_rule|Bayes\u2019 Rule]]</p> <p>- [[Week1P2-naive_bayes_and_gaussian_naive_bayes|Naive Bayes]]</p> <p>- [[Week1P3-joint_and_marginal_distributions|Joint \\&amp; Marginal]]</p>"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/","title":"Week1P1 - Conditional Probability & Bayes\u0393\u00c7\u00d6 Rule","text":""},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/#title-conditional-probability-bayes-rule","title":"title: Conditional Probability &amp; Bayes Rule","text":"<p>Resources - StatQuest: Conditional Probability (YouTube) - StatQuest: Bayes' Rule - 3Blue1Brown: Bayes theorem, the geometry of changing beliefs</p> <p></p> Loves Candy Does not Love Candy Row Total Loves Soda 2p=\\frac{2}{14} 5p=\\frac{5}{14} 2+5=7p=\\frac{7}{14} Does not Loves Soda 4p=\\frac{4}{14} 3p=\\frac{3}{14} 4+3=7p=\\frac{7}{14} Column total 2+4=6p=\\frac{6}{14} 5+3=8p=\\frac{8}{14} ##### Probabilities p(\\text{loves candy and soda}) =\\frac{2}{14}=0.14 p(\\text{does not love candy but love soda}) =\\frac{5}{14}=0.36 ##### Conditional probabilities - probability of someone loving candy and soda given that we know they love soda: p(\\text{loves candy and soda}\\vert\\text{loves soda}) =\\frac{2}{2+5}=0.29 - probability of someone does not love candy, given that we know they love soda: p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{5}{2+5}=0.71 Dividing the numerator and denominator by the total number of people 14, the equation above becomes: p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{\\frac{5}{14}}{\\frac{2+5}{14}}=\\frac{p(\\text{does not love candy but love soda})}{p(\\text{loves soda})}=0.71 To generalize: p(\\text{something will happen}\\vert\\text{we know})=\\frac{p(\\text{something will happen})}{p(\\text{we know})} <p>So the conditional probability is the probability that something will happen scaled by whatever knowledge we already have about the event</p>"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/#bayesatm-theorem","title":"Bayes\u00e2\u20ac\u2122 Theorem","text":"p(\\text{something will happen}\\vert\\text{we know})=\\frac{p(\\text{something will happen})}{p(\\text{we know})} <p>Taking the conditional probabilities from the section above, we can calculate: - probability of someone does not love candy, given that we know they love soda: p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{5}{2+5}=0.71 - probability of someone does not love candy but love soda, given that we know they does not love candy: p(\\text{does not love candy but love soda}\\vert\\text{does not love candy}) =\\frac{5}{5+3}=0.63 In both cases above, we want to know the probability of the same event, meeting someone who does not love candy but loves soda. This means that the numerators are the same in both cases. However since we have different prior knowledge in each case, we scale the probabilities of the events differently. So ultimately we get different probabilities.</p> <p>Now, what if we do not know the probability of someone does not love candy but love soda, which is the numerator in the cases above, we can still multiply both sides of the top equation by p(\\text{loves soda}) from the equation: p(\\text{does not love candy but love soda})\\ = p(\\text{does not love candy but love soda}\\vert\\text{loves soda})p(\\text{loves soda}) So overall, what we have is: \\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{love s})p(\\text{love s})}{p(\\text{love s})}=\\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{no love c})p(\\text{no love c})}{p(\\text{love s})} leading to: p(\\text{no love c \\&amp; love s}\\vert\\text{love s})=\\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{no love c})p(\\text{no love c})}{p(\\text{love s})}</p> <p>In general, the Bayes' theorem can be represented by event A and B in the following form: p(\\text{A\\&amp;B}\\vert\\text{B})=\\frac{p(\\text{A\\&amp;B}\\vert\\text{A})\\times p(\\text{A})}{p(\\text{B})} Or in the other way around: p(\\text{A\\&amp;B}\\vert\\text{A})=\\frac{p(\\text{A\\&amp;B}\\vert\\text{B})\\times p(\\text{B})}{p(\\text{A})} the conditional probability given that we know one thing about an event can be derived from knowing the other thing about the event.</p> <p>Bayes' Theorem is the basis for Bayesian Statistics, which is this equation, paired with a broader philosophy of how statistics should be calculated.</p>"},{"location":"probability_and_markov/probability_and_markov_sections/naive_bayes_and_gaussian_naive_bayes/","title":"Naive Bayes & Gaussian Naive Bayes","text":"<p>Resources - StatQuest: Conditional Probability (YouTube) - StatQuest: Bayes' Rule - 3Blue1Brown: Bayes theorem, the geometry of changing beliefs</p>"},{"location":"probability_and_markov/probability_and_markov_sections/naive_bayes_and_gaussian_naive_bayes/#implementing-naive-bayes-classifier-from-scratch-in-python","title":"Implementing Naive Bayes Classifier from Scratch in Python","text":"<p>We approach the implementation of the Naive Bayes Classifier by first calculating the prior probabilities of each class, and then the likelihood of each feature given a class.</p> <pre><code>import pandas as pd\n\ndef calculate_prior_probabilities(y):\n    # Calculate prior probabilities for each class\n    return y.value_counts(normalize=True)\n\ndef calculate_likelihoods(X, y, smoothing = False):\n    likelihoods = {}\n    for column in X.columns:\n        likelihoods[column] = {}\n        for class_ in y.unique():\n            # Filter feature column data for each class\n            class_data = X[y == class_][column]\n            counts = class_data.value_counts()\n            if not smoothing:\n                total_count = len(class_data)  # Total count of instances for current class\n                likelihoods[column][class_] = counts / total_count  # Direct likelihoods without smoothing\n            else:\n                total_count = len(class_data) + len(X[column].unique()) # total count with smoothing \n                likelihoods[column][class_] = (counts + 1) / total_count # add-1 smoothing\n    return likelihoods\n</code></pre> <p>Armed with these utility functions, we can implement the Naive Bayes Classifier function:</p> <pre><code>def naive_bayes_classifier(X_test, priors, likelihoods):\n    predictions = []\n    for _, data_point in X_test.iterrows():\n        class_probabilities = {}\n        for class_ in priors.index:\n            class_probabilities[class_] = priors[class_]\n            for feature in X_test.columns:\n                # Use .get to safely retrieve probability and get a default of 1/total to handle unseen values\n                feature_probs = likelihoods[feature][class_]\n                class_probabilities[class_] *= feature_probs.get(data_point[feature], 1 / (len(feature_probs) + 1))\n\n        # Predict class with maximum posterior probability\n        predictions.append(max(class_probabilities, key=class_probabilities.get))\n\n    return predictions\n</code></pre>"}]}