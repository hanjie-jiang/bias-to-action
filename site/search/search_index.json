{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Machine Learning Notes <p>Curated notes on probability, foundations, and neural networks.</p> <p> ML Fundamentals ML Fundamentals <ul> <li>Overview</li> <li>Feature Engineering</li> <li>Model Evaluation</li> <li>Regularization</li> <li>Classical Algorithms</li> <li>Unsupervised Learning</li> </ul> Probability &amp; Markov Probability &amp; Markov <ul> <li>Overview</li> <li>Bayes' Rule</li> <li>Naive Bayes</li> <li>Joint &amp; Marginal</li> </ul> Engineering &amp; Data Structure Engineering &amp; Data Structure <ul> <li>Frequently Used</li> </ul> Language Model Language Models <ul> <li>N-gram Language Modeling</li> </ul> </p> Engineering &amp; Data Structure <p>Dictionary operations, sorting, and common data structure patterns.</p> Information Theory <p>Entropy, cross-entropy and KL divergence.</p> Neural Networks <p>Backpropagation, activations, training tips.</p> Linear Algebra <p>Vectors, matrices, SVD and more.</p>"},{"location":"Foundational%20knowledge%20plan/","title":"Foundational knowledge plan","text":""},{"location":"Foundational%20knowledge%20plan/#week-0-overview-of-ml-fundamentals","title":"Week 0: Overview of ML Fundamentals","text":"<p>The ML fundamentals section introduces model evaluation, classical algorithms and more, which becomes the building blocks of the topics in the weeks following. </p>"},{"location":"Foundational%20knowledge%20plan/#week-1-2-probability-foundations-markov-assumption","title":"Week 1-2: Probability Foundations + Markov Assumption","text":"<ul> <li>Probability_and_Markov_Overview</li> <li>Topics:<ul> <li>conditional_probability_and_bayes_rule</li> <li>naive_bayes_and_gaussian_naive_bayes</li> <li>joint_and_marginal_distributions</li> <li>Markov Assumption: what it is and why it matters in NLP</li> </ul> </li> <li>Resources:<ul> <li>StatQuest: Conditional Probability (YouTube)</li> <li>StatQuest: Bayes' Rule</li> <li>3Blue1Brown: Bayes theorem, the geometry of changing beliefs</li> <li>StatQuest: Naive Bayes</li> <li>StatQuest: Gaussian Naive Bayes</li> <li>Khan Academy - Probability &amp; Statistics</li> <li>Speech and Language Processing by Jurafsky &amp; Martin Ch. 3 (Markov models)</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-3-n-gram-models-language-modeling","title":"Week 3: N-gram Models &amp; Language Modeling","text":"<ul> <li>Ngram_Language_Modeling</li> <li>Topics:<ul> <li>What is an n-gram?</li> <li>How n-gram language models work</li> <li>Perplexity and limitations of n-gram models</li> </ul> </li> <li>Activities:<ul> <li>Implement a bigram/trigram model on a toy corpus</li> </ul> </li> <li>Resources:<ul> <li>The Illustrated Transformer - start with n-gram part</li> <li>Happy-LLM intro chapter</li> <li>Optional: n-gram language model notebook</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-4-intro-to-information-theory","title":"Week 4: Intro to Information Theory","text":"<ul> <li> <p>Information_Theory</p> </li> <li> <p>Topics:</p> <ul> <li>Entropy, Cross-Entropy, KL Divergence</li> <li>Why they matter in language modeling</li> </ul> </li> <li>Activities:<ul> <li>Manually compute entropy of a simple probability distribution</li> <li>Implement cross-entropy loss</li> </ul> </li> <li>Resources:<ul> <li>3Blue1Brown \u00e2\u20ac\u201c But what is entropy?</li> <li>Stanford CS224n Lecture 1</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-5-6-linear-algebra-for-ml","title":"Week 5-6: Linear Algebra for ML","text":"<ul> <li>Linear_Algebra_for_ML</li> <li>Topics:<ul> <li>Vectors, Matrices, Matrix Multiplication</li> <li>Dot product, norms, projections </li> <li>Eigenvalues &amp; Singular Value Decomposition (SVD)  </li> </ul> </li> <li>Activities:<ul> <li>Practice via small matrix coding problems (NumPy or PyTorch)</li> </ul> </li> <li>Resources:<ul> <li>3Blue1Brown: Essence of Linear Algebra </li> <li>Stanford CS229 Linear Algebra Review</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-7-calculus-gradient-descent","title":"Week 7: Calculus + Gradient Descent","text":"<ul> <li>Calculus_and_Gradient_Descent</li> <li>Topics:<ul> <li>Partial Derivatives    </li> <li>Chain Rule    </li> <li>Gradients and optimization intuition    </li> </ul> </li> <li>Activities:<ul> <li>Derive gradients of simple functions    </li> <li>Visualize gradient descent in 2D    </li> </ul> </li> <li>Resources:<ul> <li>Khan Academy Calculus (focus on multivariable sections)    </li> <li>Gradient Descent Visualization (YouTube) </li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-8-9-neural-networks-backpropagation","title":"Week 8-9: Neural Networks &amp; Backpropagation","text":"<ul> <li>Neural_Networks_and_Deep_Learning_Overview</li> <li>Topics:<ul> <li>Introduction to Perceptron Algorithm</li> <li>Structure of a feedforward neural network</li> <li>Activation functions (ReLU, softmax)</li> <li>Backpropagation algorithm</li> </ul> </li> <li>Activities:<ul> <li>Implement a simple NN from scratch (e.g., on MNIST or XOR)</li> <li>Derive gradient of softmax + cross-entropy</li> </ul> </li> <li>Resources:<ul> <li>Michael Nielsen\u00e2\u20ac\u2122s NN book: http://neuralnetworksanddeeplearning.com/</li> <li>CS231n lecture on backprop</li> </ul> </li> </ul>"},{"location":"Foundational%20knowledge%20plan/#week-10-integration-and-project","title":"Week 10: Integration and Project","text":"<ul> <li>Integration_and_Project</li> <li>Goal:<ul> <li>Build a mini-project combining n-gram + neural net ideas</li> <li>Example: Predict the next word using both n-gram and a small MLP</li> </ul> </li> <li>Outcome:<ul> <li>Review all learned concepts</li> <li>Prepare to transition to Happy-LLM\u00e2\u20ac\u2122s transformer section</li> </ul> </li> </ul>"},{"location":"Information_Theory/","title":"Information_Theory","text":""},{"location":"Information_Theory/#title-introduction-to-information-theory","title":"title: Introduction to Information Theory","text":""},{"location":"Information_Theory/#introduction","title":"Introduction","text":"<p>Information theory quantifies uncertainty and information content. Concepts such as entropy and cross-entropy are deeply entwined with language modeling and loss functions used to train neural networks.</p>"},{"location":"Information_Theory/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Entropy</li> <li>Cross-Entropy</li> <li>Kullback-Leibler (KL) Divergence</li> <li>Why information theory matters for language modeling</li> <li>Manual entropy calculation exercise</li> <li>Implementing cross-entropy loss</li> </ul>"},{"location":"Integration_and_Project/","title":"Integration_and_Project","text":""},{"location":"Integration_and_Project/#title-integration-mini-project","title":"title: Integration &amp; Mini-Project","text":""},{"location":"Integration_and_Project/#introduction","title":"Introduction","text":"<p>The capstone week integrates probabilistic and neural methods. You will build a hybrid language predictor that combines an n-gram baseline with a small neural network, reinforcing all concepts learned so far.</p>"},{"location":"Integration_and_Project/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Designing a hybrid n-gram + neural model</li> <li>Predicting the next word with combined methods</li> <li>Review of all learned concepts</li> <li>Transition plan to transformer architectures</li> </ul>"},{"location":"calculus_and_linear_algebra/Calculus_and_Gradient_Descent/","title":"Week7_Calculus_and_Gradient_Descent","text":""},{"location":"calculus_and_linear_algebra/Calculus_and_Gradient_Descent/#title-calculus-gradient-descent","title":"title: Calculus &amp; Gradient Descent","text":""},{"location":"calculus_and_linear_algebra/Calculus_and_Gradient_Descent/#introduction","title":"Introduction","text":"<p>Calculus provides the machinery to compute derivatives, which are essential for optimizing neural networks. Understanding gradients and how gradient descent navigates a loss landscape is critical for debugging and improving models.</p>"},{"location":"calculus_and_linear_algebra/Calculus_and_Gradient_Descent/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Partial derivatives</li> <li>Chain rule</li> <li>Gradients as slopes in high dimensions</li> <li>Gradient descent algorithm &amp; intuition</li> <li>Visualization of gradient descent in 2D</li> </ul>"},{"location":"calculus_and_linear_algebra/Linear_Algebra_for_ML/","title":"Linear_Algebra_for_ML","text":""},{"location":"calculus_and_linear_algebra/Linear_Algebra_for_ML/#title-linear-algebra-for-machine-learning","title":"title: Linear Algebra for Machine Learning","text":""},{"location":"calculus_and_linear_algebra/Linear_Algebra_for_ML/#introduction","title":"Introduction","text":"<p>Linear algebra is the backbone of all modern machine-learning frameworks. Vectors and matrices represent data and parameters, while operations such as matrix multiplication power everything from linear regression to transformers.</p>"},{"location":"calculus_and_linear_algebra/Linear_Algebra_for_ML/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Vectors &amp; vector operations</li> <li>Matrices &amp; matrix multiplication</li> <li>Dot product, norms, and projections</li> <li>Eigenvalues &amp; eigenvectors</li> <li>Singular Value Decomposition (SVD)</li> <li>Practical coding exercises with NumPy/PyTorch</li> </ul>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/","title":"Engineering_and_Data_Structure_Questions","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#dictionary-sets","title":"Dictionary &amp; Sets","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#python-sets","title":"Python Sets","text":"<p>A set in Python is an unordered collection of unique objects, ensuring the absence of duplicate values. Furthermore, it allows us to perform several operations on such collections, such as intersection (identifying common elements), union (combining all unique elements), and difference (detecting unique items in a set).</p>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#array-intersection","title":"array intersection","text":"<p><pre><code>def array_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 &amp; set2\n    return sorted(list(intersection))\n</code></pre> \u00a0 \u00a0The set operations run at a time complexity of\u00a0O(n), but the sorting step has a time complexity of\u00a0O(nlog\u2061n). Therefore, the overall time complexity of the solution is\u00a0O(nlog\u2061n), dominated by the sorting step.</p>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#non-repeating-elements","title":"non-repeating elements","text":"<pre><code>seen, repeated = set(), set()\nfor num in nums:\n    if num in seen:\n        repeated.add(num)\n    else: \n        seen.add(num)\nreturn list(seen - repeated)\n</code></pre> <p>This approach results again in a time complexity of\u00a0O(n) and a memory complexity of O(n)\u00a0due to the constant time operations provided by the Python\u00a0<code>set</code>.</p>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#unique-elements","title":"unique elements","text":"<pre><code>def unique_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    unique_to_1 = sorted(list(set1 - set2))\n    unique_to_2 = sorted(list(set2 - set1))\n    return (unique_to_1, unique_to_2)\n</code></pre> <p>This solution is considerably more efficient than the naive approach, operating at a time complexity of\u00a0O(n), or\u00a0O(max\u2061(len(list1),len(list2)))\u00a0to be more precise.</p>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#unique-string-in-list","title":"unique string in list","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#using-2-sets","title":"using 2 sets","text":"<pre><code>def find_unique_string(words):\n    seen = set()\n    duplicates = set()\n    for word in words:\n        if word in seen:\n            duplicates.add(word)\n        seen.add(word)\n    for word in words:\n        if word not in duplicates:\n            return word\nreturn \"\"\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#using-dictionary","title":"using dictionary","text":"<pre><code>def find_unique_string(words):\n\u00a0 \u00a0 count_dict = {}\n\u00a0 \u00a0 for word in words:\n\u00a0 \u00a0 \u00a0 \u00a0 if word in count_dict:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count_dict[word] = count_dict[word] + 1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 count_dict[word] = 1\n\u00a0 \u00a0 for word in words:\n\u00a0 \u00a0 \u00a0 \u00a0 if count_dict[word] == 1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return word\n\u00a0 \u00a0 return \"\"\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#anagram-pairs-in-two-lists-medium","title":"Anagram Pairs in Two Lists (<code>medium</code>)","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#using-tuples-sets","title":"using tuples &amp; sets","text":"<pre><code>def anagram(list_1, list_2):\n    # convert every word from both lists to a sorted tuple of its characters to have a unified form for all anagram words\n    sorted_tuples_1 = set(tuple(sorted(word)) for word in list_1)\n    sorted_tuples_2 = set(tuple(sorted(word)) for word in list_2)\n\n    # \u00a0find the common tuples between the two\n    common_tuples = sorted_tuples_1 &amp; sorted_tuples_2\n\n    # iterate over the words in the original lists to filter for the words that are anagram\n    list_1_output = [word for word in list_1 if tuple(sorted(word)) in common_tuples] # contains anagrams from the first list\n    list_2_output = [word for word in list_2 if tuple(sorted(word)) in common_tuples] # contains anagrams from the second list\n\n    # check for the words pairs in the filtered list\n    output = []\n    for word1 in list_1_output:\n        for word2 in list_2_output:\n            # traversing every pair of words in filtered lists\n            if tuple(sorted(word1)) == tuple(sorted(word2)):\n                # If words in the pair are anagrams, add them to the output list\n                output.append((word1, word2))\n    return output\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#use-of-dictionary","title":"use of dictionary","text":"<pre><code>from collections import defaultdict\n\n# Create mapping for `list_1`\nmapping_1 = defaultdict(list)\n# mapping_1 stores (sorted anagram) -&gt; list[anagrams] mapping for `list_1`\nfor word in list_1:\n    sorted_tuple = tuple(sorted(word)) # unique identifier of the anagram\n    mapping_1[sorted_tuple].append(word)\n    # `mapping_1[sorted_tuple]` stores all anagrams under the same identifier for `list_1`\n\n# Create mapping for `list_2`\nmapping_2 = defaultdict(list)\n# mapping_2 stores (sorted anagram) -&gt; list[anagrams] mapping for `list_2`\nfor word in list_2:\n    sorted_tuple = tuple(sorted(word)) # unique identifier of the anagram\n    mapping_2[sorted_tuple].append(word)\n    # `mapping_2[sorted_tuple]` stores all anagrams under the same identifier for `list_2`\n\n# Intersect keys from mapping_1 and mapping_2 to get common sorted tuples\n# Every element in `common_tuples` is an anagram identifier that exists in both lists\ncommon_tuples = set(mapping_1.keys()) &amp; set(mapping_2.keys())\n\noutput = []\nfor anagram_tuple in common_tuples:\n    for word1 in mapping_1[anagram_tuple]:\n        for word2 in mapping_2[anagram_tuple]:\n            # Both word1 and word2 have the same anagram identifier, so are anagrams\n            output.append((word1, word2))\n\nreturn output\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#exercises","title":"Exercises","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#codesignal-mastering-python-sets-intersection-non-repeating-elements-and-unique-elements","title":"CodeSignal Mastering Python Sets: Intersection, Non-Repeating Elements, and Unique Elements","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-ignoring-capital-vs-lower-cases-in-python","title":"How to ignoring capital vs lower cases in python","text":"<pre><code>\u00a0 \u00a0 inventory1 = [string.upper() for string in inventory1] # .lower() for lower \n\u00a0 \u00a0 inventory2 = [string.upper() for string in inventory2] # .lower() for lower \n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#leetcode-1056-confusing-number","title":"Leetcode 1056: Confusing Number","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-initiate-a-set-and-how-to-add-elements-to-set","title":"How to initiate a set and how to add elements to set","text":"<pre><code>set_sample = set()\nset_sample.add(1)\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-convert-a-string-of-digits-in-dictionary-to-a-number","title":"How to convert a string of digits in dictionary to a number","text":"<pre><code>int(\"\".join([value for _, value in dictionary.items()]))\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#how-to-sort-a-dictionary-in-python","title":"How to sort a dictionary in python","text":""},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#based-on-key","title":"based on key","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_key = dict(sorted(my_dict.items()))  \nprint(sorted_by_key)  \n# Output: {'apple': 3, 'banana': 2, 'orange': 1}\n</code></pre>"},{"location":"engineering_and_data_structure/Engineering_and_Data_Structure_Questions/#based-on-value","title":"based on value","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_value = dict(sorted(my_dict.items(), key=lambda item: item[1]))  \nprint(sorted_by_value)  \n# Output: {'orange': 1, 'banana': 2, 'apple': 3}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/","title":"Python Dictionaries Overview","text":"<p>Python dictionaries are mutable, unordered collections of key-value pairs. They provide fast O(1) average time complexity for lookups, insertions, and deletions.</p>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Key-Value Pairs: Each element is a key-value pair</li> <li>Unordered: Elements are not stored in any specific order (Python 3.7+ maintains insertion order)</li> <li>Mutable: Can add, modify, or remove key-value pairs</li> <li>Hashable Keys: Keys must be hashable (immutable)</li> <li>Unique Keys: No duplicate keys allowed</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#basic-operations","title":"Basic Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#creating-dictionaries","title":"Creating Dictionaries","text":"<pre><code># Empty dictionary\nempty_dict = {}\n\n# Dictionary with initial values\nperson = {'name': 'John', 'age': 30, 'city': 'New York'}\n\n# Using dict() constructor\nnumbers = dict(one=1, two=2, three=3)\n\n# From list of tuples\npairs = [('a', 1), ('b', 2), ('c', 3)]\ndict_from_pairs = dict(pairs)\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#accessing-and-modifying","title":"Accessing and Modifying","text":"<pre><code>person = {'name': 'John', 'age': 30}\n\n# Accessing values\nname = person['name']  # Raises KeyError if key doesn't exist\nage = person.get('age', 0)  # Returns default value if key doesn't exist\n\n# Adding/Modifying\nperson['city'] = 'New York'  # Add new key-value pair\nperson['age'] = 31  # Modify existing value\n\n# Removing\ndel person['age']  # Raises KeyError if key doesn't exist\ncity = person.pop('city', 'Unknown')  # Returns default if key doesn't exist\nperson.clear()  # Remove all items\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#common-methods","title":"Common Methods","text":"<pre><code>person = {'name': 'John', 'age': 30, 'city': 'New York'}\n\n# Keys, values, and items\nkeys = person.keys()  # dict_keys(['name', 'age', 'city'])\nvalues = person.values()  # dict_values(['John', 30, 'New York'])\nitems = person.items()  # dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n\n# Membership testing\n'name' in person  # True\n'phone' not in person  # True\n\n# Length\nlen(person)  # 3\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#dictionary-operations","title":"Dictionary Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#merging-dictionaries","title":"Merging Dictionaries","text":"<pre><code>dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\n# Using update() method\ndict1.update(dict2)  # Modifies dict1 in-place\n\n# Using | operator (Python 3.9+)\nmerged = dict1 | dict2  # Creates new dictionary\n\n# Using ** unpacking\nmerged = {**dict1, **dict2}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#dictionary-comprehension","title":"Dictionary Comprehension","text":"<pre><code># Create dictionary from list\nnumbers = [1, 2, 3, 4, 5]\nsquares = {x: x**2 for x in numbers}\n\n# Filter dictionary\nperson = {'name': 'John', 'age': 30, 'city': 'New York', 'phone': '123-456'}\nfiltered = {k: v for k, v in person.items() if isinstance(v, str)}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#time-complexity","title":"Time Complexity","text":"<ul> <li>Access: O(1) average case</li> <li>Insert/Update: O(1) average case</li> <li>Delete: O(1) average case</li> <li>Search: O(1) average case</li> <li>Iteration: O(n)</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Caching/Memoization: Store computed results</li> <li>Counting: Track frequency of elements</li> <li>Grouping: Organize data by categories</li> <li>Configuration: Store settings and parameters</li> <li>JSON-like Data: Represent structured data</li> </ol>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionaries_Overview/#related-topics","title":"Related Topics","text":"<ul> <li>Dictionary Operations - Detailed dictionary methods and techniques</li> <li>Array Intersection - Using dictionaries for counting</li> <li>Anagram Pairs - Dictionary-based anagram detection</li> <li>Unique Strings - Dictionary-based string problems</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/","title":"Dictionary Operations","text":"<p>Detailed dictionary operations and methods in Python.</p>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#basic-dictionary-methods","title":"Basic Dictionary Methods","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#creating-and-modifying","title":"Creating and Modifying","text":"<pre><code># Create dictionary\nmy_dict = {}\n\n# Add/Update items\nmy_dict['key'] = 'value'\nmy_dict.update({'key2': 'value2', 'key3': 'value3'})\n\n# Get value with default\nvalue = my_dict.get('key', 'default_value')\n\n# Remove items\ndel my_dict['key']  # Raises KeyError if key doesn't exist\nvalue = my_dict.pop('key', 'default')  # Returns default if key doesn't exist\nmy_dict.clear()  # Remove all items\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#accessing-dictionary-data","title":"Accessing Dictionary Data","text":"<pre><code>person = {'name': 'John', 'age': 30, 'city': 'New York'}\n\n# Get keys, values, and items\nkeys = person.keys()      # dict_keys(['name', 'age', 'city'])\nvalues = person.values()  # dict_values(['John', 30, 'New York'])\nitems = person.items()    # dict_items([('name', 'John'), ('age', 30), ('city', 'New York')])\n\n# Iterate through dictionary\nfor key in person:\n    print(key, person[key])\n\nfor key, value in person.items():\n    print(key, value)\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#advanced-dictionary-operations","title":"Advanced Dictionary Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#dictionary-comprehension","title":"Dictionary Comprehension","text":"<pre><code># Create dictionary from list\nnumbers = [1, 2, 3, 4, 5]\nsquares = {x: x**2 for x in numbers}  # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Filter dictionary\nperson = {'name': 'John', 'age': 30, 'city': 'New York', 'phone': '123-456'}\nstring_values = {k: v for k, v in person.items() if isinstance(v, str)}\n\n# Conditional comprehension\ngrades = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}\npassed = {name: grade for name, grade in grades.items() if grade &gt;= 80}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#merging-dictionaries","title":"Merging Dictionaries","text":"<pre><code>dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\n# Using update() method (modifies dict1)\ndict1.update(dict2)\n\n# Using | operator (Python 3.9+)\nmerged = dict1 | dict2\n\n# Using ** unpacking\nmerged = {**dict1, **dict2}\n\n# Using dict() constructor\nmerged = dict(dict1, **dict2)\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#nested-dictionaries","title":"Nested Dictionaries","text":"<pre><code># Create nested dictionary\nstudents = {\n    'Alice': {'age': 20, 'grade': 'A', 'courses': ['Math', 'Physics']},\n    'Bob': {'age': 22, 'grade': 'B', 'courses': ['Chemistry', 'Biology']}\n}\n\n# Access nested values\nalice_age = students['Alice']['age']\nalice_courses = students['Alice']['courses']\n\n# Modify nested values\nstudents['Alice']['grade'] = 'A+'\nstudents['Bob']['courses'].append('Math')\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#dictionary-methods","title":"Dictionary Methods","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#default-values","title":"Default Values","text":"<pre><code>from collections import defaultdict\n\n# Default dictionary with list\ndd = defaultdict(list)\ndd['fruits'].append('apple')\ndd['fruits'].append('banana')\ndd['vegetables'].append('carrot')\n\n# Default dictionary with int (for counting)\nword_count = defaultdict(int)\nfor word in ['apple', 'banana', 'apple', 'cherry']:\n    word_count[word] += 1\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#counter","title":"Counter","text":"<pre><code>from collections import Counter\n\n# Count occurrences\nwords = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\nword_counts = Counter(words)\nprint(word_counts)  # Counter({'apple': 3, 'banana': 2, 'cherry': 1})\n\n# Most common elements\nmost_common = word_counts.most_common(2)  # [('apple', 3), ('banana', 2)]\n\n# Arithmetic operations\ncounter1 = Counter(['a', 'b', 'c', 'a'])\ncounter2 = Counter(['a', 'b', 'd'])\ncombined = counter1 + counter2  # Counter({'a': 3, 'b': 2, 'c': 1, 'd': 1})\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#performance-considerations","title":"Performance Considerations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#time-complexity","title":"Time Complexity","text":"Operation Average Case Worst Case Access O(1) O(n) Insert/Update O(1) O(n) Delete O(1) O(n) Search O(1) O(n) Iteration O(n) O(n)"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#memory-usage","title":"Memory Usage","text":"<ul> <li>Dictionaries use more memory than lists due to hash table overhead</li> <li>Trade-off: memory for speed</li> <li>Use dictionaries when you need fast key-based lookups</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#common-patterns","title":"Common Patterns","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#grouping-data","title":"Grouping Data","text":"<pre><code># Group students by grade\nstudents = [\n    {'name': 'Alice', 'grade': 'A'},\n    {'name': 'Bob', 'grade': 'B'},\n    {'name': 'Charlie', 'grade': 'A'},\n    {'name': 'David', 'grade': 'C'}\n]\n\ngrouped = {}\nfor student in students:\n    grade = student['grade']\n    if grade not in grouped:\n        grouped[grade] = []\n    grouped[grade].append(student['name'])\n\n# Result: {'A': ['Alice', 'Charlie'], 'B': ['Bob'], 'C': ['David']}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#cachingmemoization","title":"Caching/Memoization","text":"<pre><code># Simple memoization decorator\ndef memoize(func):\n    cache = {}\n\n    def wrapper(*args):\n        if args not in cache:\n            cache[args] = func(*args)\n        return cache[args]\n\n    return wrapper\n\n@memoize\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#configuration-management","title":"Configuration Management","text":"<pre><code># Default configuration with overrides\ndefault_config = {\n    'host': 'localhost',\n    'port': 8080,\n    'debug': False,\n    'timeout': 30\n}\n\nuser_config = {\n    'host': '192.168.1.100',\n    'debug': True\n}\n\n# Merge configurations\nconfig = default_config.copy()\nconfig.update(user_config)\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>.get()</code> for safe access: Avoid KeyError exceptions</li> <li>Use dictionary comprehension: More readable than loops</li> <li>Use <code>defaultdict</code> for counting/grouping: Avoid checking if key exists</li> <li>Use <code>Counter</code> for frequency counting: Built-in functionality</li> <li>Consider memory usage: Dictionaries use more memory than lists</li> <li>Use appropriate data structures: Lists for order, sets for uniqueness, dicts for key-value pairs</li> </ol>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Dictionaries/Dictionary_Operations/#related-topics","title":"Related Topics","text":"<ul> <li>Dictionaries Overview - Basic dictionary concepts and characteristics</li> <li>Array Intersection - Using dictionaries for counting</li> <li>Anagram Pairs - Dictionary-based anagram detection</li> <li>Unique Strings - Dictionary-based string problems</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/","title":"Set Operations","text":"<p>Detailed set operations and methods in Python.</p>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#basic-set-methods","title":"Basic Set Methods","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#adding-elements","title":"Adding Elements","text":"<pre><code>my_set = set()\nmy_set.add(1)           # Add single element\nmy_set.update([2, 3, 4]) # Add multiple elements from iterable\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#removing-elements","title":"Removing Elements","text":"<pre><code>my_set = {1, 2, 3, 4, 5}\nmy_set.remove(3)        # Raises KeyError if element doesn't exist\nmy_set.discard(6)       # No error if element doesn't exist\npopped = my_set.pop()   # Remove and return arbitrary element\nmy_set.clear()          # Remove all elements\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#mathematical-operations","title":"Mathematical Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#union","title":"Union","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\n\n# Using | operator\nunion = set1 | set2  # {1, 2, 3, 4, 5}\n\n# Using union() method\nunion = set1.union(set2)  # {1, 2, 3, 4, 5}\n\n# Union with multiple sets\nunion = set1.union(set2, {6, 7})  # {1, 2, 3, 4, 5, 6, 7}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#intersection","title":"Intersection","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Using &amp; operator\nintersection = set1 &amp; set2  # {3, 4}\n\n# Using intersection() method\nintersection = set1.intersection(set2)  # {3, 4}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#difference","title":"Difference","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Using - operator\ndifference = set1 - set2  # {1, 2}\n\n# Using difference() method\ndifference = set1.difference(set2)  # {1, 2}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#symmetric-difference","title":"Symmetric Difference","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Using ^ operator\nsymmetric_diff = set1 ^ set2  # {1, 2, 5, 6}\n\n# Using symmetric_difference() method\nsymmetric_diff = set1.symmetric_difference(set2)  # {1, 2, 5, 6}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#set-comparison-methods","title":"Set Comparison Methods","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#subset-and-superset","title":"Subset and Superset","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\n\n# Check if set1 is subset of set2\nis_subset = set1.issubset(set2)  # True\nis_subset = set1 &lt;= set2         # True\n\n# Check if set2 is superset of set1\nis_superset = set2.issuperset(set1)  # True\nis_superset = set2 &gt;= set1           # True\n\n# Proper subset/superset (excludes equality)\nproper_subset = set1 &lt; set2      # True\nproper_superset = set2 &gt; set1    # True\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#disjoint-sets","title":"Disjoint Sets","text":"<pre><code>set1 = {1, 2, 3}\nset2 = {4, 5, 6}\nset3 = {3, 4, 5}\n\n# Check if sets have no common elements\nis_disjoint = set1.isdisjoint(set2)  # True\nis_disjoint = set1.isdisjoint(set3)  # False\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#set-comprehension","title":"Set Comprehension","text":"<pre><code># Create set from list with condition\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = {x for x in numbers if x % 2 == 0}  # {2, 4, 6, 8, 10}\n\n# Create set from string (unique characters)\nunique_chars = {char for char in \"hello world\"}  # {'h', 'e', 'l', 'o', ' ', 'w', 'r', 'd'}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Membership testing: O(1) average case</li> <li>Add/Remove: O(1) average case</li> <li>Union/Intersection: O(len(s1) + len(s2))</li> <li>Iteration: O(n)</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Set_Operations/#related-topics","title":"Related Topics","text":"<ul> <li>Sets Overview - Basic set concepts and characteristics</li> <li>Array Intersection - Using set intersection</li> <li>Non-Repeating Elements - Using sets for uniqueness</li> <li>Unique Elements - Using set difference operations</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/","title":"Python Sets Overview","text":"<p>A set in Python is an unordered collection of unique objects, ensuring the absence of duplicate values. Furthermore, it allows us to perform several operations on such collections, such as intersection (identifying common elements), union (combining all unique elements), and difference (detecting unique items in a set).</p>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Unordered: Elements are not stored in any specific order</li> <li>Unique: No duplicate elements allowed</li> <li>Mutable: Can add or remove elements</li> <li>Hashable: Elements must be hashable (immutable)</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#basic-operations","title":"Basic Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#creating-sets","title":"Creating Sets","text":"<pre><code># Empty set\nempty_set = set()\n\n# Set from list\nnumbers = set([1, 2, 3, 4, 5])\n\n# Set literal\nfruits = {'apple', 'banana', 'orange'}\n\n# Set from string (creates set of characters)\nchar_set = set('hello')  # {'h', 'e', 'l', 'o'}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#adding-elements","title":"Adding Elements","text":"<pre><code>my_set = set()\nmy_set.add(1)           # Add single element\nmy_set.update([2, 3, 4]) # Add multiple elements\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#removing-elements","title":"Removing Elements","text":"<pre><code>my_set = {1, 2, 3, 4, 5}\nmy_set.remove(3)        # Raises KeyError if element doesn't exist\nmy_set.discard(6)       # No error if element doesn't exist\npopped = my_set.pop()   # Remove and return arbitrary element\nmy_set.clear()          # Remove all elements\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#set-operations","title":"Set Operations","text":""},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#mathematical-operations","title":"Mathematical Operations","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Union\nunion = set1 | set2  # or set1.union(set2)\n# Result: {1, 2, 3, 4, 5, 6}\n\n# Intersection\nintersection = set1 &amp; set2  # or set1.intersection(set2)\n# Result: {3, 4}\n\n# Difference\ndifference = set1 - set2  # or set1.difference(set2)\n# Result: {1, 2}\n\n# Symmetric Difference\nsymmetric_diff = set1 ^ set2  # or set1.symmetric_difference(set2)\n# Result: {1, 2, 5, 6}\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#membership-testing","title":"Membership Testing","text":"<pre><code>my_set = {1, 2, 3, 4, 5}\nprint(3 in my_set)      # True\nprint(6 not in my_set)  # True\n</code></pre>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Removing Duplicates: Convert list to set and back</li> <li>Finding Unique Elements: Set operations for uniqueness</li> <li>Membership Testing: Fast O(1) lookups</li> <li>Mathematical Operations: Union, intersection, difference</li> </ol>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#time-complexity","title":"Time Complexity","text":"<ul> <li>Add/Remove: O(1) average case</li> <li>Membership: O(1) average case</li> <li>Union/Intersection: O(len(s1) + len(s2))</li> <li>Iteration: O(n)</li> </ul>"},{"location":"engineering_and_data_structure/Data_Structures/Python_Sets/Sets_Overview/#related-topics","title":"Related Topics","text":"<ul> <li>Set Operations - Detailed set operations and methods</li> <li>Array Intersection - Using sets for array intersection</li> <li>Non-Repeating Elements - Finding unique elements</li> <li>Unique Elements - Finding elements unique to each array</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/","title":"Engineering &amp; Data Structure Overview","text":"<p>Welcome to the Engineering &amp; Data Structure section! This comprehensive guide covers fundamental data structures, algorithms, and problem-solving techniques essential for software engineering and technical interviews.</p>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#learning-path","title":"Learning Path","text":""},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#1-data-structures","title":"1. Data Structures","text":"<ul> <li>Python Sets - Unordered collections of unique elements</li> <li>Python Dictionaries - Key-value pair data structures</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#2-problem-solving","title":"2. Problem Solving","text":"<ul> <li>Set &amp; Dictionary Problems - Set operations and dictionary applications</li> <li>String Problems - String manipulation and pattern matching</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#3-resources","title":"3. Resources","text":"<ul> <li>Time Complexity Guide - Understanding algorithm efficiency</li> <li>Common Patterns - Frequently used problem-solving patterns</li> <li>Interview Strategies - Tips for technical interviews</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#key-concepts-covered","title":"Key Concepts Covered","text":""},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#data-structures","title":"Data Structures","text":"<ul> <li>Sets: Unordered collections with unique elements, O(1) lookups</li> <li>Dictionaries: Key-value mappings for efficient lookups and counting</li> <li>Set Operations: Union, intersection, difference for data analysis</li> <li>Dictionary Patterns: Counting, grouping, caching, and memoization</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#problem-solving-patterns","title":"Problem-Solving Patterns","text":"<ul> <li>Set-based Solutions: Removing duplicates, finding intersections, uniqueness</li> <li>Dictionary-based Solutions: Counting frequencies, grouping data, anagram detection</li> <li>String Processing: Pattern matching, character analysis, case handling</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#problem-solving-strategies","title":"Problem-Solving Strategies","text":"<ul> <li>Time Complexity Analysis: Understanding algorithm efficiency</li> <li>Space Complexity: Memory usage optimization</li> <li>Edge Case Handling: Robust solution design</li> <li>Code Optimization: Performance improvements</li> </ul>"},{"location":"engineering_and_data_structure/Overview/Engineering_and_Data_Structure_Overview/#getting-started","title":"Getting Started","text":"<ol> <li>Begin with Data Structures: Start with Python Sets and Dictionaries to understand basic operations and characteristics</li> <li>Practice with Problems: Work through the problem-solving sections to see practical applications</li> <li>Study Patterns: Learn common patterns and time complexity analysis</li> <li>Prepare for Interviews: Use the interview strategies and practice problems</li> </ol> <p>Each section includes practical examples, code implementations, and common interview questions to help you master these concepts.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/","title":"Anagram Pairs","text":"<p>Find all anagram pairs between two lists using Python sets and dictionaries.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#problem-description","title":"Problem Description","text":"<p>Given two lists of strings, find all pairs of words that are anagrams of each other (words that can be formed by rearranging the letters of another word).</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#solution-using-tuples-and-sets","title":"Solution Using Tuples and Sets","text":"<pre><code>def anagram(list_1, list_2):\n    # convert every word from both lists to a sorted tuple of its characters to have a unified form for all anagram words\n    sorted_tuples_1 = set(tuple(sorted(word)) for word in list_1)\n    sorted_tuples_2 = set(tuple(sorted(word)) for word in list_2)\n\n    # find the common tuples between the two\n    common_tuples = sorted_tuples_1 &amp; sorted_tuples_2\n\n    # iterate over the words in the original lists to filter for the words that are anagram\n    list_1_output = [word for word in list_1 if tuple(sorted(word)) in common_tuples] # contains anagrams from the first list\n    list_2_output = [word for word in list_2 if tuple(sorted(word)) in common_tuples] # contains anagrams from the second list\n\n    # check for the words pairs in the filtered list\n    output = []\n    for word1 in list_1_output:\n        for word2 in list_2_output:\n            # traversing every pair of words in filtered lists\n            if tuple(sorted(word1)) == tuple(sorted(word2)):\n                # If words in the pair are anagrams, add them to the output list\n                output.append((word1, word2))\n    return output\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#solution-using-dictionary","title":"Solution Using Dictionary","text":"<pre><code>from collections import defaultdict\n\ndef anagram_dict(list_1, list_2):\n    # Create mapping for `list_1`\n    mapping_1 = defaultdict(list)\n    # mapping_1 stores (sorted anagram) -&gt; list[anagrams] mapping for `list_1`\n    for word in list_1:\n        sorted_tuple = tuple(sorted(word)) # unique identifier of the anagram\n        mapping_1[sorted_tuple].append(word)\n        # `mapping_1[sorted_tuple]` stores all anagrams under the same identifier for `list_1`\n\n    # Create mapping for `list_2`\n    mapping_2 = defaultdict(list)\n    # mapping_2 stores (sorted anagram) -&gt; list[anagrams] mapping for `list_2`\n    for word in list_2:\n        sorted_tuple = tuple(sorted(word)) # unique identifier of the anagram\n        mapping_2[sorted_tuple].append(word)\n        # `mapping_2[sorted_tuple]` stores all anagrams under the same identifier for `list_2`\n\n    # Intersect keys from mapping_1 and mapping_2 to get common sorted tuples\n    # Every element in `common_tuples` is an anagram identifier that exists in both lists\n    common_tuples = set(mapping_1.keys()) &amp; set(mapping_2.keys())\n\n    output = []\n    for anagram_tuple in common_tuples:\n        for word1 in mapping_1[anagram_tuple]:\n            for word2 in mapping_2[anagram_tuple]:\n                # Both word1 and word2 have the same anagram identifier, so are anagrams\n                output.append((word1, word2))\n\n    return output\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#how-it-works","title":"How It Works","text":""},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#set-approach","title":"Set Approach","text":"<ol> <li>Create Sorted Tuples: Convert each word to a sorted tuple of characters</li> <li>Find Common Anagrams: Use set intersection to find common anagram identifiers</li> <li>Filter Words: Get words from both lists that match the common anagrams</li> <li>Generate Pairs: Create all possible pairs between the filtered words</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#dictionary-approach","title":"Dictionary Approach","text":"<ol> <li>Create Mappings: Build dictionaries mapping sorted tuples to lists of anagrams</li> <li>Find Common Keys: Use set intersection to find common anagram identifiers</li> <li>Generate Pairs: Create all pairs between words with the same anagram identifier</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<ul> <li>Set Approach: O(n\u00b2) - Due to nested loops for generating pairs</li> <li>Dictionary Approach: O(n\u00b2) - Due to nested loops for generating pairs</li> <li>Space Complexity: O(n) - We need to store the sets/dictionaries and result</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#example-usage","title":"Example Usage","text":"<pre><code># Example 1\nlist_1 = [\"cat\", \"dog\", \"tac\"]\nlist_2 = [\"act\", \"god\", \"dog\"]\nresult = anagram(list_1, list_2)\nprint(result)  # [('cat', 'act'), ('cat', 'tac'), ('dog', 'god')]\n\n# Example 2\nlist_1 = [\"hello\", \"world\"]\nlist_2 = [\"olleh\", \"dlrow\"]\nresult = anagram(list_1, list_2)\nprint(result)  # [('hello', 'olleh'), ('world', 'dlrow')]\n\n# Example 3\nlist_1 = [\"a\", \"b\", \"c\"]\nlist_2 = [\"d\", \"e\", \"f\"]\nresult = anagram(list_1, list_2)\nprint(result)  # []\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#key-insights","title":"Key Insights","text":"<ol> <li>Anagram Identifier: Sorted tuple of characters serves as a unique identifier for anagrams</li> <li>Set Operations: Using set intersection to find common anagram identifiers</li> <li>Dictionary Mapping: Efficiently grouping anagrams by their sorted representation</li> <li>Pair Generation: Creating all possible pairs between matching anagrams</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#edge-cases","title":"Edge Cases","text":"<ul> <li>Empty Lists: Returns empty list</li> <li>No Anagrams: Returns empty list</li> <li>Single Anagrams: Returns single pair</li> <li>Multiple Anagrams: Returns all possible pairs</li> <li>Case Sensitivity: \"Cat\" and \"cat\" are considered different</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Anagram_Pairs/#related-problems","title":"Related Problems","text":"<ul> <li>Array Intersection - Finding common elements</li> <li>String Operations - String manipulation techniques</li> <li>Dictionary Operations - Dictionary usage patterns</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/","title":"Array Intersection","text":"<p>Find the intersection of two arrays using Python sets.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#problem-description","title":"Problem Description","text":"<p>Given two arrays, find all elements that appear in both arrays. The result should be sorted.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#solution-using-sets","title":"Solution Using Sets","text":"<pre><code>def array_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 &amp; set2\n    return sorted(list(intersection))\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<p>The set operations run at a time complexity of O(n), but the sorting step has a time complexity of O(n log n). Therefore, the overall time complexity of the solution is O(n log n), dominated by the sorting step.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#space-complexity","title":"Space Complexity","text":"<ul> <li>Space Complexity: O(n) - We need to store the sets and the result list</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#example-usage","title":"Example Usage","text":"<pre><code># Example 1\nlist1 = [1, 2, 2, 1]\nlist2 = [2, 2]\nresult = array_intersection(list1, list2)\nprint(result)  # [2]\n\n# Example 2\nlist1 = [4, 9, 5]\nlist2 = [9, 4, 9, 8, 4]\nresult = array_intersection(list1, list2)\nprint(result)  # [4, 9]\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#alternative-approaches","title":"Alternative Approaches","text":""},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#using-list-comprehension-less-efficient","title":"Using List Comprehension (Less Efficient)","text":"<pre><code>def array_intersection_list(list1, list2):\n    return sorted([x for x in list1 if x in list2])\n</code></pre> <p>Time Complexity: O(n\u00b2) - For each element in list1, we check if it's in list2 Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#using-dictionary-for-counting","title":"Using Dictionary for Counting","text":"<pre><code>from collections import Counter\n\ndef array_intersection_counter(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    intersection = counter1 &amp; counter2\n    return sorted(list(intersection.elements()))\n</code></pre> <p>Time Complexity: O(n log n) - Due to sorting Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#key-insights","title":"Key Insights","text":"<ol> <li>Set Operations: Using sets provides O(1) average time complexity for membership testing</li> <li>Sorting Requirement: The final result needs to be sorted, which adds O(n log n) complexity</li> <li>Duplicate Handling: Sets automatically handle duplicates, making the solution clean and efficient</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Array_Intersection/#related-problems","title":"Related Problems","text":"<ul> <li>Non-Repeating Elements - Finding elements that appear only once</li> <li>Unique Elements - Finding elements unique to each array</li> <li>Set Operations - Understanding set operations in detail</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/","title":"Non-Repeating Elements","text":"<p>Find elements that appear only once in an array using Python sets.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#problem-description","title":"Problem Description","text":"<p>Given an array of integers, find all elements that appear only once (non-repeating elements).</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#solution-using-sets","title":"Solution Using Sets","text":"<pre><code>def find_non_repeating_elements(nums):\n    seen, repeated = set(), set()\n    for num in nums:\n        if num in seen:\n            repeated.add(num)\n        else: \n            seen.add(num)\n    return list(seen - repeated)\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#how-it-works","title":"How It Works","text":"<ol> <li>First Pass: Iterate through the array</li> <li>If we see a number for the first time, add it to <code>seen</code></li> <li>If we see a number again, add it to <code>repeated</code></li> <li>Result: Return elements that are in <code>seen</code> but not in <code>repeated</code></li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<p>This approach results in a time complexity of O(n) and a memory complexity of O(n) due to the constant time operations provided by the Python <code>set</code>.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#space-complexity","title":"Space Complexity","text":"<ul> <li>Space Complexity: O(n) - We need to store the seen and repeated sets</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#example-usage","title":"Example Usage","text":"<pre><code># Example 1\nnums = [1, 2, 3, 1, 4, 2]\nresult = find_non_repeating_elements(nums)\nprint(result)  # [3, 4]\n\n# Example 2\nnums = [1, 1, 2, 2, 3, 3]\nresult = find_non_repeating_elements(nums)\nprint(result)  # []\n\n# Example 3\nnums = [1, 2, 3, 4, 5]\nresult = find_non_repeating_elements(nums)\nprint(result)  # [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#alternative-approaches","title":"Alternative Approaches","text":""},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#using-dictionary-for-counting","title":"Using Dictionary for Counting","text":"<pre><code>from collections import Counter\n\ndef find_non_repeating_elements_counter(nums):\n    counter = Counter(nums)\n    return [num for num, count in counter.items() if count == 1]\n</code></pre> <p>Time Complexity: O(n) Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#using-list-comprehension-less-efficient","title":"Using List Comprehension (Less Efficient)","text":"<pre><code>def find_non_repeating_elements_list(nums):\n    return [num for num in nums if nums.count(num) == 1]\n</code></pre> <p>Time Complexity: O(n\u00b2) - <code>count()</code> method is O(n) for each element Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#key-insights","title":"Key Insights","text":"<ol> <li>Two-Set Approach: Using two sets to track seen and repeated elements</li> <li>Set Difference: Using <code>seen - repeated</code> to find elements that appear only once</li> <li>Single Pass: The solution requires only one pass through the array</li> <li>Efficient Lookups: Set operations provide O(1) average time complexity</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#edge-cases","title":"Edge Cases","text":"<ul> <li>Empty Array: Returns empty list</li> <li>All Repeating: Returns empty list</li> <li>All Unique: Returns all elements</li> <li>Single Element: Returns the element if it appears only once</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Non_Repeating_Elements/#related-problems","title":"Related Problems","text":"<ul> <li>Array Intersection - Finding common elements between arrays</li> <li>Unique Elements - Finding elements unique to each array</li> <li>Unique Strings - Finding unique strings in a list</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/","title":"Unique Elements","text":"<p>Find elements that are unique to each of two arrays using Python sets.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#problem-description","title":"Problem Description","text":"<p>Given two arrays, find elements that are unique to each array (elements that appear in one array but not in the other).</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#solution-using-sets","title":"Solution Using Sets","text":"<pre><code>def unique_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    unique_to_1 = sorted(list(set1 - set2))\n    unique_to_2 = sorted(list(set2 - set1))\n    return (unique_to_1, unique_to_2)\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#how-it-works","title":"How It Works","text":"<ol> <li>Convert to Sets: Convert both lists to sets for efficient operations</li> <li>Set Difference: </li> <li><code>set1 - set2</code> gives elements unique to list1</li> <li><code>set2 - set1</code> gives elements unique to list2</li> <li>Sort Results: Convert back to sorted lists for consistent output</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<p>This solution is considerably more efficient than the naive approach, operating at a time complexity of O(n), or O(max(len(list1), len(list2))) to be more precise.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#space-complexity","title":"Space Complexity","text":"<ul> <li>Space Complexity: O(n) - We need to store the sets and result lists</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#example-usage","title":"Example Usage","text":"<pre><code># Example 1\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\nunique_1, unique_2 = unique_elements(list1, list2)\nprint(unique_1)  # [1, 2]\nprint(unique_2)  # [5, 6]\n\n# Example 2\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nunique_1, unique_2 = unique_elements(list1, list2)\nprint(unique_1)  # []\nprint(unique_2)  # []\n\n# Example 3\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9, 10]\nunique_1, unique_2 = unique_elements(list1, list2)\nprint(unique_1)  # [1, 2, 3, 4, 5]\nprint(unique_2)  # [6, 7, 8, 9, 10]\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#alternative-approaches","title":"Alternative Approaches","text":""},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#using-list-comprehension-less-efficient","title":"Using List Comprehension (Less Efficient)","text":"<pre><code>def unique_elements_list(list1, list2):\n    unique_to_1 = sorted([x for x in list1 if x not in list2])\n    unique_to_2 = sorted([x for x in list2 if x not in list1])\n    return (unique_to_1, unique_to_2)\n</code></pre> <p>Time Complexity: O(n\u00b2) - <code>not in</code> operation is O(n) for each element Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#using-dictionary-for-counting","title":"Using Dictionary for Counting","text":"<pre><code>from collections import Counter\n\ndef unique_elements_counter(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n\n    unique_to_1 = sorted([num for num in counter1 if num not in counter2])\n    unique_to_2 = sorted([num for num in counter2 if num not in counter1])\n\n    return (unique_to_1, unique_to_2)\n</code></pre> <p>Time Complexity: O(n log n) - Due to sorting Space Complexity: O(n)</p>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#key-insights","title":"Key Insights","text":"<ol> <li>Set Difference: Using set difference operations (<code>-</code>) for efficient uniqueness checking</li> <li>Symmetric Operation: The operation is symmetric - we check both directions</li> <li>Sorting: Results are sorted for consistent output</li> <li>Efficient Lookups: Set operations provide O(1) average time complexity</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#edge-cases","title":"Edge Cases","text":"<ul> <li>Empty Arrays: Returns empty lists for both</li> <li>Identical Arrays: Returns empty lists for both</li> <li>Completely Different: Returns all elements from each array</li> <li>One Empty: Returns all elements from the non-empty array</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/Set_Dictionary_Problems/Unique_Elements/#related-problems","title":"Related Problems","text":"<ul> <li>Array Intersection - Finding common elements between arrays</li> <li>Non-Repeating Elements - Finding elements that appear only once</li> <li>Set Operations - Understanding set difference operations</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/","title":"String Operations","text":"<p>Common string manipulation techniques and operations in Python.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#basic-string-operations","title":"Basic String Operations","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-creation-and-access","title":"String Creation and Access","text":"<pre><code># String literals\ns1 = \"Hello, World!\"\ns2 = 'Python Programming'\ns3 = \"\"\"Multi-line\nstring\"\"\"\n\n# String indexing\nfirst_char = s1[0]      # 'H'\nlast_char = s1[-1]      # '!'\nsubstring = s1[0:5]     # 'Hello'\n\n# String length\nlength = len(s1)        # 13\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-concatenation","title":"String Concatenation","text":"<pre><code># Using + operator\nresult = \"Hello\" + \" \" + \"World\"  # \"Hello World\"\n\n# Using join() method\nwords = [\"Hello\", \"World\", \"Python\"]\nresult = \" \".join(words)  # \"Hello World Python\"\n\n# Using f-strings (Python 3.6+)\nname = \"Alice\"\nage = 30\nresult = f\"My name is {name} and I am {age} years old\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-methods","title":"String Methods","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#case-manipulation","title":"Case Manipulation","text":"<pre><code>text = \"Hello World\"\n\n# Convert case\nupper_text = text.upper()      # \"HELLO WORLD\"\nlower_text = text.lower()      # \"hello world\"\ntitle_text = text.title()      # \"Hello World\"\ncapitalize_text = text.capitalize()  # \"Hello world\"\nswapcase_text = text.swapcase()      # \"hELLO wORLD\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-searching-and-replacing","title":"String Searching and Replacing","text":"<pre><code>text = \"Hello World Hello\"\n\n# Find substring\nindex = text.find(\"World\")     # 6\nindex = text.find(\"Python\")    # -1 (not found)\n\n# Count occurrences\ncount = text.count(\"Hello\")    # 2\n\n# Replace substring\nnew_text = text.replace(\"Hello\", \"Hi\")  # \"Hi World Hi\"\n\n# Check if string starts/ends with\nstarts_with = text.startswith(\"Hello\")  # True\nends_with = text.endswith(\"World\")      # False\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-splitting-and-joining","title":"String Splitting and Joining","text":"<pre><code>text = \"apple,banana,cherry,date\"\n\n# Split by delimiter\nfruits = text.split(\",\")  # ['apple', 'banana', 'cherry', 'date']\n\n# Split with max splits\nparts = text.split(\",\", 2)  # ['apple', 'banana', 'cherry,date']\n\n# Join strings\njoined = \"-\".join(fruits)  # \"apple-banana-cherry-date\"\n\n# Split by whitespace\nsentence = \"Hello   World   Python\"\nwords = sentence.split()  # ['Hello', 'World', 'Python']\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-stripping-and-padding","title":"String Stripping and Padding","text":"<pre><code>text = \"   Hello World   \"\n\n# Remove whitespace\nstripped = text.strip()        # \"Hello World\"\nleft_stripped = text.lstrip()  # \"Hello World   \"\nright_stripped = text.rstrip() # \"   Hello World\"\n\n# Padding\npadded = text.center(20, \"*\")  # \"***Hello World****\"\nleft_padded = text.ljust(20, \"*\")  # \"Hello World********\"\nright_padded = text.rjust(20, \"*\") # \"********Hello World\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#advanced-string-operations","title":"Advanced String Operations","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-formatting","title":"String Formatting","text":"<pre><code>name = \"Alice\"\nage = 30\nheight = 1.75\n\n# Old-style formatting\nresult = \"Name: %s, Age: %d, Height: %.2f\" % (name, age, height)\n\n# str.format() method\nresult = \"Name: {}, Age: {}, Height: {:.2f}\".format(name, age, height)\nresult = \"Name: {n}, Age: {a}, Height: {h:.2f}\".format(n=name, a=age, h=height)\n\n# f-strings (recommended)\nresult = f\"Name: {name}, Age: {age}, Height: {height:.2f}\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-validation","title":"String Validation","text":"<pre><code>text = \"Hello123\"\n\n# Check character types\nis_alpha = text.isalpha()      # False (contains digits)\nis_digit = text.isdigit()      # False (contains letters)\nis_alnum = text.isalnum()      # True (alphanumeric)\nis_lower = text.islower()      # False (contains uppercase)\nis_upper = text.isupper()      # False (contains lowercase)\nis_space = text.isspace()      # False (no spaces)\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-encoding-and-decoding","title":"String Encoding and Decoding","text":"<pre><code>text = \"Hello, \u4e16\u754c\"\n\n# Encode to bytes\nutf8_bytes = text.encode('utf-8')\nascii_bytes = text.encode('ascii', errors='ignore')\n\n# Decode from bytes\ndecoded_text = utf8_bytes.decode('utf-8')\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#common-string-patterns","title":"Common String Patterns","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#palindrome-check","title":"Palindrome Check","text":"<pre><code>def is_palindrome(s):\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]\n\n# Example\nprint(is_palindrome(\"A man, a plan, a canal: Panama\"))  # True\nprint(is_palindrome(\"race a car\"))  # False\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#anagram-check","title":"Anagram Check","text":"<pre><code>def is_anagram(s1, s2):\n    # Remove spaces and convert to lowercase\n    s1_clean = ''.join(s1.lower().split())\n    s2_clean = ''.join(s2.lower().split())\n\n    # Sort and compare\n    return sorted(s1_clean) == sorted(s2_clean)\n\n# Example\nprint(is_anagram(\"listen\", \"silent\"))  # True\nprint(is_anagram(\"hello\", \"world\"))    # False\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-reversal","title":"String Reversal","text":"<pre><code>text = \"Hello World\"\n\n# Using slice\nreversed_text = text[::-1]  # \"dlroW olleH\"\n\n# Using reversed() function\nreversed_text = ''.join(reversed(text))  # \"dlroW olleH\"\n\n# Word by word reversal\nwords = text.split()\nreversed_words = ' '.join(word[::-1] for word in words)  # \"olleH dlroW\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#character-frequency","title":"Character Frequency","text":"<pre><code>from collections import Counter\n\ndef char_frequency(text):\n    return Counter(text.lower())\n\n# Example\nfreq = char_frequency(\"hello world\")\nprint(freq)  # Counter({'l': 3, 'o': 2, 'h': 1, 'e': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1})\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#performance-considerations","title":"Performance Considerations","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-concatenation_1","title":"String Concatenation","text":"<pre><code># Inefficient: creates new string each time\nresult = \"\"\nfor i in range(1000):\n    result += str(i)\n\n# Efficient: use list and join\nparts = []\nfor i in range(1000):\n    parts.append(str(i))\nresult = ''.join(parts)\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#string-vs-list-operations","title":"String vs List Operations","text":"<pre><code># String operations create new objects\ntext = \"Hello\"\ntext += \" World\"  # Creates new string\n\n# List operations modify in place\nchars = list(\"Hello\")\nchars.append(\"!\")  # Modifies existing list\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#best-practices","title":"Best Practices","text":"<ol> <li>Use f-strings for formatting: More readable and efficient</li> <li>Use join() for concatenation: More efficient than + operator in loops</li> <li>Use appropriate string methods: Built-in methods are optimized</li> <li>Consider immutability: Strings are immutable, operations create new objects</li> <li>Use raw strings for regex: <code>r\"pattern\"</code> to avoid escaping backslashes</li> <li>Handle encoding properly: Be explicit about encoding when working with files</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/String_Operations/#related-topics","title":"Related Topics","text":"<ul> <li>Unique Strings - Finding unique strings in a list</li> <li>Array Intersection - String-based intersection problems</li> <li>Anagram Pairs - String anagram detection</li> <li>Common Patterns - General problem-solving patterns</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/","title":"Unique Strings","text":"<p>Find the first unique string in a list using Python sets and dictionaries.</p>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#problem-description","title":"Problem Description","text":"<p>Given a list of strings, find the first string that appears only once (is unique).</p>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#solution-using-two-sets","title":"Solution Using Two Sets","text":"<pre><code>def find_unique_string(words):\n    seen = set()\n    duplicates = set()\n    for word in words:\n        if word in seen:\n            duplicates.add(word)\n        seen.add(word)\n    for word in words:\n        if word not in duplicates:\n            return word\n    return \"\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#how-it-works","title":"How It Works","text":"<ol> <li>First Pass: Track seen words and duplicates</li> <li>If we see a word for the first time, add it to <code>seen</code></li> <li>If we see a word again, add it to <code>duplicates</code></li> <li>Second Pass: Find the first word not in duplicates</li> <li>Return the first word that appears only once</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#solution-using-dictionary","title":"Solution Using Dictionary","text":"<pre><code>def find_unique_string_dict(words):\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] = count_dict[word] + 1\n        else:\n            count_dict[word] = 1\n    for word in words:\n        if count_dict[word] == 1:\n            return word\n    return \"\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<ul> <li>Two Sets Approach: O(n) - Two passes through the array</li> <li>Dictionary Approach: O(n) - Two passes through the array</li> <li>Space Complexity: O(n) - We need to store the sets/dictionary</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#example-usage","title":"Example Usage","text":"<pre><code># Example 1\nwords = [\"hello\", \"world\", \"hello\", \"python\"]\nresult = find_unique_string(words)\nprint(result)  # \"world\"\n\n# Example 2\nwords = [\"a\", \"b\", \"a\", \"b\", \"c\"]\nresult = find_unique_string(words)\nprint(result)  # \"c\"\n\n# Example 3\nwords = [\"a\", \"a\", \"b\", \"b\"]\nresult = find_unique_string(words)\nprint(result)  # \"\"\n\n# Example 4\nwords = [\"unique\"]\nresult = find_unique_string(words)\nprint(result)  # \"unique\"\n</code></pre>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#comparison-of-approaches","title":"Comparison of Approaches","text":""},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#two-sets-approach","title":"Two Sets Approach","text":"<ul> <li>Pros: Simple logic, easy to understand</li> <li>Cons: Requires two passes through the array</li> <li>Best for: When you need to track both seen and duplicate elements</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#dictionary-approach","title":"Dictionary Approach","text":"<ul> <li>Pros: More explicit counting, can be extended for other counting problems</li> <li>Cons: Slightly more complex logic</li> <li>Best for: When you need exact counts or might need to extend the solution</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#key-insights","title":"Key Insights","text":"<ol> <li>Two-Pass Solution: First pass to identify duplicates, second pass to find first unique</li> <li>Order Preservation: The second pass maintains the original order to find the \"first\" unique</li> <li>Efficient Lookups: Set/dictionary operations provide O(1) average time complexity</li> <li>Edge Case Handling: Returns empty string if no unique element exists</li> </ol>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#edge-cases","title":"Edge Cases","text":"<ul> <li>Empty List: Returns empty string</li> <li>All Duplicates: Returns empty string</li> <li>All Unique: Returns the first element</li> <li>Single Element: Returns the element</li> <li>Case Sensitivity: \"Hello\" and \"hello\" are considered different</li> </ul>"},{"location":"engineering_and_data_structure/Problem_Solving/String_Problems/Unique_Strings/#related-problems","title":"Related Problems","text":"<ul> <li>Non-Repeating Elements - Finding non-repeating numbers</li> <li>Array Intersection - Finding common elements</li> <li>String Operations - Other string manipulation techniques</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/","title":"Common Patterns","text":"<p>Common patterns and techniques used in data structure and algorithm problems.</p>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#dictionary-operations","title":"Dictionary Operations","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#how-to-initiate-a-set-and-add-elements","title":"How to Initiate a Set and Add Elements","text":"<pre><code>set_sample = set()\nset_sample.add(1)\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#how-to-convert-a-string-of-digits-in-dictionary-to-a-number","title":"How to Convert a String of Digits in Dictionary to a Number","text":"<pre><code>int(\"\".join([value for _, value in dictionary.items()]))\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#how-to-sort-a-dictionary-in-python","title":"How to Sort a Dictionary in Python","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#based-on-key","title":"Based on Key","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_key = dict(sorted(my_dict.items()))  \nprint(sorted_by_key)  \n# Output: {'apple': 3, 'banana': 2, 'orange': 1}\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#based-on-value","title":"Based on Value","text":"<pre><code>my_dict = {'apple': 3, 'orange': 1, 'banana': 2}  \nsorted_by_value = dict(sorted(my_dict.items(), key=lambda item: item[1]))  \nprint(sorted_by_value)  \n# Output: {'orange': 1, 'banana': 2, 'apple': 3}\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#string-operations","title":"String Operations","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#how-to-ignore-capital-vs-lower-cases-in-python","title":"How to Ignore Capital vs Lower Cases in Python","text":"<pre><code>inventory1 = [string.upper() for string in inventory1] # .lower() for lower \ninventory2 = [string.upper() for string in inventory2] # .lower() for lower \n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#set-operations","title":"Set Operations","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#basic-set-creation-and-manipulation","title":"Basic Set Creation and Manipulation","text":"<pre><code># Create empty set\nempty_set = set()\n\n# Create set from list\nnumbers = set([1, 2, 3, 4, 5])\n\n# Add elements\nmy_set = set()\nmy_set.add(1)\nmy_set.update([2, 3, 4])\n\n# Remove elements\nmy_set.remove(3)        # Raises KeyError if not found\nmy_set.discard(6)       # No error if not found\npopped = my_set.pop()   # Remove and return arbitrary element\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#set-mathematical-operations","title":"Set Mathematical Operations","text":"<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Union\nunion = set1 | set2  # or set1.union(set2)\n\n# Intersection\nintersection = set1 &amp; set2  # or set1.intersection(set2)\n\n# Difference\ndifference = set1 - set2  # or set1.difference(set2)\n\n# Symmetric Difference\nsymmetric_diff = set1 ^ set2  # or set1.symmetric_difference(set2)\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#list-operations","title":"List Operations","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#list-comprehension-patterns","title":"List Comprehension Patterns","text":"<pre><code># Basic list comprehension\nsquares = [x**2 for x in range(10)]\n\n# List comprehension with condition\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n\n# Nested list comprehension\nmatrix = [[i+j for j in range(3)] for i in range(3)]\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#list-manipulation","title":"List Manipulation","text":"<pre><code># Remove duplicates while preserving order\ndef remove_duplicates_preserve_order(lst):\n    seen = set()\n    return [x for x in lst if not (x in seen or seen.add(x))]\n\n# Flatten nested list\ndef flatten(lst):\n    return [item for sublist in lst for item in sublist]\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#algorithmic-patterns","title":"Algorithmic Patterns","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#two-pointers-technique","title":"Two Pointers Technique","text":"<pre><code>def two_pointers_example(arr):\n    left, right = 0, len(arr) - 1\n    while left &lt; right:\n        # Process elements at left and right pointers\n        if some_condition:\n            left += 1\n        else:\n            right -= 1\n    return result\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#sliding-window-technique","title":"Sliding Window Technique","text":"<pre><code>def sliding_window_example(arr, k):\n    window_sum = sum(arr[:k])\n    result = [window_sum]\n\n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i-k] + arr[i]\n        result.append(window_sum)\n\n    return result\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#prefix-sum-technique","title":"Prefix Sum Technique","text":"<pre><code>def prefix_sum_example(arr):\n    prefix = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        prefix[i + 1] = prefix[i] + arr[i]\n    return prefix\n\ndef range_sum(prefix, left, right):\n    return prefix[right + 1] - prefix[left]\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#time-complexity-cheat-sheet","title":"Time Complexity Cheat Sheet","text":""},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#common-operations","title":"Common Operations","text":"Operation List Set Dictionary Access O(1) N/A O(1) Search O(n) O(1) O(1) Insert O(1) O(1) O(1) Delete O(n) O(1) O(1)"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#sorting-algorithms","title":"Sorting Algorithms","text":"Algorithm Time Complexity Space Complexity Stable Bubble Sort O(n\u00b2) O(1) Yes Selection Sort O(n\u00b2) O(1) No Insertion Sort O(n\u00b2) O(1) Yes Merge Sort O(n log n) O(n) Yes Quick Sort O(n log n) O(log n) No Heap Sort O(n log n) O(1) No"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#space-complexity-guidelines","title":"Space Complexity Guidelines","text":"<ul> <li>O(1): Constant space - no extra space needed</li> <li>O(n): Linear space - space grows with input size</li> <li>O(n\u00b2): Quadratic space - space grows with square of input size</li> <li>O(log n): Logarithmic space - space grows with log of input size</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Common_Patterns/#related-topics","title":"Related Topics","text":"<ul> <li>Time Complexity Guide - Detailed complexity analysis</li> <li>Interview Strategies - Tips for technical interviews</li> <li>Set Operations - Detailed set operations</li> <li>Dictionary Operations - Dictionary usage patterns</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/","title":"Interview Strategies","text":"<p>Tips and strategies for technical interviews focusing on data structures and algorithms.</p>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#preparation-strategy","title":"Preparation Strategy","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#1-master-the-fundamentals","title":"1. Master the Fundamentals","text":"<ul> <li>Data Structures: Arrays, linked lists, stacks, queues, trees, graphs, heaps, hash tables</li> <li>Algorithms: Sorting, searching, recursion, dynamic programming, greedy algorithms</li> <li>Time/Space Complexity: Big O notation and analysis</li> <li>Problem-Solving Patterns: Two pointers, sliding window, binary search, etc.</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#2-practice-problem-types","title":"2. Practice Problem Types","text":"<ul> <li>Array/String Problems: Two pointers, sliding window, prefix sum</li> <li>Tree/Graph Problems: DFS, BFS, traversal algorithms</li> <li>Dynamic Programming: Memoization, tabulation, optimization</li> <li>System Design: Scalability, trade-offs, architecture decisions</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#problem-solving-framework","title":"Problem-Solving Framework","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#1-understand-the-problem","title":"1. Understand the Problem","text":"<ul> <li>Clarify requirements: Ask clarifying questions</li> <li>Identify constraints: Time, space, input size</li> <li>Consider edge cases: Empty input, single element, duplicates</li> <li>Understand the output: What should the function return?</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#2-plan-your-approach","title":"2. Plan Your Approach","text":"<ul> <li>Think out loud: Explain your thought process</li> <li>Consider multiple approaches: Brute force, optimized, trade-offs</li> <li>Estimate complexity: Time and space complexity upfront</li> <li>Choose the best approach: Based on constraints and requirements</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#3-implement-the-solution","title":"3. Implement the Solution","text":"<ul> <li>Write clean code: Use meaningful variable names</li> <li>Handle edge cases: Check for null, empty, invalid input</li> <li>Test as you go: Walk through examples step by step</li> <li>Optimize if needed: Look for improvements</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#4-test-and-verify","title":"4. Test and Verify","text":"<ul> <li>Walk through examples: Use the provided test cases</li> <li>Check edge cases: Empty input, single element, large input</li> <li>Verify correctness: Ensure the solution works as expected</li> <li>Analyze complexity: Confirm time and space complexity</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#common-interview-patterns","title":"Common Interview Patterns","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#1-two-pointers-technique","title":"1. Two Pointers Technique","text":"<pre><code>def two_sum_sorted(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt; right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return [left, right]\n        elif current_sum &lt; target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#2-sliding-window","title":"2. Sliding Window","text":"<pre><code>def max_sum_subarray(arr, k):\n    if len(arr) &lt; k:\n        return 0\n\n    window_sum = sum(arr[:k])\n    max_sum = window_sum\n\n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, window_sum)\n\n    return max_sum\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#3-binary-search","title":"3. Binary Search","text":"<pre><code>def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left &lt;= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n</code></pre>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#communication-tips","title":"Communication Tips","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#1-think-out-loud","title":"1. Think Out Loud","text":"<ul> <li>Explain your reasoning: Why you chose a particular approach</li> <li>Discuss trade-offs: Time vs space complexity</li> <li>Consider alternatives: What other approaches could work?</li> <li>Ask questions: Clarify requirements when needed</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#2-handle-mistakes-gracefully","title":"2. Handle Mistakes Gracefully","text":"<ul> <li>Acknowledge errors: Don't try to hide mistakes</li> <li>Correct yourself: Show you can identify and fix issues</li> <li>Learn from feedback: Use interviewer suggestions</li> <li>Stay positive: Maintain confidence throughout</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#3-show-your-work","title":"3. Show Your Work","text":"<ul> <li>Write clear code: Use meaningful variable names</li> <li>Add comments: Explain complex logic</li> <li>Test your code: Walk through examples</li> <li>Consider edge cases: Show thorough thinking</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#1-rushing-to-code","title":"1. Rushing to Code","text":"<ul> <li>Take time to understand: Don't start coding immediately</li> <li>Plan your approach: Think before implementing</li> <li>Consider edge cases: Plan for all scenarios</li> <li>Estimate complexity: Know your solution's efficiency</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#2-ignoring-constraints","title":"2. Ignoring Constraints","text":"<ul> <li>Check input size: Consider memory limitations</li> <li>Verify requirements: Ensure you understand the problem</li> <li>Test assumptions: Don't assume input format</li> <li>Consider performance: Think about scalability</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#3-poor-communication","title":"3. Poor Communication","text":"<ul> <li>Stay silent: Don't explain your thinking</li> <li>Ignore feedback: Don't listen to interviewer suggestions</li> <li>Give up easily: Don't show persistence</li> <li>Be defensive: Don't accept criticism</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#sample-interview-questions","title":"Sample Interview Questions","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#easy-level","title":"Easy Level","text":"<ol> <li>Two Sum: Find two numbers that add up to target</li> <li>Valid Parentheses: Check if parentheses are balanced</li> <li>Reverse String: Reverse a string in-place</li> <li>Valid Palindrome: Check if string is palindrome</li> </ol>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#medium-level","title":"Medium Level","text":"<ol> <li>Longest Substring Without Repeating Characters: Sliding window</li> <li>Container With Most Water: Two pointers</li> <li>3Sum: Array manipulation with sorting</li> <li>Binary Tree Level Order Traversal: BFS</li> </ol>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#hard-level","title":"Hard Level","text":"<ol> <li>Median of Two Sorted Arrays: Binary search</li> <li>Regular Expression Matching: Dynamic programming</li> <li>Merge k Sorted Lists: Heap/priority queue</li> <li>Word Ladder: BFS with optimization</li> </ol>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#resources-for-practice","title":"Resources for Practice","text":""},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#online-platforms","title":"Online Platforms","text":"<ul> <li>LeetCode: Comprehensive problem database</li> <li>HackerRank: Practice problems and contests</li> <li>CodeSignal: Interview preparation platform</li> <li>TopCoder: Competitive programming</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#books","title":"Books","text":"<ul> <li>\"Cracking the Coding Interview\": Gayle McDowell</li> <li>\"Introduction to Algorithms\": CLRS</li> <li>\"Algorithm Design Manual\": Steven Skiena</li> <li>\"Programming Interviews Exposed\": John Mongan</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#mock-interviews","title":"Mock Interviews","text":"<ul> <li>Pramp: Free peer-to-peer mock interviews</li> <li>Interviewing.io: Practice with real engineers</li> <li>LeetCode Mock Interviews: Simulated interview environment</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Interview_Strategies/#related-topics","title":"Related Topics","text":"<ul> <li>Time Complexity Guide - Understanding algorithm efficiency</li> <li>Common Patterns - Frequently used problem-solving patterns</li> <li>Set Operations - Set-based interview problems</li> <li>Dictionary Operations - Dictionary-based interview problems</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/","title":"Time Complexity Guide","text":"<p>Understanding algorithm efficiency and time complexity analysis.</p>"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#big-o-notation","title":"Big O Notation","text":"<p>Big O notation describes the performance or complexity of an algorithm by showing how the runtime grows as the input size increases.</p>"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#common-time-complexities","title":"Common Time Complexities","text":"Complexity Name Description Example O(1) Constant Runtime doesn't change with input size Array access, Hash table operations O(log n) Logarithmic Runtime grows logarithmically Binary search, Balanced tree operations O(n) Linear Runtime grows linearly with input size Linear search, Array traversal O(n log n) Linearithmic Runtime grows as n times log n Merge sort, Quick sort O(n\u00b2) Quadratic Runtime grows as square of input size Bubble sort, Nested loops O(2\u207f) Exponential Runtime grows exponentially Recursive Fibonacci, Subset generation O(n!) Factorial Runtime grows as factorial of input size Traveling salesman (brute force)"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#data-structure-complexities","title":"Data Structure Complexities","text":""},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#arraylist-operations","title":"Array/List Operations","text":"Operation Time Complexity Space Complexity Access O(1) O(1) Search O(n) O(1) Insert (end) O(1) O(1) Insert (beginning) O(n) O(1) Delete (end) O(1) O(1) Delete (beginning) O(n) O(1)"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#set-operations","title":"Set Operations","text":"Operation Time Complexity Space Complexity Access N/A N/A Search O(1) O(1) Insert O(1) O(1) Delete O(1) O(1) Union O(n) O(n) Intersection O(n) O(n)"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#dictionary-operations","title":"Dictionary Operations","text":"Operation Time Complexity Space Complexity Access O(1) O(1) Search O(1) O(1) Insert O(1) O(1) Delete O(1) O(1)"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#algorithm-complexities","title":"Algorithm Complexities","text":""},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#sorting-algorithms","title":"Sorting Algorithms","text":"Algorithm Time Complexity Space Complexity Stable Bubble Sort O(n\u00b2) O(1) Yes Selection Sort O(n\u00b2) O(1) No Insertion Sort O(n\u00b2) O(1) Yes Merge Sort O(n log n) O(n) Yes Quick Sort O(n log n) O(log n) No Heap Sort O(n log n) O(1) No"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#search-algorithms","title":"Search Algorithms","text":"Algorithm Time Complexity Space Complexity Linear Search O(n) O(1) Binary Search O(log n) O(1) Depth-First Search O(V + E) O(V) Breadth-First Search O(V + E) O(V)"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#space-complexity-guidelines","title":"Space Complexity Guidelines","text":"<ul> <li>O(1): Constant space - no extra space needed</li> <li>O(n): Linear space - space grows with input size</li> <li>O(n\u00b2): Quadratic space - space grows with square of input size</li> <li>O(log n): Logarithmic space - space grows with log of input size</li> </ul>"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#best-practices","title":"Best Practices","text":"<ol> <li>Choose appropriate data structures: Use sets for membership testing, dictionaries for key-value pairs</li> <li>Consider trade-offs: Time vs space complexity</li> <li>Profile your code: Measure actual performance, not just theoretical complexity</li> <li>Optimize bottlenecks: Focus on the most time-consuming parts of your algorithm</li> <li>Use built-in functions: They're often optimized</li> </ol>"},{"location":"engineering_and_data_structure/Resources/Time_Complexity_Guide/#related-topics","title":"Related Topics","text":"<ul> <li>Common Patterns - Frequently used patterns and their complexities</li> <li>Interview Strategies - Tips for analyzing complexity in interviews</li> <li>Set Operations - Set operation complexities</li> <li>Dictionary Operations - Dictionary operation complexities</li> </ul>"},{"location":"language_model/Ngram_Language_Modeling/","title":"Week3_Ngram_Language_Modeling","text":""},{"location":"language_model/Ngram_Language_Modeling/#n-gram-models-language-modeling","title":"N-gram Models &amp; Language Modeling","text":""},{"location":"language_model/Ngram_Language_Modeling/#introduction","title":"Introduction","text":"<p>N-gram language models are the classical approach to predicting words based on fixed-length context. They remain a great entry point for understanding how language modeling works, how to evaluate models with perplexity, and why data sparsity motivates neural approaches.</p>"},{"location":"language_model/Ngram_Language_Modeling/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Textual Descriptive Models</li> <li>What is an n-gram?</li> <li>Building and training an n-gram language model</li> <li>Perplexity: definition &amp; interpretation</li> <li>Limitations of n-gram models (data sparsity, context window)</li> <li>Implementing bigram or trigram models on a toy corpus</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/","title":"Machine Learning Fundamentals","text":"<p>Welcome to the Machine Learning Fundamentals section! This comprehensive guide covers the essential concepts and techniques that form the foundation of machine learning.</p>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#learning-path","title":"\ud83d\udcda Learning Path","text":""},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#1-feature-engineering","title":"1. Feature Engineering","text":"<p>The foundation of any successful ML project starts with proper data preparation and feature engineering.</p> <ul> <li>Data Types &amp; Normalization - Understanding structured vs unstructured data, normalization techniques (min-max scaling, z-score)</li> <li>Categorical Encoding - Ordinal, one-hot, and binary encoding methods</li> <li>Feature Crosses - High-dimensional feature combinations and dimensionality reduction</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#2-model-evaluation-validation","title":"2. Model Evaluation &amp; Validation","text":"<p>Learn how to properly evaluate and validate your machine learning models.</p> <ul> <li>Evaluation Methods - Holdout, cross-validation, and bootstrap methods</li> <li>Metrics &amp; Validation - Accuracy, precision, recall, F1-score, and ROC curves</li> <li>Hyperparameter Tuning - Grid search, random search, and Bayesian optimization</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#3-regularization-overfitting","title":"3. Regularization &amp; Overfitting","text":"<p>Master techniques to prevent overfitting and improve model generalization.</p> <ul> <li>Overfitting &amp; Underfitting - Detection and mitigation strategies</li> <li>L1/L2 Regularization - Mathematical foundations and implementation</li> <li>Early Stopping - Training control and data augmentation techniques</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#4-classical-supervised-algorithms","title":"4. Classical Supervised Algorithms","text":"<p>Explore fundamental supervised learning algorithms.</p> <ul> <li>Linear Regression - Simple and multiple linear regression with implementation</li> <li>Logistic Regression - Binary classification with sigmoid function and maximum likelihood</li> <li>Decision Trees - Gini impurity, information gain, and tree construction</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#5-unsupervised-learning","title":"5. Unsupervised Learning","text":"<p>Discover algorithms for finding patterns in unlabeled data.</p> <ul> <li>K-Nearest Neighbors - Distance metrics and classification algorithm</li> <li>K-Means Clustering - Clustering algorithm and implementation</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#related-topics","title":"\ud83d\udd17 Related Topics","text":"<ul> <li>Probability &amp; Markov - Probability foundations and Bayesian methods</li> <li>Language Models - Text processing and NLP techniques</li> <li>Information Theory - Entropy, cross-entropy, and KL divergence</li> <li>Linear Algebra - Mathematical foundations for ML</li> <li>Calculus &amp; Gradient Descent - Optimization techniques</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#key-learning-objectives","title":"\ud83c\udfaf Key Learning Objectives","text":"<p>By the end of this section, you will understand:</p> <ul> <li>How to preprocess and engineer features for ML models</li> <li>Methods for evaluating and validating model performance</li> <li>Techniques to prevent overfitting and improve generalization</li> <li>Implementation of fundamental supervised and unsupervised algorithms</li> <li>Best practices for hyperparameter tuning and model selection</li> </ul>"},{"location":"ml_fundamentals/ML_Fundamentals_Overview/#prerequisites","title":"\ud83d\udcd6 Prerequisites","text":"<ul> <li>Basic understanding of Python programming</li> <li>Familiarity with probability concepts (see Probability &amp; Markov section)</li> <li>Knowledge of linear algebra fundamentals (see Linear Algebra for ML)</li> </ul> <p>Start with Feature Engineering to build a solid foundation, then progress through the sections in order for the best learning experience.</p>"},{"location":"ml_fundamentals/ML_fundamentals/","title":"ML Fundamentals","text":""},{"location":"ml_fundamentals/ML_fundamentals/#feature-engineering","title":"Feature Engineering","text":"<p>Two types of data: - Structured / Tabular data: Could be viewed as a data table from the relational database, which every columns has their clear definition, including numerical and categorial data types. - Unstructured data: Includes text, image, audio, video data, and the information that this type of data contains cannot be represented easily as a numerical value, and also they do not have clear categorical definition, furthermore, the size of these data are not identical.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#normalization-of-features","title":"Normalization of Features","text":""},{"location":"ml_fundamentals/ML_fundamentals/#why-does-one-need-to-do-normalization-on-numerical-features","title":"Why does one need to do normalization on numerical features?","text":"<p>In order to eliminate the magnitude impact between features, we should always do normalization to the features that we use, i.e. to uniformly normalize all the features to a similar range, so that it could help compare between different metrics. There are two different types of normalization that people most commonly use: - min-max scaling: It linearly changes the original data so that the data could be projected to [0, 1] range so that it is an equal ratio transformation of the original data: \\(\\(X_{\\text{norm}} = \\frac{X-X_{\\text{min}}}{X_{\\text{max}-X_{\\text{min}}}}\\)\\) - Z-Score normalization: It would project the original data to a mean of 0 and variance = 1 distribution. Specifically, assume that the original feature has mean \\(\\mu\\) and variance \\(\\sigma\\) , then the normalization equation would be defined as: \\(\\(Z = \\frac{x-\\mu}{\\sigma}\\)\\)  Using stochastic gradient descent (SGD) as an example, when two numerical features, \\(x_1\\) of range [0,10] and \\(x_2\\) of range [0,3], then when the \\(x_1\\) and \\(x_2\\) are not normalized, the  gradient descent would not be as efficient as when one does the normalization of the features. However, feature normalization is not always working. In real life,  whenever a model utilizes SGD, it is suggested to use the normalization, including linear regression, logistic regression, support vector machine, neural networks, whereas decision tress it does not help.  As for decision tree models, the node split usually is determined by the data and how much <sup>1</sup>information gain ratio that data contains about X. This information gain ratio is not impacted by whether the feature has been normalized, rather it would not change the information gain of the specific feature X.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#categorical-features","title":"Categorical Features","text":"<p>Categorical features include male / female, blood type (A,B,AB,O) and etc, which can only select values from a finite set of choices. Categorical features original input are mostly strings. Despite that decision trees and some other numbers of models can directly take in the strings, for logistic regression or SVM models, the categorical features need to be translated to numerical form so that they could properly work.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-do-feature-engineering-on-categorical-features","title":"How to do feature engineering on categorical features?","text":"<p>One would need to encode the features to a higher dimensional vector to represent them in the model. - ordinal encoding: usually used to treat those data that has ordinal sequence, for example when scoring we have high &gt; middle &gt; low, then the ordinal encoder would help to describe this type of sequence via giving it a numerical ID. For example, we could represent high as 3, middle as 2 and low as 1 in this case, which helps retain the high to low relationship. - one-hot encoding: usually used to treat features that do not have ordinal relationships, for example, for blood type, one could directly use the [1,0,0,0], [0,1,0,0], [0,0,1,0] and [0,0,0,1] to represent the different types. Note:     - use of sparse vector for saving space     - high-dimensional features can be difficult in following scenarios: 1) K-nearest neighbors, the distance between two high-dimensional vectors can be hard to measure, 2) logistic regression, the parameters can increase with higher dimensions, thus causing overfitting problems and 3) only some of the dimensions could be helpful when doing clustering or predictions, so one could think to reduce dimensions with feature selections. - binary encoding: using binary to do a hash mapping on the original category ID, this can help save space when comparing with the one-hot encoding as it is usually of fewer dimensions.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#high-dimensional-feature-crosses","title":"High Dimensional Feature Crosses","text":""},{"location":"ml_fundamentals/ML_fundamentals/#what-are-feature-crosses-and-how-to-deal-with-high-dimensional-feature-crosses","title":"What are feature crosses? And how to deal with high-dimensional feature crosses?","text":"<p>Using single features to combine them together via dot-product or inner-product, one can get a combination of two features to help represent nonlinear relationships.</p> <p>Using logistic regression as an example, when a data set contains feature vector \\(X=(x_1, x_2, ..., x_k)\\) then one would have \\(Y = \\text{sigmoid}(\\sum_i \\sum_j w_{ij} \\langle x_i, x_j \\rangle)\\) . \\(w_{ij}\\) is of dimension \\(n_{x_i} \\cdot n_{x_j}\\) . But when \\(n_{x_i} \\times n_{x_j}\\) is huge, especially in use cases of website customers and number of goods, this can be really huge dimension. So **one way to get around this is to use a k-dimensional low-dimension vector (k &lt;&lt; m, k &lt;&lt; n). Now,  \\(w_{ij} = x_i' \\cdot x_j'\\) and now the number of parameters one needs to tune is \\(m \\times k + n \\times k\\) . This can also be viewed as the <sup>2</sup>matrix vectorization, that has been widely used in the recommendation systems. **</p> <p>We have understood how to use dimension reduction to reduce the number of parameters that the model needs to learn given a feature cross of two high-dimensional features.  But in reality, we are facing a variety of high-dimensional features. So a single feature crosses of all the different pairs would induce 1) too many parameters and 2) overfitting issues. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-effectively-select-the-feature-combinations","title":"How to effectively select the feature combinations?","text":"<p>We introduce a feature cross selection based on decision tree models. Taking CTR prediction as an example, assume that the input includes age, gender, user type (free vs paid), searched item type (skincare vs foods), etc. We could thus make a decision tree from the original input and their labels.  We could then view the feature crosses from the tree, that contains four different type of pairs: 1. age + gender 2. age + searched item type 3. paid user + search item type 4. paid user + age How to best construct the decision trees? One can use the Gradient Boosting Decision Tree\u00ef\u00bc\u0152GBDT or use the link to get a better idea of the algorithm. The idea behind is that whenever before constructing a decision tree, we first calculate the error from the true value and iteratively construct the tree from the error.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#textual-descriptive-models","title":"Textual Descriptive Models","text":"<p>Related Content: Ngram_Language_Modeling</p> <p>Text is a category of unstructured data. How to work with textual data has always been one of the most important research directions.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-of-the-textual-descriptive-models-what-pros-and-cons-each-have","title":"What are some of the textual descriptive models what pros and cons each have?","text":"<ul> <li>Bag of words: Consider each article as a bag of words, ignoring the sequence of how each word appears. Specifically, it separates the entire paragraph of texts at word unit and represent each paragraph as a long vector. Each dimension in the vector is a word, and the weight represents how important the word is in the original article. </li> <li>TF-IDF (Term Frequency-Inverse Document Frequency): Is often used to calculate the weight of the words, \\(\\text{TF-IDF}(t,d)=\\text{TF}(t,d) \\times \\text{IDF}(t)\\) , where \\(\\text{TF}(t,d)\\) represents the frequency of word t in document d, whereas \\(\\text{IDF}(t)\\) is the reverse document frequency to measure word t's importance in grammar, corresponds to equation \\(\\(\\text{IDF}(t) = log^{\\frac{\\text{total article}}{\\text{total article that contains word} t +1}}\\)\\) the general meaning behind is that if a word appears so in various articles, then it means that it is a commonly used word, hence it would not contribute much in differentiating the specific meaning behind each articles, hence it should be penalized when weighting.</li> <li>N-gram: when \"natural language processing\" being separated into 3 words as word unit, the meaning of this phrase is totally different from it is now, hence usually we could add n words as a feature unit into the vector to form the N-gram model. </li> <li>Topic Model</li> <li>Word Embedding: word embedding is a family of word vector models, the main idea is to project each word to a low-dimensional space (K = 50 -300 dimensions) using a dense vector. Each dimension in K-dimension would be viewed as a implicit topic.  In general, in shallow learning models (traditional ML models), a good feature engineering step can help extremely good performance. Deep learning on the other hand, could help us with an automated feature engineering way via hidden layers. Hence, it makes sense for the deep learning model to beat the shallow learning model in general. Recurrent neural network and convolutional neural network are both good at capture the characteristics of the text while lowering the number of parameters that the model needs to learn, which can expedite the speed of training and also lower the risk of overfitting. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#word2vec","title":"Word2Vec","text":"<p>One of the most common word embedding models, it is actually a shallow neural network. It can be of two different types of structures:  1. Continuous Bag of Words 2. Skip-gram</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-does-word2vec-work-what-is-the-difference-between-word2vec-and-lda-latent-dirichlet-allocation","title":"How does word2vec work? what is the difference between word2vec and LDA (Latent Dirichlet allocation)","text":"<ul> <li>Continuous Bag of Words<ul> <li>Goal is to use contextual words that predict the probability of the current word to appear.</li> <li>Structure: <ul> <li>input layer: w(t-2), w(t-1), ..., w(t+1), w(t+2) using one-hot encoding</li> <li>projection/hidden layer: sum(probability)</li> <li>output layer: w(t) using softmax</li> </ul> </li> </ul> </li> <li>Skip-gram<ul> <li>Goal is to use the current word to predict the probability of each contextual word.</li> <li>Structure:<ul> <li>input layer: w(t) using one-hot encoding</li> <li>projection/hidden layer</li> <li>output layer: w(t-2), w(t-1), ..., w(t+1), w(t+2) using softmax</li> </ul> </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#image-data-not-sufficient-cold-start","title":"Image Data not sufficient - Cold Start","text":"<p>When doing machine learning modeling, one very big problem that everyone may face would be not sufficient training data. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-would-you-do-if-the-training-data-is-not-sufficient-how-to-mitigate-this-issue","title":"What would you do if the training data is not sufficient? How to mitigate this issue?","text":"<p>Information that a model can provide include 1) information from training and 2) heuristic information that people provide from model formation (including design / learn / deduct). When training data not enough, it means that the model lacks information from training data, but need more a priori. a priori can be effective on models, including certain internal structure of the model, assumption or constraints. a priori can also be applied to datasets, for example using certain assumption to change / tune or expand the training data so it contains more effective information, which can facilitate model training and learning.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#overfitting","title":"Overfitting","text":"<p>One big problem that comes from not enough data is overfitting, which is that the model performs well on training set but the evaluation / prediction set is not good. The treatment can come from two different categories: - methods based on models that decrease the risk of overfitting     - simplify model - downgrade from non-linear to linear model     - apply constraints to shrink hypothesis space - L1 / L2 regularization     - integrated training     - dropout hyperparameters - data augmentation: manipulating data to expand the data set     - image space manipulation         - rotation / shrinkage / expansion / crop of the original image when working with image data         - addition of noise to the image         - color change of image         - hue / contract / brightness of image     - image feature engineering / extraction         - data expansion or #over-sampling via SMOTE (Synthetic Minority Over-sampling Technique)         - using GAN or other generative methods for good samples     - transfer learning from other models and data         - using pre-trained general model from big dataset, we could fine-tune specifically using the small datasets</p>"},{"location":"ml_fundamentals/ML_fundamentals/#model-evaluation","title":"Model Evaluation","text":""},{"location":"ml_fundamentals/ML_fundamentals/#evaluation-metrics-and-their-limitations","title":"Evaluation metrics and their limitations","text":"<p>When doing model evaluation, the classification / sort / regression problems seems to always use different metrics for evaluation. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#accuracy-and-its-limitations","title":"Accuracy and its limitations","text":"<p>The accuracy only measures the number of correct labels divided by the number of total labels. This can potentially lead to a issue when the number of labels are limited in the dataset. When negative samples composed 99% of the data, if every label is a negative one, we still get 99% accuracy. So, if we use more effective mean accuracy that quantifies the mean accuracy under each category, it would be a better metrics to work with.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#precision-recall-and-their-balance","title":"Precision &amp; Recall and their balance","text":""},{"location":"ml_fundamentals/ML_fundamentals/#concept-of-precision-recall","title":"Concept of Precision &amp; Recall","text":"<p>Now we need to introduce the concept of precision and recall.  Precision cares about the correctness of positive predictions, whereas recall cares about coverage of actual positives.  Precision and recall trade off via the decision threshold. In a binary classification problem: $$\\text{Precision} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false positive}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{positive predictions}}} $$</p> <p>$$\\text{Recall} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false negative}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{actual positives}}} $$ The F1 score is their harmonic mean: $$\\text{F1} = \\frac{2(\\text{Precision})(\\text{Recall})}{\\text{Precision} + \\text{Recall}} = \\frac{2N_{\\text{true positive}}}{2N_{\\text{true positive}}+N_{\\text{false positive}}+N_{\\text{false negative}}} $$ this value ranges from 0 to 1 and penalizes imbalance, thus when either precision or recall is low, F1 drops sharply.  F1 should be used when false positives and false negatives matter about equally, especially with imbalanced classes. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#confusion-matrix-implementation","title":"Confusion Matrix Implementation","text":"<pre><code>import numpy as np\n\ntrue_labels = np.array([0, 0, 1, 1, 0, 1, 0, 1, 1, 1])\npredicted_labels = np.array([0, 1, 0, 1, 0, 1, 1, 1, 1, 0])\n\nTP = np.sum((predicted_labels == 1) &amp; (true_labels == 1))\nTN = np.sum((predicted_labels == 0) &amp; (true_labels == 0))\nFP = np.sum((predicted_labels == 1) &amp; (true_labels == 0))\nFN = np.sum((predicted_labels == 0) &amp; (true_labels == 1))\n\nprint(\"Confusion Matrix:\\n TP: \", TP, \"\\tFP: \", FP, \"\\n FN: \", FN, \"\\tTN: \", TN)\n\n'''Output:\nConfusion Matrix:\n TP:  4     FP:  2 \n FN:  2     TN:  2\n'''\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#precision-recall-in-ranking-retrieval-variants","title":"Precision &amp; Recall in Ranking / retrieval variants","text":"<pre><code>def precision_at_k(ground_truth_set, ranked_list, k):\n    return len(set(ranked_list[:k]) &amp; ground_truth_set) / k\n</code></pre> <p><pre><code># when there are more than one query / user / example that we would like to test on our predictions, we use the weighted average of the precision_at_k.\ndef mean_precision_at_k(ground_truth_sets, ranked_lists, k):\n    # ground_truth_sets and ranked_lists are aligned lists\n    return sum(precision_at_k(g, r, k) for g, r in zip(ground_truth_sets, ranked_lists)) / len(ground_truth_sets)\n</code></pre> - Precision@k for one case \\(q\\) (one list). - Mean Precision@k average of those values over all cases \\(q \\in Q\\).</p> <p>Example: when dealing with video vague search functionality, it seems that the search ranking model can return the top 5 precision pretty high, however, the user in reality still cannot find the videos they want, especially those unpopular ones. Where does this problem coming from?</p> <p>Root cause analysis: Coming back to the example above, the top 5 precision being really high, meaning that the model can get the true positive results on a pretty good level with a certain set of positive predictions; however, when it comes down to cases where users would like to find not so popular videos, the precision of ranks can be rather no so useful as the user is looking for not so well-defined labels, hence the good precision of popular videos would not be helpful for this case as model is not providing all the relevant videos to the user and this is a problem of not so good recall rate.  Let's say for the top 5 results, the precision@5 to be 100%, meaning that the correctness of the positive results is pretty higher, however, the recall@5 can still be 5%, meaning that only predicted 5 true positives although there are 100 actual positives involved. When doing model evaluation, it means that we should be focusing on both precision and recall, and also using different top N values for observations. </p> <p>Hence, in general, when people evaluate the goodness of a sort algorithm, they also look at the P-R curve, where in this curve, the x-axis corresponds to recall rate whereas the y-axis corresponds to precision rate. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#use-of-p-r-curve-for-model-evaluation-and-threshold-choice","title":"Use of P-R Curve for model evaluation and threshold choice","text":"<p> Each data point on the curve corresponds to a precision-recall combination at a certain threshold for True samples of choice, for example 0.95 / 0.9, etc. The closer to the origin (0,0) point, the bigger the threshold is.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-pick-the-threshold-in-practice","title":"How to pick the threshold in practice","text":"<ul> <li>Capacity-constrained: If reviewers can handle 300 cases/day, pick the smallest threshold that yields \u00e2\u2030\u02c6300 flags/day; report the resulting (Precision, Recall).</li> <li>Recall target: If policy demands \u00e2\u2030\u00a595% recall, choose the lowest threshold achieving that, then report precision (and expected review load).</li> <li>Cost-based: Minimize \\(\\text{Cost}_{\\text{false positives}}\\cdot{\\text{False Positives}}+\\text{Cost}_{\\text{false negatives}}\\cdot{\\text{False Negatives}}\\) over thresholds. Also report AUPRC to compare models independent of a single threshold (higher is better, especially with class imbalance).</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#root-mean-squared-errors-rmse","title":"Root-mean Squared Errors (RMSE)","text":"\\[ RMSE = \\sqrt{\\frac{\\sum_{i=1}^{n}{(y_i - \\hat y_i)^2}}{n}} \\] <p>Root-mean squared error has long been used as the metric for evaluating the regression model.</p> <p>Example: as a streaming company, one would say that prediction of traffic for each series can be really important when it comes down to ads bidding and user expansion. One would like to use a regression model to predict the traffic trend of a certain series, but whatever regression model that one uses, the RMSE metric ends up being really high. But, in reality, the model 95% of the time predict error is less than 1%, with really good prediction results. What might be the reason of this extraordinarily good results?</p> <p>Root cause analysis: From what the example, says there are two possible ways for the RMSE to be ineffective: 1) n being really small hence at this moment, the calculated error cannot be measurable anymore, 2) all the errors between actual value and predicted value are over- / under-predicting that the summation at the end being really high, however, in reality it is not the case and 3) one outlier being really off when comparing with other data points, it is contaminating the RMSE to be really big.  Coming back to the question, as 95% of the time to model has really good prediction error hence it means the other 5% of the time the model can be really off with big outliers and it could happen when a series with small traffic / newly come-out / newly accoladed could produce this big error.</p> <p>How to solve: 1) When we think these outliers are noises, then we need to filter them out at the early stage when doing data cleaning, 2) If we do not think they are noises, then we need to further improve the prediction capability of our algorithm so that we could somehow model the formation of these outliers. and 3) We could also use a better metric for the model evaluation. There are indeed better evaluation metrics that are of better robustness than RMSE, for example, Mean Absolute Percentage Error (MAPE):</p>"},{"location":"ml_fundamentals/ML_fundamentals/#mean-absolute-percentage-error","title":"Mean Absolute Percentage Error","text":"\\[MAPE = \\sum_{i=1}^n{|\\frac{(y_i - \\hat y_i)}{y_i}|\\cdot\\frac{100}{n}}\\] <p>When comparing with RMSE, MAPE normalizes the error rate of each data point to mitigate the outlier impact from the absolute error.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#expanding-on-the-regression-evaluation-metrics","title":"Expanding on the regression evaluation metrics","text":""},{"location":"ml_fundamentals/ML_fundamentals/#quick-definitions","title":"Quick definitions","text":"<p>Let \\(y\\) be the true value and \\(\\hat y\\)\u00e2\u20ac\u2039 the prediction.   sMAPE (common form):  \\(\\(\\frac{100}{n}\\sum\\frac{2|y-\\hat y|}{|y|+|\\hat y|}\\)\\)</p>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-which","title":"When to use which","text":"<ul> <li>Use RMSE when:<ul> <li>Big errors are much worse than small ones (squared penalty).</li> <li>The target never hits zero/near-zero and units are meaningful (e.g., dollars, \u00c2\u00b0C).</li> <li>You care about calibration and smooth optimization (differentiable).</li> </ul> </li> <li>Use MAPE when:<ul> <li>Stakeholders want an average percentage error that is easy to read.</li> <li>True values are strictly positive and not near zero (e.g., revenue, demand &gt; 0).</li> <li>You're okay that over-forecasts and under-forecasts are weighted differently (MAPE tends to penalize under-forecasting less when \\(y\\) is small).</li> </ul> </li> <li>Use sMAPE when:<ul> <li>You want a percentage-like metric that is less explosive near zero than MAPE.</li> <li>You have occasional zeros or tiny values.</li> <li>You accept that sMAPE has its own quirks (bounded but not perfectly symmetric in practice).</li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#strengths-gotchas-tldr","title":"Strengths &amp; gotchas (TL;DR)","text":"<ul> <li>RMSE<ul> <li>Sensitive to large mistakes (good if that matches cost).</li> <li>Outlier-heavy data can dominate the score.</li> <li>Scale-dependent hard to compare across series with different scales.</li> </ul> </li> <li>MAPE<ul> <li>Intuitive (%).</li> <li>Undefined at y=0; huge when y ~ 0.</li> <li>Can favor under-forecasting for small y.</li> </ul> </li> <li>sMAPE<ul> <li>Handles zeros better; bounded.        </li> <li>Still quirky near zero and not a true solution for optimization.</li> <li>Different papers/tools use slightly different variants</li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#other-basic-metrics-you-should-know","title":"Other basic metrics you should know","text":"<ul> <li>MAE: Robust to outliers vs RMSE; easy to explain (units).</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#simple-decision-guide","title":"Simple decision guide","text":"<ol> <li>Zeros or tiny targets?<ul> <li>Avoid plain MAPE. Prefer sMAPE</li> </ul> </li> <li>Large errors are very costly?<ul> <li>Use RMSE (or set a business-weighted loss).</li> </ul> </li> <li>Need % interpretability across series?<ul> <li>Use sMAPE, or MASE (if comparing to a baseline).</li> </ul> </li> <li>Care about relative ratios?<ul> <li>Use RMSLE/MSLE (with positive targets).</li> </ul> </li> <li>Mixed scales or many series?<ul> <li>WAPE or MASE are safe, comparable choices.</li> </ul> </li> </ol>"},{"location":"ml_fundamentals/ML_fundamentals/#practical-tips","title":"Practical tips","text":"<ul> <li>If you must report a % and have zeros, say: We use sMAPE (formula shown) instead of MAPE to handle zeros; we also report WAPE for scale-free comparability.</li> <li>Always state the exact formula you use (especially for sMAPE) to avoid confusion.</li> <li>Consider reporting two metrics: one business-facing (% like WAPE/sMAPE) + one technical (MAE/RMSE).</li> </ul> <p>Overall, one should always report a pair / set of MECE metrics to evaluate their algorithms to better understand &amp; discover the problems in the model, to better solve cases in real business settings.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#roc-curves","title":"ROC Curves","text":"<p>Binary classifiers are the mostly used and applied classifier in the ML industry. There are a lot of different metrics that one could use for evaluate the binary classifiers, including precision, recall, F1 score and P-R curve. But these metrics are only reflecting one aspect of the model. Hence, ROC curves can be of really good use. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-a-roc-curve","title":"What is a ROC curve","text":"<p>ROC curves are called receiver Operating Characteristic Curves, which established from the military field and are often used in the medical industry as well. This curve's x-axis is the false positive rate, whereas the y-axis is the true-positive rate. </p> <p>\\(\\(\\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}}\\)\\) \\(\\(\\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}}\\)\\) Example: There are 10 patients, where in there are 3 positive cancer patients, and the rest are negative patients. The hospital decides to do diagnosis on these customers and figured that 2 are true positive cancer patients. In this case:</p> \\[\\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}} = \\frac{1}{7}$$ $$\\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}}=\\frac{2}{3}\\]"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-draw-a-roc-curve","title":"How to draw a ROC curve","text":"<ul> <li>What is needed<ul> <li>True labels \\(y \\in \\{0,1\\}\\)</li> <li>A score for the positive class per item (probability or decision score).  </li> </ul> </li> </ul> Sample Number True Label Model Output Probability as Positive 1 Positive 0.9 2 Positive 0.8 3 Negative 0.7 <p>From this example, we could then plot out the true positive rate (TPR) as the x-axis and false positive rate (FPR) as the y-axis for the curve, hence getting the ROC curve. There is a more direct way to plot the ROC curve as well:</p> <ul> <li>Getting the number of Positive &amp; Negative samples, i.e. assuming number of positive samples to be P and negative to be N.</li> <li>Getting the x-axis labels to be the count of negative samples, and y-axis labels to be the count of positive samples, then use the model output probability to do sorting of the samples</li> <li>Now draw the ROC curve from origin, whenever seeing a positive sample to draw a vertical line segment of +1 increment on y-axis, whenever seeing a negative sample then we draw a horizontal line segment along the x-axis until we reach the final sample with curve ending at (1,1).</li> </ul> <pre><code>from matplotlib import pyplot as plt\nfrom numpy import random\n\ntruth_labels = [1 if random.rand() &gt; 0.6 else 0 for _ in range(500)]\n# we generate some random predictions that would normally be obtained from the model\n# If a predicted probability is higher than the threshold, it is considered to be a positive outcome \npredicted_probs = [max(0, min(1, random.normal(loc=label, scale=0.3))) for label in truth_labels]\n\ndef roc_curve(truth_labels, predicted_probs):\n    thresholds = [0.1 * i for i in range(11)]\n    tprs, fprs = [], []\n    for threshold in thresholds:\n        tp = fp = tn = fn = 0  # initialize confusion matrix counts\n        # for each prediction\n        for i in range(len(truth_labels)):\n            # calculate confusion matrix counts\n            if predicted_probs[i] &gt;= threshold:\n                if truth_labels[i] == 1:\n                    tp += 1\n                else:\n                    fp += 1\n            else:\n                if truth_labels[i] == 1:\n                    fn += 1\n                else:\n                    tn += 1\n        # track the TPR and FPR for this threshold\n        tprs.append(tp / (tp + fn))  # True Positive Rate (TPR)\n        fprs.append(fp / (tn + fp))  # False Positive Rate (FPR)\n    return tprs, fprs\n\n\ntprs, fprs = roc_curve(truth_labels, predicted_probs)\nplt.plot(fprs, tprs, marker='.')\nplt.show()\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-calculate-the-auc-area-under-curve","title":"How to calculate the AUC (area under curve)?","text":"<p>As simple as it could be, AUC is the area under the ROC curve, which can quantitatively reflect the model performance based on ROC curve. It is simple to calculate AUC along RUC x-axis. Due to that ROC curve tends to be above y=x, AUC values are usually between 0.5-1. The bigger the AUC is, the better the classifier is as the more likely that the classifier put the true positive samples at the front. </p> <pre><code>def compute_aucroc(tprs, fprs):\n    aucroc = 0\n    for i in range(1, len(tprs)):\n        aucroc += 0.5 * abs(fprs[i] - fprs[i - 1]) * (tprs[i] + tprs[i - 1])\n    return aucroc\n\naucroc = compute_aucroc(tprs, fprs)\nprint(f\"The AUC-ROC value is: {aucroc}\")  # The AUC-ROC value is: 0.9827272125066242\n</code></pre> <p>We have touched on the P-R curve for evaluating classification or sort algorithms. Comparing with P-R curve, there is one important character of ROC curve, which is that when positive / negative sample distribution change significant, the ROC curve shape could stay rather consistently whereas the P-R curve shape would be changing. This makes the ROC curve to mitigate the interference from diverse test sets and could more objectively evaluate the algorithm. In reality, when positive counts are much less than the negative counts, when switching dataset the data can be of big change, so a stable and robust evaluation would be important. Hence, usually ROC can be used in more variety of scenarios and could be utilized in sort / recommendation / ads. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-each-curve-shows","title":"What each curve shows","text":"<ul> <li>ROC: y = True Positive Rate (recall), x = False Positive Rate. \"How well do I separate positives from negatives overall?\"     _\"If I take the items my model flags as positive, how many are actually positive?</li> <li>PR: y = Precision, x = Recall. \"When I go after positives, how clean are my catches?\"     _\"As I move the threshold, how well do I trade off catching positives vs accidentally flagging negatives?\"</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-which_1","title":"When to use which","text":"<ul> <li>Use PR (Precision &amp; Recall) when positives are rare or review capacity is limited.     Examples: fraud, disease screening, anomaly detection, search/retrieval, human-in-the-loop queues.     Why: PR focuses on the quality of retrieved positives. Baseline matters: random AUPRC prevalence (e.g., 1% positives random AUPRC = 0.01).</li> <li>Use ROC when classes are roughly balanced or you care about both error types evenly.     Examples: many general classifiers, spam vs ham with moderate prevalence, A/B classifiers in balanced datasets.     Why: ROC is insensitive to class imbalance and summarizes ranking quality across thresholds. Random AUC-ROC = 0.5.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#intuition-about-imbalance","title":"Intuition about imbalance","text":"<ul> <li>With 1,000,000 negatives and 1,000 positives, an FPR of 0.5% looks tiny on ROC, but it's 5,000 false alarms precision will be poor.     PR makes this visible; ROC can look deceptively great.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#how-to-choose-in-practice","title":"How to choose in practice","text":"<ul> <li>Rare positives or ops-constrained? Prefer PR (and report Precision/Recall at your operating threshold or Precision@k).</li> <li>Balanced costs/distribution? ROC is fine (and stable).</li> <li>Comparing models broadly? Report both AUC-ROC and AUPRC, plus a point metric at your intended threshold.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#reading-the-curves","title":"Reading the curves","text":"<ul> <li>ROC: closer to top-left is better; AUC near 1 is strong.</li> <li>PR: higher curve is better; sustaining high precision as recall grows is ideal.</li> <li>Curves can cross. Pick the model that\u00e2\u20ac\u2122s better in the recall region you care about (e.g., recall \u00e2\u2030\u00a5 0.9). Consider partial AUC (ROC) or AUPRC over a recall range.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-to-report-good-default","title":"What to report (good default)","text":"<ul> <li>AUPRC + AUC-ROC (global picture)</li> <li>(Precision, Recall) (or \\(F_\\beta\\)) at the chosen threshold</li> <li>If capacity-limited: Precision@k (and expected volume flagged)</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#use-of-cosine-distance","title":"Use of cosine distance","text":"<p>How to evaluate the distance between samples can also define the optimization target and training method. In ML problems, we usually take the features to be of vector form, so when analyzing the two feature vector similarity, we could use cosine similarity. The cosine similarity can range from -1 to 1, where when two vectors are exactly the same, the cosine similarity becomes 1. Hence, when looking at distances, 1-cosine similarity becomes the cosine distance. Overall, the cosine distance is [0,2] and the same two vectors their cosine distance becomes 0.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#definition-of-euclidean-distance-cosine-distance","title":"Definition of Euclidean Distance &amp; Cosine Distance","text":"<p>Euclidean Distance For vectors \\(x,y\\in\\mathbb{R}^d\\):</p> \\[d_{\\text{Euc}}(x,y)=\\sqrt{\\sum_{i=1}^{d}(x_i-y_i)^2} \\in [0,\\infty) \\] <ul> <li>What it measures: straight-line (L2) distance in space.</li> <li>Sensitive to scale/magnitude: doubling a vector doubles distances.</li> <li>Squared form: sometimes use \\(\\|x-y\\|^2\\) (no square root) for speed/convexity.~</li> </ul> <p>Cosine Distance Start with cosine similarity:</p> \\[\\text{cos\\_sim}(x,y)=\\frac{x\\cdot y}{\\|x\\|\\,\\|y\\|}\\in[-1,1]\\] <p>Cosine distance (common definition): \\(\\(d_{\\text{cos}}(x,y)=1-\\text{cos\\_sim}(x,y)\\in[0,2]\\)\\)</p> <ul> <li>What it measures: difference in direction (angle) only.</li> <li>Scale-invariant: multiplying a vector by a positive constant doesn\u00e2\u20ac\u2122t change it.</li> </ul> <p>Overall, on unit vectors, Euclidean and cosine distances are monotonic transforms. Also, on a unit circle, one would see: \\(\\(\\|A-B\\|=\\sqrt{2(1-cos(A,B))}\\)\\) - When to use which     - Use Euclidean when magnitude matters (e.g., real spatial distances, continuous features with meaningful scales).     - Use Cosine when orientation matters more than length (e.g., text/image embeddings, TF-IDF vectors).</p>"},{"location":"ml_fundamentals/ML_fundamentals/#when-to-use-cosine-similarity-but-not-euclidean-distance","title":"When to use cosine similarity but not Euclidean distance?","text":"<p>For two vectors A and B, when their cosine similarity are being defined as \\(cos(A,B)=\\frac{A\\cdot B}{\\|A\\|_2 \\|B\\|_2}\\) , i.e. the cosine of angle between two vectors, we thus measure the angular distance between them, rather than the absolute magnitude, with the range being [-1,1]. When a pair of text being very different in length, but with similar content, if using Euclidean distance, one can think their distance being pretty big whereas when using cosine similarity, the angle between the two can be rather small, hence giving high similarity. In text, visual, video, image industries, when the objective has high dimensions, cosine can still retain its character of [-1,1] whereas the Euclidean distance number can be really big. </p> <p>Overall, Euclidean distance measures the absolute difference between numbers whereas the cosine distance measures the directional relative difference.  </p> <p>Taking an example of measuring user behavior of watching two different TV series:     - user A's watch vector = (0,1)     - user B's watch vector = (1,0) It is obvious that the cosine distance between the two can be really big whereas their Euclidean distance is small. </p> <p>When measuring user A/B preference, we focus more on relative difference, hence we should be using the cosine distance whereas when we are analyzing user login frequency or activity, we should be using Euclidean distance instead as the cosine distance would think two users of vector (1,10) and (10,100) are more similar to each other.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#is-cosine-distance-a-strictly-defined-distance","title":"Is cosine distance a strictly defined distance?","text":"<p>No, it is not strictly defined as it satisfies the Non-negativity &amp; identity (strictness), symmetry but does not satisfy the triangle inequality. A use case of this question is that when reading the word vector of <code>comedy</code> and <code>funny</code> and also <code>happy</code> and <code>funny</code>, their cosine distance is &lt; 0.3, whereas the distance between <code>comedy</code>and <code>happy</code> is 0.7. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#model-evaluation-methods","title":"Model Evaluation Methods","text":"<p>In ML algorithm design, we usually split the samples into training and test data set, where the training set is used to training the model and the test set is used to evaluate the model. In sample split and model evaluation process, we could use different sampling or evaluation methods. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#in-model-evaluation-what-are-the-main-evaluation-methods-what-are-their-pros-and-cons","title":"In model evaluation, what are the main evaluation methods, what are their pros and cons?","text":"<ul> <li>Holdout evaluation: Holdout evaluation is the easiest way as it randomly split the original sample set into training and evaluation. For example, for a clickthrough rate prediction algorithm, we split the samples into 70 - 30%. We use the 70% data for model training and the 30% for evaluation, including ROC curve, accuracy calculation and recall rate metric evaluation. This has significant downside: the calculated final evaluation metric is highly correlated with the original data split. In order to eliminate this randomness, researchers started to use the \"cross validation\" idea.</li> <li>cross-validation: k-fold cross validation would always split the data set into k different sets that are of same counts. The method goes through all the k sample sets and always use the current subset as the evaluation set whereas the other ones are training set. usually we use k = 10.</li> <li>Bootstrap: <ul> <li>Make a fake test set by randomly picking the same number of rows from your real test set with replacement (so rows can repeat and some are left out).<ul> <li>Suppose the test set has n rows.</li> <li>Pick n indices at random WITH replacement from <code>0..n-1</code>. (Duplicates allowed; some rows won't be picked.)</li> <li>Those picked rows form one fake test set. </li> </ul> </li> <li>On that fake set, compute your metric (accuracy, F1, AUC, RMSE whatever you care about).</li> <li>Repeat steps 1-2 a lot (like 1,000 times).</li> <li>Now you have 1,000 metric values.<ul> <li>The average is your central estimate.</li> <li>The middle 95% range (ignore the lowest 2.5% and highest 2.5%) is your 95% confidence interval. As \\(n\\) gets large, about 36.8% of items are not in the set (never selected) and 63.2% appear at least once. This is the source of the bootstrap terminology</li> </ul> </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#hyperparameter-tuning","title":"Hyperparameter tuning","text":"<p>For a lot of algorithm engineers, hyperparameter tuning can be really of headache, as there is no other way other than empirically tune the parameters to a reasonable range, while it is really important for the algorithm to be effective.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-of-the-common-ways-of-hyperparameter-tuning","title":"What are some of the common ways of hyperparameter tuning?","text":"<ul> <li>grid search: Exhaustive on a small, low-dimensional space. Deterministic but expensive; scales poorly. In reality, it tend to be used as a bigger search space and larger step size to find the possible range of optimal results, then to shrink the search space and find more accurate optimal solution.</li> <li>random search: Sample hyperparams at random (often log-uniform for learning rates). Much better than grid when only a few dims matter but cannot guarantee for a optimal solution.</li> <li>Bayesian optimization: Model config -&gt;score to pick promising next trials. Unlike random/grid search do not learn from past trials, BO uses what you have learned so far to place the next (expensive) trial where it is most likely to pay off.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#overfit-and-underfit","title":"Overfit and Underfit","text":"<p>This section tells how one could efficiently recognize overfit and underfit scenarios and do model improvements based on what has been identified. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-overfit-and-what-is-underfit","title":"What is overfit and what is underfit?","text":"<ul> <li>Overfit means that a model can be overfitting on its training data whereas on the test and new data sets, it's performing worse. </li> <li>Underfit means that the model is performing illy on both training and test data sets. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-are-some-ways-to-mitigate-the-overfit-and-underfit","title":"What are some ways to mitigate the overfit and underfit?","text":"<ul> <li>Avoid overfit: <ul> <li>Data: obtaining more data is one primitive way of solving overfit problem as more data can help the model to learn more efficient features to mitigate the impact from noise. Using rotation or expansion for image or GAN for getting more new training data.</li> <li>Model: one could use less complicated / complex model to avoid overfitting. For example, in NN one could reduce the number of layers or neurons in each layer; or in decision tree, one could reduce the depth of the tree or cut the tree.</li> <li>Regularization: one could use L2 regularization in model parameters to constraint the model. </li> <li>ensemble method: ensemble method is to integrate multiple models together to avoid a single model overfitting issue, such as bagging methods.</li> </ul> </li> <li>Avoid underfit:<ul> <li>add more features: when there is not enough features or the features are not relevant with the sample labels, there would be a underfit. We could dig into contextual features / ID features / combination of features to obtain better results. In deep learning, factor decomposition / gradient-boosted decision tree / deep-crossing can all be used for get more features.</li> <li>increase the complexity of model. </li> <li>decrease regularization parameters. </li> </ul> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#early-stoppings","title":"Early Stoppings","text":"<ul> <li>Early stopping watches validation loss/metric and halts training when it stops improving, and is a stopping rule driven by the validation metric\u2019s change, not a pre-fixed iteration count</li> <li>It reduces overfitting (lower variance) by not letting the model memorize noise; acts like implicit L2 regularization. Train while checking performance on a validation set. Whenever the validation score improves, remember those weights. If it doesn\u2019t improve for a while (patience), stop and roll back to the best checkpoint. This caps model complexity at the point where it generalized best, preventing the later epochs from fitting noise</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#l2-l1-regularization","title":"L2 / L1 Regularization","text":""},{"location":"ml_fundamentals/ML_fundamentals/#setup","title":"Setup","text":"<p>Model (no intercept for simplicity):</p> \\[\\hat y_i = w\\,x_i\\] <p>Data loss (sum of squared errors):</p> <p>\\(\\(\\sum_i (y_i - w x_i)^2\\)\\) L2-regularized loss (ridge): \\(\\(\\underbrace{\\sum_i (y_i - w x_i)^2}_{\\text{fit the data}} \\;+\\; \\underbrace{\\lambda\\, w^2}_{\\text{penalize big weights}}\\)\\) - \\(\\lambda&gt;0\\) controls the strength of the penalty (larger \\(\\lambda\\) stronger shrinkage). - In practice, we usually don't penalize the bias/intercept.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#how-l2-penalizes-the-parameter","title":"How L2 Penalizes the Parameter","text":"<p>Take derivative w.r.t. \\(w\\) and set to 0:</p> \\[\\frac{\\partial}{\\partial w}\\Big[\\sum_i (y_i - w x_i)^2 + \\lambda w^2\\Big] = -2\\sum_i x_i(y_i - w x_i) + 2\\lambda w = 0\\] <p>Rearrange: \\(\\(w\\big(\\sum_i x_i^2 + \\lambda\\big) = \\sum_i x_i y_i \\quad\\Rightarrow\\quad \\boxed{\\,w_{\\text{ridge}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2 + \\lambda}\\,}\\)\\) Compare to unregularized OLS: \\(\\(w_{\\text{OLS}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2}\\)\\) L2 adds \\(\\lambda\\) to the denominator and shrinks \\(w\\) toward 0.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#why-l2-decrease-variance-and-increase-bias","title":"Why L2 decrease variance and increase bias?","text":"<p>L2 regularization constrains how large the parameters can get. Constraining parameters makes the fitted function smoother/less wiggly, so predictions don\u2019t swing wildly when the training sample changes\u2014this cuts variance. The tradeoff is that the constrained model can\u2019t perfectly adapt to the true signal, so estimates are pulled toward zero (or toward simpler shapes), which introduces bias.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#tiny-numeric-example","title":"Tiny Numeric Example","text":"<p>Data: \\(x=[0,1,2,3]\\), \\(y=[0,1,2,60]\\) (last point is an outlier) - \\(\\sum x_i^2 = 14, \\sum x_i y_i = 185\\) Weights: - OLS (no L2): \\(185/14 \\approx 13.214\\) - L2, \\(\\lambda=10\\): \\(185/(14+10) = 185/24 \\approx 7.708185\\) - L2, \\(\\lambda=100\\): \\(185/(14+100) = 185/114 \\approx 1.623\\) As \\(\\lambda\\) grows, \\(w\\) is pulled toward 0, limiting the impact of the outlier.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#gradient-descent-view-weight-decay","title":"Gradient-Descent View (Weight Decay)","text":"<p>With learning rate \\(\\eta\\): \\(\\(w_{\\text{new}} = w_{\\text{old}} - \\eta\\Big(\\underbrace{-2\\sum_i x_i(y_i - w_{\\text{old}} x_i)}_{\\text{data gradient}} \\;+\\; \\underbrace{2\\lambda w_{\\text{old}}}_{\\text{L2 shrink}}\\Big)\\)\\)</p> <p>The \\(+2\\lambda w\\) term is the shrinkage that steadily decays weights.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#multi-feature-form-for-reference","title":"Multi-Feature Form (for reference)","text":"<p>For features \\(X\\in \\mathbb{R}^{n\\times d}\\), target \\(\\mathbf{y}\\):</p> \\[\\mathbf{w}_{\\text{ridge}} = (X^\\top X + \\lambda I)^{-1} X^\\top \\mathbf{y}\\]"},{"location":"ml_fundamentals/ML_fundamentals/#copy-paste-python","title":"Copy-Paste Python","text":"<pre><code>import numpy as np\n\nx = np.array([0,1,2,3], dtype=float)\ny = np.array([0,1,2,60], dtype=float)\n\nSxx = np.sum(x**2)\nSxy = np.sum(x*y)\n\ndef ridge_weight(lmbda):\n    return Sxy / (Sxx + lmbda)\n\nprint(\"w_OLS        =\", Sxy / Sxx)\nfor lmbda in [10, 100]:\n    print(f\"w_ridge\", ridge_weight(lmbda))\n</code></pre> <p>Notes - Standardize features before using L2/L1 (esp. linear/logistic). - Tune \\(\\lambda\\) via cross-validation. - Do not penalize the bias term.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#classical-algorithms","title":"Classical Algorithms","text":""},{"location":"ml_fundamentals/ML_fundamentals/#linear-regression","title":"Linear Regression","text":"<p>There are two central provinces in the world of regression: simple linear regression and multiple linear regression. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#formula-of-simple-linear-regression","title":"Formula of Simple Linear Regression","text":"<p>The formula of linear regression can be represented as \\(\\(y=c+m\\cdot x\\)\\) The formula revolves around minimizing residuals. Imagine residuals as the distance between the actual and predicted values of the dependent variable \\(y\\): \\(\\(m = \\frac{\\sum_{i=1}^N{(x_i-\\bar x)(y_i-\\bar y)}}{\\sum_{i=1}^N(x_i-\\bar x)^2}\\)\\) and the constant corresponds to \\(c=\\bar y - m \\cdot\\bar x\\). </p> <pre><code>import numpy as np\n\n# Step 1: Get the data set\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 4, 5, 4, 5])\n\n# Step 2: Compute the mean of the X and y\nmean_x = np.mean(x)\nmean_y = np.mean(y)\n\n# Step 3: Calculate the coefficients\nm = np.sum((x - mean_x) * (y - mean_y)) / np.sum((x - mean_x) ** 2)\nc = mean_y - m * mean_x\n\n# Voila! We have our model\nprint(f\"Model: y = {c} + {m}*x\") \u00a0# Output: Model: y= 2.2 + 0.6*x\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#formula-of-multiple-linear-regression","title":"Formula of Multiple Linear Regression","text":"<p>For simple linear regression formula, we have \\(y=\\beta_0 + \\beta_1x\\), for multiple linear regression, we add multiple independent variables \\(x_1, x_2, ... , x_m\\). Suppose we had n data points, each with m features, then X would be like: \\(\\(\\mathbf{X}=\\begin{bmatrix}   1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\\\   1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\\\ \\end{bmatrix} \\in \\mathbb{R^{n\\times (m+1)}}, \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix} \\in \\mathbb{R^{n\\times 1}}, \\mathbf{\\beta} = \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_m \\end{bmatrix} \\in  \\mathbb{R^{(m+1)\\times 1}}\\)\\) Each row represents the m features for a single data point. The first column with \\(\\mathbf{1}\\)s are the bias / intercept of each equation. The normal equation would be of form \\(\\(\\beta = (X^T X)^{-1}X^Ty\\)\\) The predicted \\(\\hat y\\) values can be represented as \\(\\(\\hat y = (1 \\cdot \\beta_0)+(\\beta_1 \\cdot x_1) + (\\beta_2 \\cdot x_2) + \\dots + (\\beta_m \\cdot x_m)\\)\\) To calculate all the predictions at once, we take the dot product of \\(X\\) and \\(\\beta\\): $$\\mathbf{y} = \\begin{bmatrix} y_1 \\ y_2 \\ \\vdots \\ y_n \\end{bmatrix} = X\\cdot \\beta =\\begin{bmatrix} 1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\ 1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\ \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\ \\beta_1 \\ \\vdots \\ \\beta_m \\end{bmatrix} $$</p>"},{"location":"ml_fundamentals/ML_fundamentals/#linear-regression-model-evaluation","title":"Linear Regression Model Evaluation","text":""},{"location":"ml_fundamentals/ML_fundamentals/#coefficient-of-determination-r2-score","title":"coefficient of determination (\\(R^2\\) score)","text":"<p>\\(\\(R^2=1-\\frac{SS_\\text{residuals}}{SS_\\text{total}} = 1 - \\frac{\\sum_{i=1}^n(y_i - \\hat y_i)^2}{\\sum_{i=1}^n(y_i - \\bar y_i)^2}\\)\\) Where \\(SS_\\text{residuals}\\) denotes the residual sum of squares for predictions and \\(SS_\\text{total}\\) denotes the total sum of squares from actual values. A higher R-squared value / closer to 1 indicates a good model fit.</p> <pre><code>import numpy as np\n# given data\nhousing_data = np.array(\\[\\[1800, 3\\], \\[2400, 4\\],\\[1416, 2\\], \\[3000, 5\\]\\])\nprices = np.array([350000, 475000, 230000, 640000])\n\n# adding 1s to our matrix\n# ones = np.ones(shape=(len(housing_data), 1))\n# X = np.append(ones, housing_data, axis=1)\nX = np.c_[np.ones((len(housing_data),1)),X] # add bias parameter to X\n\n# calculating coefficients\ncoefficients = np.linalg.inv(X.T @ X) @ X.T @ prices\n\n# predicting prices\npredicted_prices = X @ coefficients\n\n# calculating residuals\nresiduals = prices - predicted_prices\n\n# calculating total sum of squares\nsst = np.sum((prices - np.mean(prices)) ** 2)\n\n# calculating residual sum of squares\nssr = np.sum(residuals ** 2)\n\n# calculating R^2\nr2 = 1 - (ssr/sst)\n\nprint(\"Coefficients:\", coefficients)\nprint(\"Predicted prices:\", predicted_prices)\nprint(\"R^2:\", r2)\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#gradient-descent","title":"Gradient Descent","text":"<p>Gradient descent\u00a0is an iterative optimization algorithm for minimizing a function, usually a loss function, quantifying the disparity between predicted and actual results. The goal of gradient descent is to find the parameters that minimize the value of the loss function.</p> <p>Gradient descent derives its name from its working mechanism: taking\u00a0descents\u00a0along the\u00a0gradient. It operates in several iterative steps as follows:</p> <ol> <li>Choose random values for initial parameters.</li> <li>Calculate the cost (the difference between actual and predicted value).</li> <li>Compute the gradient (the steepest slope of the function around that point).</li> <li>Update the parameters using the gradient.</li> <li>Repeat steps 2 to 4 until we reach an acceptable error rate or exhaust the maximum iterations.</li> </ol> <p>A vital component of gradient descent is the learning rate, which determines the size of the descent towards the optimum solution.</p> <p>The first step is to calculate the cost function, which takes the form of \\(\\(J(X, y, \\theta) = \\frac{1}{m}\\sum_{i=1}^m(X\\cdot \\theta - y_i)^2\\)\\) where J is the cost, X is the data, y is the actual values and \\(\\theta\\) is the parameters, \\(m\\) is the length of \\(y\\). It is calculating the mean square error. </p> <pre><code>import numpy as np\n\ndef cost(X, y, theta):\n    m = len(y)\n    predictions = X @ theta\n    cost = (1/m) * np.sum((predictions - y) ** 2)\n    return cost\n</code></pre> <p>The second step is to compute the gradient descent function, which will be updated in the iterative loop: \\(\\(\\theta:=\\theta-\\alpha\\frac{1}{m}X^T\\cdot(X\\cdot \\theta - y)\\)\\) Here \\(\\alpha\\) is the learning rate, which determines the size of steps in the descent and \\(X^T\\) is the transpose of data, which should have been multiplied by 2 but as we take the derivative of the mean squared error we could also consider it to be included as part of the learning rate \\(\\alpha\\). </p> <pre><code>def gradient_descent(X, y, theta, alpha, threshold=0.01):\n\u00a0 \u00a0 m = len(y)\n\u00a0 \u00a0 cost_history = []\n\u00a0 \u00a0 prev_cost = float('inf')\n\u00a0 \u00a0 iterations = 0\n\u00a0 \u00a0 while True:\n\u00a0  \u00a0 \u00a0  prediction = X.dot(theta)\n\u00a0 \u00a0 \u00a0 \u00a0 theta = theta - (alpha / m) * X.T.dot(prediction - y)\n\u00a0 \u00a0 \u00a0 \u00a0 cost = (1/(2*m)) * np.sum((prediction - y) ** 2)\n\u00a0 \u00a0 \u00a0 \u00a0 cost_history.append(cost)\n\u00a0 \u00a0 \u00a0 \u00a0 if abs(prev_cost - cost) &lt; threshold:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 prev_cost = cost\n\u00a0 \u00a0 \u00a0 \u00a0 iterations += 1\n\u00a0 \u00a0 return theta, cost_history, iterations\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#support-vector-machine-svm","title":"Support Vector Machine (SVM)","text":""},{"location":"ml_fundamentals/ML_fundamentals/#additional-resources","title":"Additional Resources","text":"<p>StatQuest Part1 SVM Main Idea StatQuest Part2 The Polynomial Kernel</p>"},{"location":"ml_fundamentals/ML_fundamentals/#main-idea-behind-svm","title":"Main Idea behind SVM","text":"<ul> <li> <p>Soft Margin Classifier (Support Vector Classifier)     When data are 3-dimensional, the Support Vector Classifier is a 2-dimensional plane in a 3-dimensional space. In mathematical world, a plane is a \"flat affine 2-dimensional subspace (hyperplane)\".</p> <p>But it only works well on data that are perfectly separated into two groups, when it comes down to data that are within certain range versus out-of-range, it cannot handle that well. - Support Vector Machine In order to make the mathematics possible, SVM use something called kernel functions to systematically find support vector classifiers in higher dimensions. - Kernel Functions When d = 1, the polynomial kernel computes the relationships between each pair of observations in 1-dimension, and these relationships are used to find a support vector classifier. In summary, the polynomial kernel systematically increases dimensions by setting d, the degree of the polynomial.  - Polynomial Kernel \\((a\\times b + r)^d\\) is the polynomial kernel format, where d sets the dimension of the kernel. Using \\((a\\times b + \\frac{1}{2})^2\\) as an example: \\(\\((a\\times b + \\frac{1}{2})^2 = (a\\times b + \\frac{1}{2})(a\\times b + \\frac{1}{2}) = ab + a^2b^2+\\frac{1}{4} = (a,a^2,\\frac{1}{2})\\cdot (b,b^2,\\frac{1}{2})\\)\\)     where \\((a,a^2,\\frac{1}{2})\\) and \\((b,b^2,\\frac{1}{2})\\) are the coordinates of the data points x-y-z dimensions. \\(r\\) and \\(d\\) are determined via cross validation. Once we determines the parameters, then we plug in all the pairs of data points and do the math to get the high-dimensional relationships. - Radial Function Kernel      Radial function kernel finds support vector classifiers in infinite dimensions but in one / two dimensional data, it behaves like weighted nearest neighborhood model.     The equation looks like this \\(e^{-\\gamma(a-b)^2}\\) where \\(a\\) and \\(b\\) are the x-axis coordinates of two different data points. \\(\\gamma\\) is the parameter that determines how much influence the pair of data points have on each other.</p> </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#logistic-regression","title":"Logistic Regression","text":"<p>Logistic regression are the most widely used and most fundamental model that one could use in the ML industry. One should always understand the deduction of logistic regression and application of it, as it is used in medical diagnosis, credit evaluation, email junk categorization, etc. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#formulation-behind-logistic-regression","title":"Formulation behind Logistic Regression","text":"<p>Logistic Regression calculates a raw model output, then transforms it using the sigmoid function, mapping it to a range between 0 and 1, thus making it a probability. The sigmoid function can be defined as \\(S(x) = \\frac{1}{1+e^{-x}}\\). This can thus be implemented as:</p> <pre><code>def sigmoid(z):\n    return 1 / (1+np.exp(-z))\n</code></pre> <p>The mathematical form of logistic regression can be expressed as follows: \\(\\(P(Y=1|x) = \\frac{1}{1+e^{-(\\beta_0+\\beta_1x)}}\\)\\) where \\(P(Y=1|x)\\) is the probability of event \\(Y=1\\) given \\(x\\), \\(\\beta_0\\) and \\(\\beta_1\\) are parameters of the model, \\(x\\) is the input variable and \\(\\beta_0+\\beta_1x\\) is the linear combination of parameters and features. </p> <p>Log-Likelihood\u00a0in Logistic Regression plays a similar role to the\u00a0Least Squares method\u00a0in Linear Regression. A maximum likelihood estimation method estimates parameters that maximize the likelihood of making the observations we collected. In Logistic Regression, we seek to maximize the log-likelihood.</p> <p>The cost function for a single training instance in logistic regression can be expressed as \\(-[y\\log{(\\hat p)+(1-y)\\log{(1-\\hat p)}}]\\) where \\(\\hat p\\) denotes the predicted probability.</p> <pre><code>def cost_function(h, y): # h = sigmoid(z) where z = X @ theta\n    return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n\ndef logistic_regression(X, y, num_iterations, learning_rate): \n    # Add intercept to X \n    intercept = np.ones((X.shape[0], 1)) \n    X = np.concatenate((intercept, X), axis=1) \n\n    # Weights initialization \n    theta = np.zeros(X.shape[1]) \n    for i in range(num_iterations): \n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        gradient = np.dot(X.T, (h - y)) / y.size \n        theta -= learning_rate * gradient \n\n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        loss = cost_function(h, y) \n\n        if i % 10000 == 0:\n            print(f'Loss: {loss}\\t') \n\n    return theta\n\ndef predict_prob(X, theta):\n    # Add intercept to X\n    intercept = np.ones((X.shape[0], 1))\n    X = np.concatenate((intercept, X), axis=1)\n    return sigmoid(np.dot(X, theta))\n\ndef predict(X, theta, threshold=0.5):\n    return predict_prob(X, theta) &gt;= threshold\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-the-difference-between-logistic-regression-and-linear-regression","title":"What is the difference between logistic regression and linear regression?","text":"<ul> <li>logistic regression is used for categorization whereas linear regression is used for regression problems. This is the most significant difference between the two. In logistic regression, when given x and hyperparameter \\(\\theta\\), we could get the expectation value of the \\(y\\) values to predict the categorization of the values. On the other hand, in linear regression, one is solving \\(y' = \\theta^Tx\\) , which is the approximate of the real relationship of \\(y = \\theta^Tx+\\epsilon\\) where \\(\\epsilon\\) corresponds to the system error.</li> <li>The actual logistic regression equation can be formulated via \\(\\log{\\frac{p}{1-p}}=\\theta^Tx\\), where \\(p=P(y=1|x)\\) , corresponding to given x the probability of y being positive. Thus the most important difference between logistic regression and linear regression would be that the logistic regression \\(y\\)s are discretized whereas the linear regression \\(y\\)s are continuous. When \\(x\\) and \\(\\theta\\) are given, logistic regression can also be seen as generalized linear models where \\(y\\) follows the binary distribution, whereas  when using least-squares for linear regression we view \\(y\\) follows the normal distribution. </li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#what-is-the-same-between-logistic-regression-and-linear-regression","title":"What is the same between logistic regression and linear regression?","text":"<ul> <li>They both used maximum likelihood estimation for modeling the training data. </li> <li>They both could use gradient descent for getting the hyperparameters, and it is also a common strategy that all the supervised learning methods use.</li> </ul>"},{"location":"ml_fundamentals/ML_fundamentals/#the-general-logic-behind-regression","title":"The general logic behind regression","text":"<pre><code>Inputs: X (N\u00d7d), y (N,), model \u2208 {\"linear\",\"logistic\"}\nHyperparams: learning_rate (lr), lambda (L2), max_iters, tol, patience\nPrep:\n  Xb = concat([ones(N,1), X])        # add bias column\n  w = zeros(d+1)                     # includes bias at index 0\n  mask = [0, 1, 1, ..., 1]           # no L2 on bias\n\nFor t in 1..max_iters:\n  z = Xb @ w\n  if model == \"linear\":\n      pred = z\n      loss_data = (1/(2N)) * sum((pred - y)^2)\n  else:  # logistic\n      pred = sigmoid(z)              # clip to [eps, 1-eps] for stability\n      loss_data = -(1/N) * sum(y*log(pred) + (1-y)*log(1-pred))\n\n  loss = loss_data + lambda * sum((w*mask)^2)\n  grad = (1/N) * (Xb.T @ (pred - y)) + 2*lambda*(w*mask)\n  w = w - learning_rate * grad\n  if norm(grad) &lt; tol or early_stopping_on_val(loss): break\n\nReturn w\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#note-for-binomial-distribution-vs-normal-distribution","title":"Note for binomial distribution vs normal distribution","text":"<p>The main difference between a binomial distribution and a normal distribution lies in the type of data they describe:\u00a0==binomial distributions deal with discrete data from a fixed number of trials, while normal distributions describe continuous data that tends to cluster around a mean==.\u00a0Binomial distributions are characterized by a fixed number of trials, each with two possible outcomes (success or failure), while normal distributions are continuous, symmetric, and have a bell-shaped curve.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#decision-tree","title":"Decision Tree","text":"<p>Decision trees are often used in marketing or biomedical industries as the tree-based structure is similar to sales or diagnosis use cases. Hence, when using decision tree as key component of the ensemble method, one could get random forest or gradient boosted decision tree models, etc. Fully grown decision tree model has its characters of being direct and easy-to-explain, hence it would be also important as the ensemble method section prerequisites. Overall, the formulation of decision tree involves 1) feature selection, 2) tree construction and 3) tree pruning. </p>"},{"location":"ml_fundamentals/ML_fundamentals/#structuring-a-decision-tree","title":"Structuring a decision tree","text":"<p>A decision tree starts at a node, called root, which breaks down into branches. Each branch then further splits into more branches, building a hierarchical network. The final branches with no more splits are referred to as leaf nodes.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#understanding-gini-index","title":"Understanding Gini Index","text":"<p>Note: A more clear explanation can be found in videos: - StatQuest: Decision and Classification Trees, Clearly Explained!!! - StatQuest: Decision Trees, Part 2 - Feature Selection and Missing Data - StatQuest: How to Prune Regression Trees, Clearly Explained!!! A Gini Index endeavors to quantify the disorder within these groups. A greater Gini Index score signifies more disorder. The formula of Gini Index can be represented as \\(G = 1-\\sum_{i=1}^n p_i^2\\) where \\(G\\) is the Gini index or coefficient, \\(p_i\\) is the proportion of individuals in the \\(i\\)th group, and the sum is taken over \\(n\\) groups. Gini index is used to describe the data purity, which has similar concept with information entropy.  \\(\\(\\text{Gini}(D) = 1 - \\sum_{k=1}^n(\\frac{C_k}{D})^2\\)\\) \\(\\(\\text{Gini}(D|A) = \\sum_{i=1}^n\\frac{|D_i|}{|D|}\\text{Gini}(D_i)\\)\\) Now let's use an example to better understand how to compute Gini index:</p> Loves Popcorn Loves Soda Age like movie A Y Y 7 N B Y N 12 N C N Y 18 Y D N Y 35 Y E Y Y 38 Y F Y N 50 N G N N 83 N Loves Popcorn Loves Soda <p>All the three leaves except for the fourth one are called impure leaves, where the fourth one is called a pure leaf node. As both leaf nodes from <code>loves Popcorn</code> are impure but there is only one node from <code>Loves Soda</code> being impure, it means that the <code>Loves Soda</code> does a better job predicting who will and will not the movie. </p> \\[\\text{Gini Impurity for a leaf} = 1 - (\\text{the probability of \"Yes\"}) ^ 2 - (\\text{the probability of \"No\"}) ^ 2\\] \\[\\text{Gini Impurity (Loves Movie | Loves Popcorn)} = 1 - (\\frac{1}{1+3})^2 - (\\frac{3}{1+3})^2 = 0.375\\] \\[\\text{Gini Impurity (Loves Movie | Hates Popcorn)} = 1 - (\\frac{2}{1+2})^2 - (\\frac{1}{1+2})^2 = 0.444\\] \\[\\text{Total Gini Impurity} = \\text{weighted avg of Gini for the leaves} = (\\frac{1+3}{1+3+2+1})\\cdot(0.375)+\\frac{3}{4+3}(0.444)\\]"},{"location":"ml_fundamentals/ML_fundamentals/#implementation-of-decision-tree-splits","title":"Implementation of decision tree splits","text":"<pre><code>groups = [\n    \\[\\['Red'], ['Blue'], ['Red'\\]\\],\n    \\[\\['Blue'], ['Red'], ['Blue'], ['Blue'\\]\\],\n]\nclasses = ['Red', 'Blue']\n\nn_instances = float(sum([len(group) for group in groups]))\n\ndef gini_index(groups, classes):\n    n_instances = float(sum([len(group) for group in groups]))\n    gini = 0.0\n    for group in groups:\n        size = len(group)\n        if size == 0:\n            continue\n        score = 0.0\n        for class_val in classes:\n            p = [row[-1] for row in group].count(class_val) / size\n            score += p * p gini # summed probabilities, 1 - score = gini impurity\n        gini += (1.0 - score) * (size / n_instances)\n    return gini\n\ndef test_split(index, value, dataset):\n    left, right = list(), list()\n    for row in dataset:\n        if row[index] &lt; value:\n            left.append(row)\n        else:\n            right.append(row)\n    return left, right\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#information-gain","title":"Information Gain","text":""},{"location":"ml_fundamentals/ML_fundamentals/#max-information-gain","title":"Max Information Gain","text":"<p>For a sample set D, there are K categories, the empirical entropy for this set D can be expressed as \\(H(D) = -\\sum_{k=1}^K \\frac{|C_k|}{D}\\log_2\\frac{C_k}{D}\\).</p>"},{"location":"ml_fundamentals/ML_fundamentals/#unsupervised-learnings","title":"Unsupervised Learnings","text":"<p>We may encounter problems such that providing the machine a tons of feature data and looking for the machine to learn the pattern or structure from the data, for example the video platforms would like to categorize the users from their activities for different recommendation strategies, or looking for relationship between whether the video playing smooth or not vs their relationship with user unsubscribe. These problems are called \"unsupervised learnings\", which does not like the supervised learnings where we expect to see outputs or predictions. The unsupervised learning inputs does not contain label information, instead it needs to dig into the internal data relationship from the algorithm model. There are two main categories of the unsupervised learnings: data clustering or feature variable correlation (using correlation analysis for relationships between variables). </p>"},{"location":"ml_fundamentals/ML_fundamentals/#k-nearest-neighbors-k-nn-algorithm","title":"K-Nearest Neighbors (k-NN) Algorithm","text":"<p>The kNN algorithm works on a basic principle: a data point is likely to be in the same category as the data points it is closest to. Note that choosing 'k' significantly impacts our model. A low 'k' might capture more noise in the data, whereas a high 'k' is computationally expensive.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#euclidean-distance-calculation","title":"Euclidean Distance Calculation","text":"<p>In k-NN, classification is determined by weighing the distance between data points. Euclidean distance is a frequently used metric that calculates the shortest straight-line distance \\(\\sqrt{(x_1-x_2)^2 + (y_1 - y_2)^2}\\) between two data points \\((x_1, y_1)\\) and \\((x_2, y_2)\\) in a Euclidean space. </p> <pre><code>import math\n\n# The 'euclidean_distance' function computes the Euclidean distance between two points\ndef euclidean_distance(point1, point2):\n    squares = [(p - q) ** 2 for p, q in zip(point1, point2)] # Calculate squared distance for each dimension\n    return math.sqrt(sum(squares)) # Return the square root of the sum of squares\n\n# Test it\npoint1 = (1, 2) # The coordinates of the first point\npoint2 = (4, 6) # The coordinates of the second point\nprint(euclidean_distance(point1, point2)) # 5.0\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#actual-knn-algorithm","title":"Actual KNN Algorithm","text":"<pre><code>from collections import Counter\nimport numpy as np\n\ndef k_nearest_neighbors(data, query, k, distance_fn):\n\u00a0 \u00a0 neighbor_distances_and_indices = []\n\u00a0 \u00a0 # Compute distance from each training data point\n\u00a0 \u00a0 for idx, label in enumerate(data):\n\u00a0 \u00a0 \u00a0 \u00a0 distance = euclidean_distance(label[0], query)\n\u00a0 \u00a0 neighbor_distances_and_indices.append((distance, idx))\n\u00a0 \u00a0 # Sort array by distance\n\u00a0 \u00a0 sorted_neighbor_distances_and_indices = sorted(neighbor_distances_and_indices)\n\u00a0 \u00a0 # Select k closest data points\n\u00a0 \u00a0 k_nearest_distances_and_indices = sorted_neighbor_distances_and_indices[:k]\n\u00a0 \u00a0 # Obtain class labels for those k data points\n\u00a0 \u00a0 k_nearest_labels = [data[i][1] for distance, i in k_nearest_distances_and_indices]\n\u00a0 \u00a0 # Majority vote\n\u00a0 \u00a0 most_common = Counter(k_nearest_labels).most_common(1)\n\u00a0 \u00a0 return most_common[0][0] # Return the label of the class that receives the majority vote\n\ndef euclidean_distance(point1, point2):\n\u00a0 \u00a0 distance = sum((p - q) ** 2 for p, q in zip(point1, point2))\n\u00a0 \u00a0 return np.sqrt(distance)\n\u00a0 \u00a0 \ndef mannhattan_distance(point1, point2):\n\u00a0 \u00a0 return np.sum(np.abs(p - q) for p, q in zip(point1, point2))\n\ndata = [\n\u00a0 \u00a0 ((2, 3), 0),\n\u00a0 \u00a0 ((5, 4), 0),\n\u00a0 \u00a0 ((9, 6), 1),\n\u00a0 \u00a0 ((4, 7), 0),\n\u00a0 \u00a0 ((8, 1), 1),\n\u00a0 \u00a0 ((7, 2), 1)\n]\nquery = (7,6)\nk=2\n\nclass_label = k_nearest_neighbors(data, query, k, distance_fn)\nprint(class_label)\n</code></pre>"},{"location":"ml_fundamentals/ML_fundamentals/#k-means-clustering","title":"K-means Clustering","text":"<p>Algorithms such as SVM, logistic regression, decision trees are more for the categorization, i.e. based on the known labelled samples, classifiers are training so that it could apply the same logic on unlabeled samples. Unlike the classification problems, clustering is directly categorize the samples without any previously known labelling. </p> <p>Classification belongs to supervised learning whereas clustering is a type of unsupervised learning algorithm. K-means clustering, as one type of the most basic and fundamental clustering algorithm, has the main idea of iteratively finding the way of cutting the space into K clusters, so that the loss function is the lowest. The loss function can be defined as the sum of squared error distance of each sample from their clustered centers: \\(\\(J(c,\\mu) = \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2\\)\\) where \\(x_i\\) represents the samples, \\(c_i\\) represents the cluster that \\(x_i\\) belongs to, \\(mu_{c_i}\\) corresponds to the center of the cluster that \\(x_i\\)'s located in and \\(M\\) is the total number of samples.</p>"},{"location":"ml_fundamentals/ML_fundamentals/#k-means-clustering-algorithm-in-steps","title":"K-means clustering algorithm in steps","text":"<p>The goal of K-means clustering is to categorize the dataset of interest into K-clusters, and also provides the cluster center corresponding to each data points: 1. data engineering and cleaning: normalization and outlier removal. 2. randomly pick K-cluster centers, labelled as \\(\\mu_1^{(0)}, \\mu_2^{(0)}, ..., \\mu_K^{(0)}\\)  3. define the loss function to be \\(J(c,\\mu) = \\min_{\\mu} \\min_{c} \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2\\)  4. iterate through the process below by t times, where t denotes the number of iterations:     1. for every sample \\(x_i\\), categorize it to the cluster that has shortest distance \\(\\(c_i^{(t)} \\leftarrow {\\arg\\min}_k ||x_i - \\mu_k^{(t)}||^2\\)\\)     2. for every cluster k, recalculate the center: \\(\\(\\mu_k^{(t+1)}\\leftarrow {\\arg\\min}_\\mu \\sum_{i:c_i^{(t)}=k} ||x_i - \\mu||^2\\)\\) <pre><code># k-Means algorithm\ndef k_means(data, centers, k):\n    while True:\n        clusters = [[] for _ in range(k)] \n\n        # Assign data points to the closest center\n        for point in data:\n            distances = [distance(point, center) for center in centers]\n            index = distances.index(min(distances)) \n            clusters[index].append(point)\n\n        # Update centers to be the mean of points in a cluster\n        new_centers = []\n        for cluster in clusters:\n            center = (sum([point[0] for point in cluster])/len(cluster), \n                      sum([point[1] for point in cluster])/len(cluster)) \n            new_centers.append(center)\n\n        # Break loop if centers don't change significantly\n        if max([distance(new, old) for new, old in zip(new_centers, centers)]) &lt; 0.0001:\n            break\n        else:\n            centers = new_centers\n    return clusters, centers\n</code></pre></p> <ol> <li> <p>need to work on the definition of this and learn more about information theory\u00a0\u21a9</p> </li> <li> <p>Please read through the recommendation system based on matrix vectorization to get a better idea on how recommenders are built based on SVD and matrices\u00a0\u21a9</p> </li> </ol>"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/","title":"Decision Tree","text":"<p>Decision trees are often used in marketing or biomedical industries as the tree-based structure is similar to sales or diagnosis use cases. Hence, when using decision tree as key component of the ensemble method, one could get random forest or gradient boosted decision tree models, etc. Fully grown decision tree model has its characters of being direct and easy-to-explain, hence it would be also important as the ensemble method section prerequisites. Overall, the formulation of decision tree involves 1) feature selection, 2) tree construction and 3) tree pruning.</p>"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#structuring-a-decision-tree","title":"Structuring a Decision Tree","text":"<p>A decision tree starts at a node, called root, which breaks down into branches. Each branch then further splits into more branches, building a hierarchical network. The final branches with no more splits are referred to as leaf nodes.</p>"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#understanding-gini-index","title":"Understanding Gini Index","text":"<p>Note: A more clear explanation can be found in videos: - StatQuest: Decision and Classification Trees, Clearly Explained!!! - StatQuest: Decision Trees, Part 2 - Feature Selection and Missing Data - StatQuest: How to Prune Regression Trees, Clearly Explained!!!</p> <p>A Gini Index endeavors to quantify the disorder within these groups. A greater Gini Index score signifies more disorder. The formula of Gini Index can be represented as \\(G = 1-\\sum_{i=1}^n p_i^2\\) where \\(G\\) is the Gini index or coefficient, \\(p_i\\) is the proportion of individuals in the \\(i\\)th group, and the sum is taken over \\(n\\) groups. Gini index is used to describe the data purity, which has similar concept with information entropy.</p> \\[\\text{Gini}(D) = 1 - \\sum_{k=1}^n(\\frac{C_k}{D})^2\\] \\[\\text{Gini}(D|A) = \\sum_{i=1}^n\\frac{|D_i|}{|D|}\\text{Gini}(D_i)\\] <p>Now let's use an example to better understand how to compute Gini index:</p> Loves Popcorn Loves Soda Age like movie A Y Y 7 N B Y N 12 N C N Y 18 Y D N Y 35 Y E Y Y 38 Y F Y N 50 N G N N 83 N Loves Popcorn Loves Soda <p>All the three leaves except for the fourth one are called impure leaves, where the fourth one is called a pure leaf node. As both leaf nodes from <code>loves Popcorn</code> are impure but there is only one node from <code>Loves Soda</code> being impure, it means that the <code>Loves Soda</code> does a better job predicting who will and will not the movie.</p> \\[\\text{Gini Impurity for a leaf} = 1 - (\\text{the probability of \"Yes\"}) ^ 2 - (\\text{the probability of \"No\"}) ^ 2\\] \\[\\text{Gini Impurity (Loves Movie | Loves Popcorn)} = 1 - (\\frac{1}{1+3})^2 - (\\frac{3}{1+3})^2 = 0.375\\] \\[\\text{Gini Impurity (Loves Movie | Hates Popcorn)} = 1 - (\\frac{2}{1+2})^2 - (\\frac{1}{1+2})^2 = 0.444\\] \\[\\text{Total Gini Impurity} = \\text{weighted avg of Gini for the leaves} = (\\frac{1+3}{1+3+2+1})\\cdot(0.375)+\\frac{3}{4+3}(0.444)\\]"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#implementation-of-decision-tree-splits","title":"Implementation of Decision Tree Splits","text":"<pre><code>groups = [\n    \\[\\[['Red'], ['Blue'], ['Red']\\],\n    \\[\\[['Blue'], ['Red'], ['Blue'], ['Blue']\\],\n]\nclasses = ['Red', 'Blue']\n\nn_instances = float(sum([len(group) for group in groups]))\n\ndef gini_index(groups, classes):\n    n_instances = float(sum([len(group) for group in groups]))\n    gini = 0.0\n    for group in groups:\n        size = len(group)\n        if size == 0:\n            continue\n        score = 0.0\n        for class_val in classes:\n            p = [row[-1] for row in group].count(class_val) / size\n            score += p * p  # summed probabilities, 1 - score = gini impurity\n        gini += (1.0 - score) * (size / n_instances)\n    return gini\n\ndef test_split(index, value, dataset):\n    left, right = list(), list()\n    for row in dataset:\n        if row[index] &lt; value:\n            left.append(row)\n        else:\n            right.append(row)\n    return left, right\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#information-gain","title":"Information Gain","text":""},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#max-information-gain","title":"Max Information Gain","text":"<p>For a sample set D, there are K categories, the empirical entropy for this set D can be expressed as \\(H(D) = -\\sum_{k=1}^K \\frac{|C_k|}{D}\\log_2\\frac{C_k}{D}\\).</p>"},{"location":"ml_fundamentals/classical_algorithms/decision_trees/#related-topics","title":"Related Topics","text":"<ul> <li>Linear Regression - Alternative regression algorithm</li> <li>Model Evaluation - Evaluating decision trees</li> <li>Feature Engineering - How decision trees handle different data types</li> </ul>"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/","title":"Linear Regression","text":"<p>There are two central provinces in the world of regression: simple linear regression and multiple linear regression.</p>"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#formula-of-simple-linear-regression","title":"Formula of Simple Linear Regression","text":"<p>The formula of linear regression can be represented as \\(\\(y=c+m\\cdot x\\)\\)</p> <p>The formula revolves around minimizing residuals. Imagine residuals as the distance between the actual and predicted values of the dependent variable \\(y\\):</p> \\[m = \\frac{\\sum_{i=1}^N{(x_i-\\bar x)(y_i-\\bar y)}}{\\sum_{i=1}^N(x_i-\\bar x)^2}\\] <p>and the constant corresponds to \\(c=\\bar y - m \\cdot\\bar x\\).</p> <pre><code>import numpy as np\n\n# Step 1: Get the data set\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 4, 5, 4, 5])\n\n# Step 2: Compute the mean of the X and y\nmean_x = np.mean(x)\nmean_y = np.mean(y)\n\n# Step 3: Calculate the coefficients\nm = np.sum((x - mean_x) * (y - mean_y)) / np.sum((x - mean_x) ** 2)\nc = mean_y - m * mean_x\n\n# Voila! We have our model\nprint(f\"Model: y = {c} + {m}*x\")  # Output: Model: y= 2.2 + 0.6*x\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#formula-of-multiple-linear-regression","title":"Formula of Multiple Linear Regression","text":"<p>For simple linear regression formula, we have \\(y=\\beta_0 + \\beta_1x\\), for multiple linear regression, we add multiple independent variables \\(x_1, x_2, ... , x_m\\). Suppose we had n data points, each with m features, then X would be like:</p> \\[\\mathbf{X}=\\begin{bmatrix}   1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\\\   1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\\\ \\end{bmatrix} \\in \\mathbb{R^{n\\times (m+1)}}, \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix} \\in \\mathbb{R^{n\\times 1}}, \\mathbf{\\beta} = \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_m \\end{bmatrix} \\in  \\mathbb{R^{(m+1)\\times 1}}\\] <p>Each row represents the m features for a single data point. The first column with \\(\\mathbf{1}\\)s are the bias / intercept of each equation. The normal equation would be of form</p> \\[\\beta = (X^T X)^{-1}X^Ty\\] <p>The predicted \\(\\hat y\\) values can be represented as</p> \\[\\hat y = (1 \\cdot \\beta_0)+(\\beta_1 \\cdot x_1) + (\\beta_2 \\cdot x_2) + \\dots + (\\beta_m \\cdot x_m)\\] <p>To calculate all the predictions at once, we take the dot product of \\(X\\) and \\(\\beta\\):</p> \\[\\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix} = X\\cdot \\beta =\\begin{bmatrix}   1 &amp; x_{1,1} &amp; x_{1,2} &amp; ... &amp; x_{1,m} \\\\   1 &amp; x_{2,1} &amp; x_{2,2} &amp; ... &amp; x_{2,m} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 1 &amp; x_{n,1} &amp; x_{n,2} &amp; ... &amp; x_{n,m} \\\\ \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_m \\end{bmatrix}\\]"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#linear-regression-model-evaluation","title":"Linear Regression Model Evaluation","text":""},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#coefficient-of-determination-r2-score","title":"Coefficient of Determination (\\(R^2\\) Score)","text":"\\[R^2=1-\\frac{SS_\\text{residuals}}{SS_\\text{total}} = 1 - \\frac{\\sum_{i=1}^n(y_i - \\hat y_i)^2}{\\sum_{i=1}^n(y_i - \\bar y_i)^2}\\] <p>Where \\(SS_\\text{residuals}\\) denotes the residual sum of squares for predictions and \\(SS_\\text{total}\\) denotes the total sum of squares from actual values. A higher R-squared value / closer to 1 indicates a good model fit.</p> <pre><code>import numpy as np\n# given data\nhousing_data = np.array(\\[\\[[1800, 3], [2400, 4], [1416, 2], [3000, 5]\\])\nprices = np.array([350000, 475000, 230000, 640000])\n\n# adding 1s to our matrix\n# ones = np.ones(shape=(len(housing_data), 1))\n# X = np.append(ones, housing_data, axis=1)\nX = np.c_[np.ones((len(housing_data),1)),X] # add bias parameter to X\n\n# calculating coefficients\ncoefficients = np.linalg.inv(X.T @ X) @ X.T @ prices\n\n# predicting prices\npredicted_prices = X @ coefficients\n\n# calculating residuals\nresiduals = prices - predicted_prices\n\n# calculating total sum of squares\nsst = np.sum((prices - np.mean(prices)) ** 2)\n\n# calculating residual sum of squares\nssr = np.sum(residuals ** 2)\n\n# calculating R^2\nr2 = 1 - (ssr/sst)\n\nprint(\"Coefficients:\", coefficients)\nprint(\"Predicted prices:\", predicted_prices)\nprint(\"R^2:\", r2)\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#gradient-descent","title":"Gradient Descent","text":"<p>Gradient descent is an iterative optimization algorithm for minimizing a function, usually a loss function, quantifying the disparity between predicted and actual results. The goal of gradient descent is to find the parameters that minimize the value of the loss function.</p> <p>Gradient descent derives its name from its working mechanism: taking descents along the gradient. It operates in several iterative steps as follows:</p> <ol> <li>Choose random values for initial parameters.</li> <li>Calculate the cost (the difference between actual and predicted value).</li> <li>Compute the gradient (the steepest slope of the function around that point).</li> <li>Update the parameters using the gradient.</li> <li>Repeat steps 2 to 4 until we reach an acceptable error rate or exhaust the maximum iterations.</li> </ol> <p>A vital component of gradient descent is the learning rate, which determines the size of the descent towards the optimum solution.</p> <p>The first step is to calculate the cost function, which takes the form of \\(\\(J(X, y, \\theta) = \\frac{1}{m}\\sum_{i=1}^m(X\\cdot \\theta - y_i)^2\\)\\) where J is the cost, X is the data, y is the actual values and \\(\\theta\\) is the parameters, \\(m\\) is the length of \\(y\\). It is calculating the mean square error.</p> <pre><code>import numpy as np\n\ndef cost(X, y, theta):\n    m = len(y)\n    predictions = X @ theta\n    cost = (1/m) * np.sum((predictions - y) ** 2)\n    return cost\n</code></pre> <p>The second step is to compute the gradient descent function, which will be updated in the iterative loop:</p> \\[\\theta:=\\theta-\\alpha\\frac{1}{m}X^T\\cdot(X\\cdot \\theta - y)\\] <p>Here \\(\\alpha\\) is the learning rate, which determines the size of steps in the descent and \\(X^T\\) is the transpose of data, which should have been multiplied by 2 but as we take the derivative of the mean squared error we could also consider it to be included as part of the learning rate \\(\\alpha\\).</p> <pre><code>def gradient_descent(X, y, theta, alpha, threshold=0.01):\n    m = len(y)\n    cost_history = []\n    prev_cost = float('inf')\n    iterations = 0\n    while True:\n        prediction = X.dot(theta)\n        theta = theta - (alpha / m) * X.T.dot(prediction - y)\n        cost = (1/(2*m)) * np.sum((prediction - y) ** 2)\n        cost_history.append(cost)\n        if abs(prev_cost - cost) &lt; threshold:\n            break\n        prev_cost = cost\n        iterations += 1\n    return theta, cost_history, iterations\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/linear_regression/#related-topics","title":"Related Topics","text":"<ul> <li>Decision Trees - Alternative regression algorithm</li> <li>Model Evaluation - Evaluating regression models</li> <li>Regularization - Regularizing linear regression</li> </ul>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/","title":"Logistic Regression","text":"<p>Logistic regression is the most widely used and most fundamental model that one could use in the ML industry. One should always understand the deduction of logistic regression and application of it, as it is used in medical diagnosis, credit evaluation, email junk categorization, etc.</p>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#formulation-behind-logistic-regression","title":"Formulation behind Logistic Regression","text":"<p>Logistic Regression calculates a raw model output, then transforms it using the sigmoid function, mapping it to a range between 0 and 1, thus making it a probability. The sigmoid function can be defined as \\(S(x) = \\frac{1}{1+e^{-x}}\\). This can thus be implemented as:</p> <pre><code>def sigmoid(z):\n    return 1 / (1+np.exp(-z))\n</code></pre> <p>The mathematical form of logistic regression can be expressed as follows: \\(\\(P(Y=1|x) = \\frac{1}{1+e^{-(\\beta_0+\\beta_1x)}}\\)\\) where \\(P(Y=1|x)\\) is the probability of event \\(Y=1\\) given \\(x\\), \\(\\beta_0\\) and \\(\\beta_1\\) are parameters of the model, \\(x\\) is the input variable and \\(\\beta_0+\\beta_1x\\) is the linear combination of parameters and features.</p> <p>Log-Likelihood in Logistic Regression plays a similar role to the Least Squares method in Linear Regression. A maximum likelihood estimation method estimates parameters that maximize the likelihood of making the observations we collected. In Logistic Regression, we seek to maximize the log-likelihood.</p> <p>The cost function for a single training instance in logistic regression can be expressed as \\(-[y\\log{(\\hat p)+(1-y)\\log{(1-\\hat p)}}]\\) where \\(\\hat p\\) denotes the predicted probability.</p> <pre><code>def cost_function(h, y): # h = sigmoid(z) where z = X @ theta\n    return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()\n\ndef logistic_regression(X, y, num_iterations, learning_rate): \n    # Add intercept to X \n    intercept = np.ones((X.shape[0], 1)) \n    X = np.concatenate((intercept, X), axis=1) \n\n    # Weights initialization \n    theta = np.zeros(X.shape[1]) \n    for i in range(num_iterations): \n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        gradient = np.dot(X.T, (h - y)) / y.size \n        theta -= learning_rate * gradient \n\n        z = np.dot(X, theta) \n        h = sigmoid(z) \n        loss = cost_function(h, y) \n\n        if i % 10000 == 0:\n            print(f'Loss: {loss}\\t') \n\n    return theta\n\ndef predict_prob(X, theta):\n    # Add intercept to X\n    intercept = np.ones((X.shape[0], 1))\n    X = np.concatenate((intercept, X), axis=1)\n    return sigmoid(np.dot(X, theta))\n\ndef predict(X, theta, threshold=0.5):\n    return predict_prob(X, theta) &gt;= threshold\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#differences-between-logistic-and-linear-regression","title":"Differences Between Logistic and Linear Regression","text":""},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#key-differences","title":"Key Differences","text":"<ul> <li> <p>logistic regression is used for categorization whereas linear regression is used for regression problems. This is the most significant difference between the two. In logistic regression, when given x and hyperparameter \\(\\theta\\), we could get the expectation value of the \\(y\\) values to predict the categorization of the values. On the other hand, in linear regression, one is solving \\(y' = \\theta^Tx\\), which is the approximate of the real relationship of \\(y = \\theta^Tx+\\epsilon\\) where \\(\\epsilon\\) corresponds to the system error.</p> </li> <li> <p>The actual logistic regression equation can be formulated via \\(\\log{\\frac{p}{1-p}}=\\theta^Tx\\), where \\(p=P(y=1|x)\\), corresponding to given x the probability of y being positive. Thus the most important difference between logistic regression and linear regression would be that the logistic regression \\(y\\)s are discretized whereas the linear regression \\(y\\)s are continuous. When \\(x\\) and \\(\\theta\\) are given, logistic regression can also be seen as generalized linear models where \\(y\\) follows the binary distribution, whereas when using least-squares for linear regression we view \\(y\\) follows the normal distribution.</p> </li> </ul>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#similarities","title":"Similarities","text":"<ul> <li>They both used maximum likelihood estimation for modeling the training data.</li> <li>They both could use gradient descent for getting the hyperparameters, and it is also a common strategy that all the supervised learning methods use.</li> </ul>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#general-logic-behind-regression","title":"General Logic Behind Regression","text":"<pre><code>Inputs: X (N\u00d7d), y (N,), model \u2208 {\"linear\",\"logistic\"}\nHyperparams: learning_rate (lr), lambda (L2), max_iters, tol, patience\nPrep:\n  Xb = concat([ones(N,1), X])        # add bias column\n  w = zeros(d+1)                     # includes bias at index 0\n  mask = [0, 1, 1, ..., 1]           # no L2 on bias\n\nFor t in 1..max_iters:\n  z = Xb @ w\n  if model == \"linear\":\n      pred = z\n      loss_data = (1/(2N)) * sum((pred - y)^2)\n  else:  # logistic\n      pred = sigmoid(z)              # clip to [eps, 1-eps] for stability\n      loss_data = -(1/N) * sum(y*log(pred) + (1-y)*log(1-pred))\n\n  loss = loss_data + lambda * sum((w*mask)^2)\n  grad = (1/N) * (Xb.T @ (pred - y)) + 2*lambda*(w*mask)\n  w = w - learning_rate * grad\n  if norm(grad) &lt; tol or early_stopping_on_val(loss): break\n\nReturn w\n</code></pre>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#binomial-vs-normal-distribution","title":"Binomial vs Normal Distribution","text":"<p>The main difference between a binomial distribution and a normal distribution lies in the type of data they describe: binomial distributions deal with discrete data from a fixed number of trials, while normal distributions describe continuous data that tends to cluster around a mean. Binomial distributions are characterized by a fixed number of trials, each with two possible outcomes (success or failure), while normal distributions are continuous, symmetric, and have a bell-shaped curve.</p>"},{"location":"ml_fundamentals/classical_algorithms/logistic_regression/#related-topics","title":"Related Topics","text":"<ul> <li>Linear Regression - Understanding the differences and similarities</li> <li>Decision Trees - Alternative classification algorithm</li> <li>Model Evaluation - Evaluating classification performance</li> <li>Regularization - Regularizing logistic regression</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/","title":"Categorical Feature Encoding","text":""},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#understanding-categorical-features","title":"Understanding Categorical Features","text":"<p>Categorical features include data like male/female, blood type (A,B,AB,O), and other variables that can only select values from a finite set of choices. Categorical features are originally input as strings.</p> <p>Important Note: While decision trees and some other models can directly take in strings, for logistic regression or SVM models, categorical features need to be translated to numerical form to work properly.</p>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#encoding-methods","title":"Encoding Methods","text":""},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#1-ordinal-encoding","title":"1. Ordinal Encoding","text":"<p>Use Case: Treats data that has ordinal sequence (e.g., high &gt; middle &gt; low)</p> <p>Method: Assigns numerical IDs that retain the high-to-low relationship</p> <p>Example: - High \u2192 3 - Middle \u2192 2 - Low \u2192 1</p> <p>Characteristics: - Preserves ordinal relationships - Simple and interpretable - Assumes meaningful order exists</p> <pre><code>from sklearn.preprocessing import OrdinalEncoder\n\n# Example data\ncategories = \\[\\[['high'], ['low'], ['middle'], ['high'], ['low']\\]\n\n# Create encoder\nencoder = OrdinalEncoder(categories=\\[\\[['low', 'middle', 'high']\\]\\])\n\n# Fit and transform\nencoded = encoder.fit_transform(categories)\nprint(encoded)  # \\[\\[[2], [0], [1], [2], [0]\\]\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#2-one-hot-encoding","title":"2. One-Hot Encoding","text":"<p>Use Case: Treats features that do not have ordinal relationships (e.g., blood type)</p> <p>Method: Creates binary vectors for each category</p> <p>Example for Blood Type: - Type A \u2192 [1, 0, 0, 0] - Type B \u2192 [0, 1, 0, 0] - Type AB \u2192 [0, 0, 1, 0] - Type O \u2192 [0, 0, 0, 1]</p> <p>Characteristics: - No ordinal relationship assumed - Creates sparse vectors - Increases dimensionality significantly</p> <p>Challenges: 1. High-dimensional features can be difficult in:    - K-nearest neighbors: Distance between high-dimensional vectors is hard to measure    - Logistic regression: Parameters increase with higher dimensions, causing overfitting    - Clustering: Only some dimensions may be helpful</p> <ol> <li>Sparse vectors for saving space</li> </ol> <pre><code>import pandas as pd\n\n# Example data\ndata = pd.DataFrame({'blood_type': ['A', 'B', 'AB', 'O', 'A']})\n\n# One-hot encoding\none_hot = pd.get_dummies(data, columns=['blood_type'])\nprint(one_hot)\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#3-binary-encoding","title":"3. Binary Encoding","text":"<p>Use Case: Alternative to one-hot encoding for space efficiency</p> <p>Method: Uses binary representation to do a hash mapping on the original category ID</p> <p>Characteristics: - Saves space compared to one-hot encoding - Usually fewer dimensions - Maintains some category information</p> <pre><code>import category_encoders as ce\n\n# Example data\ndata = pd.DataFrame({'category': ['A', 'B', 'C', 'D', 'A']})\n\n# Binary encoding\nencoder = ce.BinaryEncoder(cols=['category'])\nbinary_encoded = encoder.fit_transform(data)\nprint(binary_encoded)\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#advanced-encoding-techniques","title":"Advanced Encoding Techniques","text":""},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#target-encoding-mean-encoding","title":"Target Encoding (Mean Encoding)","text":"<p>Method: Replaces categories with the mean of the target variable for that category</p> <p>Advantages: - Captures relationship with target - Reduces dimensionality - Handles high-cardinality features</p> <p>Disadvantages: - Risk of overfitting - Requires careful cross-validation</p> <pre><code>from category_encoders import TargetEncoder\n\n# Example with target variable\nX = pd.DataFrame({'category': ['A', 'B', 'A', 'C', 'B']})\ny = pd.Series([1, 0, 1, 0, 1])\n\n# Target encoding\nencoder = TargetEncoder(cols=['category'])\nencoded = encoder.fit_transform(X, y)\nprint(encoded)\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#hash-encoding","title":"Hash Encoding","text":"<p>Method: Uses hash functions to map categories to a fixed number of features</p> <p>Advantages: - Handles high-cardinality features - Fixed output dimensionality - Memory efficient</p> <p>Disadvantages: - Potential hash collisions - Less interpretable</p>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#best-practices","title":"Best Practices","text":""},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#when-to-use-each-method","title":"When to Use Each Method:","text":"<ol> <li>Ordinal Encoding:</li> <li>Clear ordinal relationship exists</li> <li>Categories have meaningful order</li> <li> <p>Tree-based models</p> </li> <li> <p>One-Hot Encoding:</p> </li> <li>No ordinal relationship</li> <li>Small number of categories (&lt; 10)</li> <li> <p>Linear models</p> </li> <li> <p>Binary Encoding:</p> </li> <li>Medium number of categories (10-100)</li> <li>Memory constraints</li> <li> <p>Want to reduce dimensionality</p> </li> <li> <p>Target Encoding:</p> </li> <li>High-cardinality features</li> <li>Clear relationship with target</li> <li>Proper cross-validation setup</li> </ol>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#implementation-guidelines","title":"Implementation Guidelines:","text":"<ol> <li>Handle missing values before encoding</li> <li>Fit encoders on training data only</li> <li>Apply same encoding to test data</li> <li>Consider feature interactions after encoding</li> <li>Monitor for overfitting with high-cardinality features</li> </ol>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#common-pitfalls","title":"Common Pitfalls:","text":"<ul> <li>Data leakage: Fitting encoders on test data</li> <li>Overfitting: Using target encoding without proper validation</li> <li>Dimensionality explosion: One-hot encoding high-cardinality features</li> <li>Losing information: Using ordinal encoding for non-ordinal data</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/categorical_encoding/#related-topics","title":"Related Topics","text":"<ul> <li>Data Types &amp; Normalization - Understanding different data types</li> <li>Feature Crosses - Combining encoded features</li> <li>Model Evaluation - How encoding affects model performance</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/","title":"Data Types &amp; Normalization","text":""},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#data-types-in-machine-learning","title":"Data Types in Machine Learning","text":""},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#structured-vs-unstructured-data","title":"Structured vs Unstructured Data","text":"<p>Machine learning deals with two main types of data:</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#structured-tabular-data","title":"Structured / Tabular Data","text":"<ul> <li>Can be viewed as a data table from a relational database</li> <li>Every column has a clear definition</li> <li>Includes numerical and categorical data types</li> <li>Examples: CSV files, database tables, spreadsheets</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#unstructured-data","title":"Unstructured Data","text":"<ul> <li>Includes text, image, audio, video data</li> <li>Information cannot be easily represented as numerical values</li> <li>No clear categorical definition</li> <li>Size of data is not identical</li> <li>Examples: documents, images, audio recordings</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#feature-normalization","title":"Feature Normalization","text":""},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#why-normalize-numerical-features","title":"Why Normalize Numerical Features?","text":"<p>In order to eliminate the magnitude impact between features, we should always normalize the features that we use. This means uniformly normalizing all features to a similar range, which helps compare between different metrics.</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#types-of-normalization","title":"Types of Normalization","text":""},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#1-min-max-scaling","title":"1. Min-Max Scaling","text":"<p>Linearly changes the original data so that it can be projected to [0, 1] range. This is an equal ratio transformation of the original data:</p> \\[X_{\\text{norm}} = \\frac{X-X_{\\text{min}}}{X_{\\text{max}-X_{\\text{min}}}}\\] <p>Characteristics: - Scales data to a fixed range [0, 1] - Preserves zero entries in sparse data - Sensitive to outliers</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#2-z-score-normalization-standardization","title":"2. Z-Score Normalization (Standardization)","text":"<p>Projects the original data to a mean of 0 and variance = 1 distribution. If the original feature has mean \\(\\mu\\) and variance \\(\\sigma\\), the normalization equation is:</p> \\[Z = \\frac{x-\\mu}{\\sigma}\\] <p>Characteristics: - Centers data around mean = 0 - Scales to standard deviation = 1 - Less sensitive to outliers than min-max scaling - Assumes data follows normal distribution</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#when-to-use-normalization","title":"When to Use Normalization","text":""},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#sgd-based-models-require-normalization","title":"SGD-Based Models (Require Normalization)","text":"<ul> <li>Linear regression</li> <li>Logistic regression</li> <li>Support vector machines</li> <li>Neural networks</li> </ul> <p>Example: When two numerical features, \\(x_1\\) of range [0,10] and \\(x_2\\) of range [0,3], are not normalized, the  gradient descent would not be as efficient as when normalization is applied.</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#tree-based-models-dont-require-normalization","title":"Tree-Based Models (Don't Require Normalization)","text":"<ul> <li>Decision trees</li> <li>Random forests</li> <li>Gradient boosting</li> </ul> <p>Reason: Tree models split based on data and information gain ratio, which is not impacted by whether features have been normalized.</p>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#implementation-example","title":"Implementation Example","text":"<pre><code>import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\n# Sample data\ndata = np.array(\\[\\[[1, 2, 3], [4, 5, 6], [7, 8, 9]\\])\n\n# Min-Max Scaling\nminmax_scaler = MinMaxScaler()\nminmax_scaled = minmax_scaler.fit_transform(data)\n\n# Z-Score Normalization\nstandard_scaler = StandardScaler()\nstandard_scaled = standard_scaler.fit_transform(data)\n\nprint(\"Original data:\")\nprint(data)\nprint(\"\\nMin-Max scaled:\")\nprint(minmax_scaled)\nprint(\"\\nZ-Score normalized:\")\nprint(standard_scaled)\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#best-practices","title":"Best Practices","text":"<ol> <li>Fit scalers on training data only - Never fit on test data to avoid data leakage</li> <li>Apply same scaling to test data - Use the fitted scaler to transform test data</li> <li>Choose based on your model - Use standardization for linear models, min-max for neural networks</li> <li>Handle outliers - Consider robust scaling methods if outliers are present</li> <li>Preserve interpretability - Keep track of scaling parameters for inverse transformation</li> </ol>"},{"location":"ml_fundamentals/feature_engineering/data_types_and_normalization/#related-topics","title":"Related Topics","text":"<ul> <li>Categorical Encoding - How to handle categorical features</li> <li>Feature Crosses - Combining features for better performance</li> <li>Model Evaluation - How normalization affects model performance</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/","title":"Feature Crosses &amp; Dimensionality","text":""},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#what-are-feature-crosses","title":"What are Feature Crosses?","text":"<p>Feature crosses combine single features together via dot-product or inner-product to help represent nonlinear relationships. This is particularly useful when individual features don't capture complex interactions in the data.</p>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#high-dimensional-feature-crosses","title":"High-Dimensional Feature Crosses","text":""},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#the-problem","title":"The Problem","text":"<p>Using logistic regression as an example, when a dataset contains feature vector \\(X=(x_1, x_2, ..., x_k)\\), the model would have:</p> \\[Y = \\text{sigmoid}(\\sum_i \\sum_j w_{ij} \\langle x_i, x_j \\rangle)\\] <p>Where \\(w_{ij}\\) is of dimension \\(n_{x_i} \\cdot n_{x_j}\\). When \\(n_{x_i} \\times n_{x_j}\\) is huge (especially in use cases like website customers and number of goods), this creates an extremely high-dimensional problem.</p>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#the-solution-dimensionality-reduction","title":"The Solution: Dimensionality Reduction","text":"<p>One way to get around this is to use a k-dimensional low-dimension vector (k &lt;&lt; m, k &lt;&lt; n).</p> <p>Now, \\(w_{ij} = x_i' \\cdot x_j'\\) and the number of parameters to tune becomes \\(m \\times k + n \\times k\\).</p> <p>This can also be viewed as matrix factorization, which has been widely used in recommendation systems.</p>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#matrix-factorization-example","title":"Matrix Factorization Example","text":"<pre><code>import numpy as np\n\n# Original high-dimensional features\nn_users = 1000\nn_items = 5000\nk = 50  # Low-dimensional representation\n\n# Create low-dimensional embeddings\nuser_embeddings = np.random.randn(n_users, k)\nitem_embeddings = np.random.randn(n_items, k)\n\n# Instead of n_users * n_items parameters,\n# we now have n_users * k + n_items * k parameters\ntotal_params = n_users * k + n_items * k\nprint(f\"Parameters reduced from {n_users * n_items:,} to {total_params:,}\")\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#feature-cross-selection","title":"Feature Cross Selection","text":""},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#the-challenge","title":"The Challenge","text":"<p>In reality, we face a variety of high-dimensional features. A single feature cross of all different pairs would induce: 1. Too many parameters 2. Overfitting issues</p>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#effective-feature-combination-selection","title":"Effective Feature Combination Selection","text":"<p>We introduce feature cross selection based on decision tree models. Taking CTR (Click-Through Rate) prediction as an example:</p> <p>Input features: age, gender, user type (free vs paid), searched item type (skincare vs foods)</p> <p>Decision tree approach: 1. Make a decision tree from the original input and their labels 2. View the feature crosses from the tree 3. Extract meaningful feature combinations</p> <p>Example feature crosses from tree: 1. age + gender 2. age + searched item type 3. paid user + search item type 4. paid user + age</p>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#gradient-boosting-decision-trees-gbdt","title":"Gradient Boosting Decision Trees (GBDT)","text":"<p>How to best construct the decision trees?</p> <p>One can use Gradient Boosting Decision Trees (GBDT). The idea behind this is that before constructing a decision tree, we first calculate the error from the true value and iteratively construct the tree from the error.</p> <pre><code>from sklearn.ensemble import GradientBoostingRegressor\nimport pandas as pd\n\n# Example implementation\ndef extract_feature_crosses(X, y, n_estimators=100):\n    \"\"\"\n    Extract feature crosses using GBDT\n    \"\"\"\n    gbdt = GradientBoostingRegressor(n_estimators=n_estimators, max_depth=3)\n    gbdt.fit(X, y)\n\n    # Extract feature importance\n    feature_importance = gbdt.feature_importances_\n\n    # Get feature crosses from tree structure\n    feature_crosses = []\n    for tree in gbdt.estimators_:\n        # Extract decision paths and identify feature combinations\n        # This is a simplified version - actual implementation would be more complex\n        pass\n\n    return feature_crosses\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#implementation-strategies","title":"Implementation Strategies","text":""},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#1-manual-feature-engineering","title":"1. Manual Feature Engineering","text":"<pre><code>import pandas as pd\n\n# Create feature crosses manually\ndef create_feature_crosses(df):\n    # Age + Gender cross\n    df['age_gender'] = df['age'].astype(str) + '_' + df['gender']\n\n    # User type + Item type cross\n    df['user_item_cross'] = df['user_type'] + '_' + df['item_type']\n\n    return df\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#2-polynomial-features","title":"2. Polynomial Features","text":"<pre><code>from sklearn.preprocessing import PolynomialFeatures\n\n# Create polynomial features (degree 2)\npoly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\nX_poly = poly.fit_transform(X)\n\nprint(f\"Original features: {X.shape[1]}\")\nprint(f\"Polynomial features: {X_poly.shape[1]}\")\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#3-factorization-machines","title":"3. Factorization Machines","text":"<pre><code># Using a library like fastFM or similar\nfrom fastFM import als\n\n# Factorization Machine for feature interactions\nfm = als.FMRegression(n_iter=1000, init_stdev=0.1, rank=8, l2_reg_w=0.1, l2_reg_V=0.1)\nfm.fit(X_train, y_train)\n</code></pre>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#best-practices","title":"Best Practices","text":""},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#when-to-use-feature-crosses","title":"When to Use Feature Crosses:","text":"<ol> <li>Domain knowledge suggests interactions exist</li> <li>Linear models need to capture nonlinear relationships</li> <li>High-cardinality categorical features</li> <li>Recommendation systems and collaborative filtering</li> </ol>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#implementation-guidelines","title":"Implementation Guidelines:","text":"<ol> <li>Start with domain knowledge - Don't cross everything</li> <li>Use tree-based methods to identify important interactions</li> <li>Monitor for overfitting - Cross-validation is crucial</li> <li>Consider computational cost - High-dimensional crosses are expensive</li> <li>Use regularization - L1/L2 regularization helps with sparse crosses</li> </ol>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#common-pitfalls","title":"Common Pitfalls:","text":"<ul> <li>Curse of dimensionality - Too many crosses lead to sparse data</li> <li>Overfitting - Complex crosses without enough data</li> <li>Computational expense - High-dimensional crosses are slow</li> <li>Loss of interpretability - Complex crosses are hard to explain</li> </ul>"},{"location":"ml_fundamentals/feature_engineering/feature_crosses/#related-topics","title":"Related Topics","text":"<ul> <li>Data Types &amp; Normalization - Preparing features for crosses</li> <li>Categorical Encoding - Encoding categorical features for crosses</li> <li>Model Evaluation - Evaluating models with feature crosses</li> <li>Regularization - Regularizing high-dimensional feature crosses</li> </ul>"},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/","title":"Model Evaluation Methods","text":""},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#overview","title":"Overview","text":"<p>In ML algorithm design, we usually split the samples into training and test data set, where the training set is used to training the model and the test set is used to evaluate the model. In sample split and model evaluation process, we could use different sampling or evaluation methods.</p>"},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#main-evaluation-methods","title":"Main Evaluation Methods","text":""},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#holdout-evaluation","title":"Holdout Evaluation","text":"<p>Holdout evaluation is the easiest way as it randomly split the original sample set into training and evaluation. For example, for a clickthrough rate prediction algorithm, we split the samples into 70 - 30%. We use the 70% data for model training and the 30% for evaluation, including ROC curve, accuracy calculation and recall rate metric evaluation.</p> <p>Significant downside: The calculated final evaluation metric is highly correlated with the original data split. In order to eliminate this randomness, researchers started to use the \"cross validation\" idea.</p>"},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#cross-validation","title":"Cross-Validation","text":"<p>k-fold cross validation would always split the data set into k different sets that are of same counts. The method goes through all the k sample sets and always use the current subset as the evaluation set whereas the other ones are training set. Usually we use k = 10.</p>"},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#bootstrap","title":"Bootstrap","text":"<ul> <li>Make a fake test set by randomly picking the same number of rows from your real test set with replacement (so rows can repeat and some are left out).</li> <li>Suppose the test set has n rows.</li> <li>Pick n indices at random WITH replacement from <code>0..n-1</code>. (Duplicates allowed; some rows won't be picked.)</li> <li>Those picked rows form one fake test set.</li> <li>On that fake set, compute your metric (accuracy, F1, AUC, RMSE whatever you care about).</li> <li>Repeat steps 1-2 a lot (like 1,000 times).</li> <li>Now you have 1,000 metric values.</li> <li>The average is your central estimate.</li> <li>The middle 95% range (ignore the lowest 2.5% and highest 2.5%) is your 95% confidence interval.</li> </ul> <p>As \\(n\\) gets large, about 36.8% of items are not in the set (never selected) and 63.2% appear at least once. This is the source of the bootstrap terminology.</p>"},{"location":"ml_fundamentals/model_evaluation/evaluation_methods/#related-topics","title":"Related Topics","text":"<ul> <li>Metrics &amp; Validation - Understanding evaluation metrics</li> <li>Hyperparameter Tuning - Using evaluation methods for tuning</li> <li>Feature Engineering - How evaluation affects feature selection</li> </ul>"},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/","title":"Hyperparameter Tuning","text":"<p>For a lot of algorithm engineers, hyperparameter tuning can be really of headache, as there is no other way other than empirically tune the parameters to a reasonable range, while it is really important for the algorithm to be effective.</p>"},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/#common-ways-of-hyperparameter-tuning","title":"Common Ways of Hyperparameter Tuning","text":""},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/#grid-search","title":"Grid Search","text":"<p>Exhaustive on a small, low-dimensional space. Deterministic but expensive; scales poorly. In reality, it tend to be used as a bigger search space and larger step size to find the possible range of optimal results, then to shrink the search space and find more accurate optimal solution.</p>"},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/#random-search","title":"Random Search","text":"<p>Sample hyperparams at random (often log-uniform for learning rates). Much better than grid when only a few dims matter but cannot guarantee for a optimal solution.</p>"},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/#bayesian-optimization","title":"Bayesian Optimization","text":"<p>Model config -&gt; score to pick promising next trials. Unlike random/grid search do not learn from past trials, BO uses what you have learned so far to place the next (expensive) trial where it is most likely to pay off.</p>"},{"location":"ml_fundamentals/model_evaluation/hyperparameter_tuning/#related-topics","title":"Related Topics","text":"<ul> <li>Evaluation Methods - Using evaluation methods for tuning</li> <li>Metrics &amp; Validation - Using metrics to guide tuning</li> <li>Regularization - Tuning regularization parameters</li> </ul>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/","title":"Evaluation Metrics and Their Limitations","text":"<p>When doing model evaluation, the classification / sort / regression problems seems to always use different metrics for evaluation.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#accuracy-and-its-limitations","title":"Accuracy and Its Limitations","text":"<p>The accuracy only measures the number of correct labels divided by the number of total labels. This can potentially lead to a issue when the number of labels are limited in the dataset. When negative samples composed 99% of the data, if every label is a negative one, we still get 99% accuracy. So, if we use more effective mean accuracy that quantifies the mean accuracy under each category, it would be a better metrics to work with.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#precision-recall-and-their-balance","title":"Precision &amp; Recall and Their Balance","text":""},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#concept-of-precision-recall","title":"Concept of Precision &amp; Recall","text":"<p>Now we need to introduce the concept of precision and recall.</p> <p>Precision cares about the correctness of positive predictions, whereas recall cares about coverage of actual positives. Precision and recall trade off via the decision threshold. In a binary classification problem:</p> \\[\\text{Precision} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false positive}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{positive predictions}}}\\] \\[\\text{Recall} = \\frac{N_{\\text{true positive}}}{N_{\\text{true positive}} + N_{\\text{false negative}}} = \\frac{N_{\\text{true positive}}}{N_{\\text{actual positives}}}\\] <p>The F1 score is their harmonic mean:</p> \\[\\text{F1} = \\frac{2(\\text{Precision})(\\text{Recall})}{\\text{Precision} + \\text{Recall}} = \\frac{2N_{\\text{true positive}}}{2N_{\\text{true positive}}+N_{\\text{false positive}}+N_{\\text{false negative}}}\\] <p>This value ranges from 0 to 1 and penalizes imbalance, thus when either precision or recall is low, F1 drops sharply. F1 should be used when false positives and false negatives matter about equally, especially with imbalanced classes.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#confusion-matrix-implementation","title":"Confusion Matrix Implementation","text":"<pre><code>import numpy as np\n\ntrue_labels = np.array([0, 0, 1, 1, 0, 1, 0, 1, 1, 1])\npredicted_labels = np.array([0, 1, 0, 1, 0, 1, 1, 1, 1, 0])\n\nTP = np.sum((predicted_labels == 1) &amp; (true_labels == 1))\nTN = np.sum((predicted_labels == 0) &amp; (true_labels == 0))\nFP = np.sum((predicted_labels == 1) &amp; (true_labels == 0))\nFN = np.sum((predicted_labels == 0) &amp; (true_labels == 1))\n\nprint(\"Confusion Matrix:\\n TP: \", TP, \"\\tFP: \", FP, \"\\n FN: \", FN, \"\\tTN: \", TN)\n\n'''Output:\nConfusion Matrix:\n TP:  4     FP:  2 \n FN:  2     TN:  2\n'''\n</code></pre>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#precision-recall-in-ranking-retrieval-variants","title":"Precision &amp; Recall in Ranking / Retrieval Variants","text":"<pre><code>def precision_at_k(ground_truth_set, ranked_list, k):\n    return len(set(ranked_list[:k]) &amp; ground_truth_set) / k\n</code></pre> <pre><code># when there are more than one query / user / example that we would like to test on our predictions, we use the weighted average of the precision_at_k.\ndef mean_precision_at_k(ground_truth_sets, ranked_lists, k):\n    # ground_truth_sets and ranked_lists are aligned lists\n    return sum(precision_at_k(g, r, k) for g, r in zip(ground_truth_sets, ranked_lists)) / len(ground_truth_sets)\n</code></pre> <ul> <li>Precision@k for one case \\(q\\) (one list).</li> <li>Mean Precision@k average of those values over all cases \\(q \\in Q\\).</li> </ul> <p>Example: when dealing with video vague search functionality, it seems that the search ranking model can return the top 5 precision pretty high, however, the user in reality still cannot find the videos they want, especially those unpopular ones. Where does this problem coming from?</p> <p>Root cause analysis: Coming back to the example above, the top 5 precision being really high, meaning that the model can get the true positive results on a pretty good level with a certain set of positive predictions; however, when it comes down to cases where users would like to find not so popular videos, the precision of ranks can be rather no so useful as the user is looking for not so well-defined labels, hence the good precision of popular videos would not be helpful for this case as model is not providing all the relevant videos to the user and this is a problem of not so good recall rate. Let's say for the top 5 results, the precision@5 to be 100%, meaning that the correctness of the positive results is pretty higher, however, the recall@5 can still be 5%, meaning that only predicted 5 true positives although there are 100 actual positives involved. When doing model evaluation, it means that we should be focusing on both precision and recall, and also using different top N values for observations.</p> <p>Hence, in general, when people evaluate the goodness of a sort algorithm, they also look at the P-R curve, where in this curve, the x-axis corresponds to recall rate whereas the y-axis corresponds to precision rate.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#use-of-p-r-curve-for-model-evaluation-and-threshold-choice","title":"Use of P-R Curve for Model Evaluation and Threshold Choice","text":"<p>Each data point on the curve corresponds to a precision-recall combination at a certain threshold for True samples of choice, for example 0.95 / 0.9, etc. The closer to the origin (0,0) point, the bigger the threshold is.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#how-to-pick-the-threshold-in-practice","title":"How to Pick the Threshold in Practice","text":"<ul> <li>Capacity-constrained: If reviewers can handle 300 cases/day, pick the smallest threshold that yields \u2248300 flags/day; report the resulting (Precision, Recall).</li> <li>Recall target: If policy demands \u226595% recall, choose the lowest threshold achieving that, then report precision (and expected review load).</li> <li>Cost-based: Minimize \\(\\text{Cost}_{\\text{false positives}}\\cdot{\\text{False Positives}}+\\text{Cost}_{\\text{false negatives}}\\cdot{\\text{False Negatives}}\\) over thresholds.</li> </ul> <p>Also report AUPRC to compare models independent of a single threshold (higher is better, especially with class imbalance).</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#root-mean-squared-errors-rmse","title":"Root-Mean Squared Errors (RMSE)","text":"\\[ RMSE = \\sqrt{\\frac{\\sum_{i=1}^{n}{(y_i - \\hat y_i)^2}}{n}} \\] <p>Root-mean squared error has long been used as the metric for evaluating the regression model.</p> <p>Example: as a streaming company, one would say that prediction of traffic for each series can be really important when it comes down to ads bidding and user expansion. One would like to use a regression model to predict the traffic trend of a certain series, but whatever regression model that one uses, the RMSE metric ends up being really high. But, in reality, the model 95% of the time predict error is less than 1%, with really good prediction results. What might be the reason of this extraordinarily good results?</p> <p>Root cause analysis: From what the example, says there are two possible ways for the RMSE to be ineffective: 1) n being really small hence at this moment, the calculated error cannot be measurable anymore, 2) all the errors between actual value and predicted value are over- / under-predicting that the summation at the end being really high, however, in reality it is not the case and 3) one outlier being really off when comparing with other data points, it is contaminating the RMSE to be really big. Coming back to the question, as 95% of the time to model has really good prediction error hence it means the other 5% of the time the model can be really off with big outliers and it could happen when a series with small traffic / newly come-out / newly accoladed could produce this big error.</p> <p>How to solve: 1) When we think these outliers are noises, then we need to filter them out at the early stage when doing data cleaning, 2) If we do not think they are noises, then we need to further improve the prediction capability of our algorithm so that we could somehow model the formation of these outliers. and 3) We could also use a better metric for the model evaluation. There are indeed better evaluation metrics that are of better robustness than RMSE, for example, Mean Absolute Percentage Error (MAPE):</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#mean-absolute-percentage-error","title":"Mean Absolute Percentage Error","text":"\\[MAPE = \\sum_{i=1}^n{|\\frac{(y_i - \\hat y_i)}{y_i}|\\cdot\\frac{100}{n}}\\] <p>When comparing with RMSE, MAPE normalizes the error rate of each data point to mitigate the outlier impact from the absolute error.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#roc-curves","title":"ROC Curves","text":"<p>Binary classifiers are the mostly used and applied classifier in the ML industry. There are a lot of different metrics that one could use for evaluate the binary classifiers, including precision, recall, F1 score and P-R curve. But these metrics are only reflecting one aspect of the model. Hence, ROC curves can be of really good use.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#what-is-a-roc-curve","title":"What is a ROC Curve","text":"<p>ROC curves are called receiver Operating Characteristic Curves, which established from the military field and are often used in the medical industry as well. This curve's x-axis is the false positive rate, whereas the y-axis is the true-positive rate.</p> \\[\\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}}$$ $$\\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}}\\] <p>Example: There are 10 patients, where in there are 3 positive cancer patients, and the rest are negative patients. The hospital decides to do diagnosis on these customers and figured that 2 are true positive cancer patients. In this case:</p> \\[\\text{False Positive Rate} = \\frac{\\text{False Positive}}{\\text{Negative}} = \\frac{1}{7}$$ $$\\text{True Positive Rate} = \\frac{\\text{True Positive}}{\\text{Positive}}=\\frac{2}{3}\\]"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#how-to-draw-a-roc-curve","title":"How to Draw a ROC Curve","text":"<ul> <li>What is needed</li> <li>True labels \\(y \\in \\{0,1\\}\\)</li> <li>A score for the positive class per item (probability or decision score).</li> </ul> Sample Number True Label Model Output Probability as Positive 1 Positive 0.9 2 Positive 0.8 3 Negative 0.7 <p>From this example, we could then plot out the true positive rate (TPR) as the x-axis and false positive rate (FPR) as the y-axis for the curve, hence getting the ROC curve. There is a more direct way to plot the ROC curve as well:</p> <ul> <li>Getting the number of Positive &amp; Negative samples, i.e. assuming number of positive samples to be P and negative to be N.</li> <li>Getting the x-axis labels to be the count of negative samples, and y-axis labels to be the count of positive samples, then use the model output probability to do sorting of the samples</li> <li>Now draw the ROC curve from origin, whenever seeing a positive sample to draw a vertical line segment of +1 increment on y-axis, whenever seeing a negative sample then we draw a horizontal line segment along the x-axis until we reach the final sample with curve ending at (1,1).</li> </ul> <pre><code>from matplotlib import pyplot as plt\nfrom numpy import random\n\ntruth_labels = [1 if random.rand() &gt; 0.6 else 0 for _ in range(500)]\n# we generate some random predictions that would normally be obtained from the model\n# If a predicted probability is higher than the threshold, it is considered to be a positive outcome \npredicted_probs = [max(0, min(1, random.normal(loc=label, scale=0.3))) for label in truth_labels]\n\ndef roc_curve(truth_labels, predicted_probs):\n    thresholds = [0.1 * i for i in range(11)]\n    tprs, fprs = [], []\n    for threshold in thresholds:\n        tp = fp = tn = fn = 0  # initialize confusion matrix counts\n        # for each prediction\n        for i in range(len(truth_labels)):\n            # calculate confusion matrix counts\n            if predicted_probs[i] &gt;= threshold:\n                if truth_labels[i] == 1:\n                    tp += 1\n                else:\n                    fp += 1\n            else:\n                if truth_labels[i] == 1:\n                    fn += 1\n                else:\n                    tn += 1\n        # track the TPR and FPR for this threshold\n        tprs.append(tp / (tp + fn))  # True Positive Rate (TPR)\n        fprs.append(fp / (tn + fp))  # False Positive Rate (FPR)\n    return tprs, fprs\n\ntprs, fprs = roc_curve(truth_labels, predicted_probs)\nplt.plot(fprs, tprs, marker='.')\nplt.show()\n</code></pre>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#how-to-calculate-the-auc-area-under-curve","title":"How to Calculate the AUC (Area Under Curve)?","text":"<p>As simple as it could be, AUC is the area under the ROC curve, which can quantitatively reflect the model performance based on ROC curve. It is simple to calculate AUC along ROC x-axis. Due to that ROC curve tends to be above y=x, AUC values are usually between 0.5-1. The bigger the AUC is, the better the classifier is as the more likely that the classifier put the true positive samples at the front.</p> <pre><code>def compute_aucroc(tprs, fprs):\n    aucroc = 0\n    for i in range(1, len(tprs)):\n        aucroc += 0.5 * abs(fprs[i] - fprs[i - 1]) * (tprs[i] + tprs[i - 1])\n    return aucroc\n\naucroc = compute_aucroc(tprs, fprs)\nprint(f\"The AUC-ROC value is: {aucroc}\")  # The AUC-ROC value is: 0.9827272125066242\n</code></pre> <p>We have touched on the P-R curve for evaluating classification or sort algorithms. Comparing with P-R curve, there is one important character of ROC curve, which is that when positive / negative sample distribution change significant, the ROC curve shape could stay rather consistently whereas the P-R curve shape would be changing. This makes the ROC curve to mitigate the interference from diverse test sets and could more objectively evaluate the algorithm. In reality, when positive counts are much less than the negative counts, when switching dataset the data can be of big change, so a stable and robust evaluation would be important. Hence, usually ROC can be used in more variety of scenarios and could be utilized in sort / recommendation / ads.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#use-of-cosine-distance","title":"Use of Cosine Distance","text":"<p>How to evaluate the distance between samples can also define the optimization target and training method. In ML problems, we usually take the features to be of vector form, so when analyzing the two feature vector similarity, we could use cosine similarity. The cosine similarity can range from -1 to 1, where when two vectors are exactly the same, the cosine similarity becomes 1. Hence, when looking at distances, 1-cosine similarity becomes the cosine distance. Overall, the cosine distance is [0,2] and the same two vectors their cosine distance becomes 0.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#definition-of-euclidean-distance-cosine-distance","title":"Definition of Euclidean Distance &amp; Cosine Distance","text":"<p>Euclidean Distance For vectors \\(x,y\\in\\mathbb{R}^d\\):</p> \\[d_{\\text{Euc}}(x,y)=\\sqrt{\\sum_{i=1}^{d}(x_i-y_i)^2} \\in [0,\\infty)\\] <ul> <li>What it measures: straight-line (L2) distance in space.</li> <li>Sensitive to scale/magnitude: doubling a vector doubles distances.</li> <li>Squared form: sometimes use \\(\\|x-y\\|^2\\) (no square root) for speed/convexity.</li> </ul> <p>Cosine Distance Start with cosine similarity:</p> \\[\\text{cos\\_sim}(x,y)=\\frac{x\\cdot y}{\\|x\\|\\,\\|y\\|}\\in[-1,1]\\] <p>Cosine distance (common definition): \\(\\(d_{\\text{cos}}(x,y)=1-\\text{cos\\_sim}(x,y)\\in[0,2]\\)\\)</p> <ul> <li>What it measures: difference in direction (angle) only.</li> <li>Scale-invariant: multiplying a vector by a positive constant doesn't change it.</li> </ul> <p>Overall, on unit vectors, Euclidean and cosine distances are monotonic transforms. Also, on a unit circle, one would see: \\(\\(\\|A-B\\|=\\sqrt{2(1-cos(A,B))}\\)\\)</p> <ul> <li>When to use which</li> <li>Use Euclidean when magnitude matters (e.g., real spatial distances, continuous features with meaningful scales).</li> <li>Use Cosine when orientation matters more than length (e.g., text/image embeddings, TF-IDF vectors).</li> </ul>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#when-to-use-cosine-similarity-but-not-euclidean-distance","title":"When to Use Cosine Similarity but Not Euclidean Distance?","text":"<p>For two vectors A and B, when their cosine similarity are being defined as \\(cos(A,B)=\\frac{A\\cdot B}{\\|A\\|_2 \\|B\\|_2}\\), i.e. the cosine of angle between two vectors, we thus measure the angular distance between them, rather than the absolute magnitude, with the range being [-1,1]. When a pair of text being very different in length, but with similar content, if using Euclidean distance, one can think their distance being pretty big whereas when using cosine similarity, the angle between the two can be rather small, hence giving high similarity. In text, visual, video, image industries, when the objective has high dimensions, cosine can still retain its character of [-1,1] whereas the Euclidean distance number can be really big.</p> <p>Overall, Euclidean distance measures the absolute difference between numbers whereas the cosine distance measures the directional relative difference.</p> <p>Taking an example of measuring user behavior of watching two different TV series: - user A's watch vector = (0,1) - user B's watch vector = (1,0)</p> <p>It is obvious that the cosine distance between the two can be really big whereas their Euclidean distance is small.</p> <p>When measuring user A/B preference, we focus more on relative difference, hence we should be using the cosine distance whereas when we are analyzing user login frequency or activity, we should be using Euclidean distance instead as the cosine distance would think two users of vector (1,10) and (10,100) are more similar to each other.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#is-cosine-distance-a-strictly-defined-distance","title":"Is Cosine Distance a Strictly Defined Distance?","text":"<p>No, it is not strictly defined as it satisfies the Non-negativity &amp; identity (strictness), symmetry but does not satisfy the triangle inequality. A use case of this question is that when reading the word vector of <code>comedy</code> and <code>funny</code> and also <code>happy</code> and <code>funny</code>, their cosine distance is &lt; 0.3, whereas the distance between <code>comedy</code> and <code>happy</code> is 0.7.</p>"},{"location":"ml_fundamentals/model_evaluation/metrics_and_validation/#related-topics","title":"Related Topics","text":"<ul> <li>Evaluation Methods - How to apply these metrics</li> <li>Hyperparameter Tuning - Using metrics for model selection</li> <li>Feature Engineering - How metrics affect feature selection</li> </ul>"},{"location":"ml_fundamentals/regularization/early_stopping/","title":"Early Stopping","text":"<ul> <li>Early stopping watches validation loss/metric and halts training when it stops improving, and is a stopping rule driven by the validation metric's change, not a pre-fixed iteration count</li> <li>It reduces overfitting (lower variance) by not letting the model memorize noise; acts like implicit L2 regularization.</li> </ul> <p>Train while checking performance on a validation set. Whenever the validation score improves, remember those weights. If it doesn't improve for a while (patience), stop and roll back to the best checkpoint. This caps model complexity at the point where it generalized best, preventing the later epochs from fitting noise.</p>"},{"location":"ml_fundamentals/regularization/early_stopping/#related-topics","title":"Related Topics","text":"<ul> <li>Overfitting &amp; Underfitting - Why early stopping helps</li> <li>L1/L2 Regularization - Alternative regularization techniques</li> <li>Model Evaluation - Using validation for early stopping</li> </ul>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/","title":"L2 / L1 Regularization","text":""},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#setup","title":"Setup","text":"<p>Model (no intercept for simplicity):</p> \\[\\hat y_i = w\\,x_i\\] <p>Data loss (sum of squared errors):</p> \\[\\sum_i (y_i - w x_i)^2\\] <p>L2-regularized loss (ridge):</p> \\[\\underbrace{\\sum_i (y_i - w x_i)^2}_{\\text{fit the data}} \\;+\\; \\underbrace{\\lambda\\, w^2}_{\\text{penalize big weights}}\\] <ul> <li>\\(\\lambda&gt;0\\) controls the strength of the penalty (larger \\(\\lambda\\) stronger shrinkage).</li> <li>In practice, we usually don't penalize the bias/intercept.</li> </ul>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#how-l2-penalizes-the-parameter","title":"How L2 Penalizes the Parameter","text":"<p>Take derivative w.r.t. \\(w\\) and set to 0:</p> \\[\\frac{\\partial}{\\partial w}\\Big[\\sum_i (y_i - w x_i)^2 + \\lambda w^2\\Big] = -2\\sum_i x_i(y_i - w x_i) + 2\\lambda w = 0\\] <p>Rearrange:</p> \\[w\\big(\\sum_i x_i^2 + \\lambda\\big) = \\sum_i x_i y_i \\quad\\Rightarrow\\quad \\boxed{\\,w_{\\text{ridge}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2 + \\lambda}\\,}\\] <p>Compare to unregularized OLS:</p> \\[w_{\\text{OLS}} = \\dfrac{\\sum_i x_i y_i}{\\sum_i x_i^2}\\] <p>L2 adds \\(\\lambda\\) to the denominator and shrinks \\(w\\) toward 0.</p>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#why-l2-decrease-variance-and-increase-bias","title":"Why L2 Decrease Variance and Increase Bias?","text":"<p>L2 regularization constrains how large the parameters can get. Constraining parameters makes the fitted function smoother/less wiggly, so predictions don't swing wildly when the training sample changes\u2014this cuts variance. The tradeoff is that the constrained model can't perfectly adapt to the true signal, so estimates are pulled toward zero (or toward simpler shapes), which introduces bias.</p>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#tiny-numeric-example","title":"Tiny Numeric Example","text":"<p>Data: \\(x=[0,1,2,3]\\), \\(y=[0,1,2,60]\\) (last point is an outlier) - \\(\\sum x_i^2 = 14, \\sum x_i y_i = 185\\)</p> <p>Weights: - OLS (no L2): \\(185/14 \\approx 13.214\\) - L2, \\(\\lambda=10\\): \\(185/(14+10) = 185/24 \\approx 7.708185\\) - L2, \\(\\lambda=100\\): \\(185/(14+100) = 185/114 \\approx 1.623\\)</p> <p>As \\(\\lambda\\) grows, \\(w\\) is pulled toward 0, limiting the impact of the outlier.</p>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#gradient-descent-view-weight-decay","title":"Gradient-Descent View (Weight Decay)","text":"<p>With learning rate \\(\\eta\\):</p> \\[w_{\\text{new}} = w_{\\text{old}} - \\eta\\Big(\\underbrace{-2\\sum_i x_i(y_i - w_{\\text{old}} x_i)}_{\\text{data gradient}} \\;+\\; \\underbrace{2\\lambda w_{\\text{old}}}_{\\text{L2 shrink}}\\Big)\\] <p>The \\(+2\\lambda w\\) term is the shrinkage that steadily decays weights.</p>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#multi-feature-form-for-reference","title":"Multi-Feature Form (for reference)","text":"<p>For features \\(X\\in \\mathbb{R}^{n\\times d}\\), target \\(\\mathbf{y}\\):</p> \\[\\mathbf{w}_{\\text{ridge}} = (X^\\top X + \\lambda I)^{-1} X^\\top \\mathbf{y}\\]"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#copy-paste-python","title":"Copy-Paste Python","text":"<pre><code>import numpy as np\n\nx = np.array([0,1,2,3], dtype=float)\ny = np.array([0,1,2,60], dtype=float)\n\nSxx = np.sum(x**2)\nSxy = np.sum(x*y)\n\ndef ridge_weight(lmbda):\n    return Sxy / (Sxx + lmbda)\n\nprint(\"w_OLS        =\", Sxy / Sxx)\nfor lmbda in [10, 100]:\n    print(f\"w_ridge\", ridge_weight(lmbda))\n</code></pre> <p>Notes - Standardize features before using L2/L1 (esp. linear/logistic). - Tune \\(\\lambda\\) via cross-validation. - Do not penalize the bias term.</p>"},{"location":"ml_fundamentals/regularization/l1_l2_regularization/#related-topics","title":"Related Topics","text":"<ul> <li>Overfitting &amp; Underfitting - Why regularization helps</li> <li>Early Stopping - Alternative regularization technique</li> <li>Model Evaluation - Tuning regularization parameters</li> </ul>"},{"location":"ml_fundamentals/regularization/overfitting_underfitting/","title":"Overfitting &amp; Underfitting","text":"<p>This section tells how one could efficiently recognize overfit and underfit scenarios and do model improvements based on what has been identified.</p>"},{"location":"ml_fundamentals/regularization/overfitting_underfitting/#what-is-overfit-and-what-is-underfit","title":"What is Overfit and What is Underfit?","text":"<ul> <li>Overfit means that a model can be overfitting on its training data whereas on the test and new data sets, it's performing worse.</li> <li>Underfit means that the model is performing poorly on both training and test data sets.</li> </ul>"},{"location":"ml_fundamentals/regularization/overfitting_underfitting/#ways-to-mitigate-overfit-and-underfit","title":"Ways to Mitigate Overfit and Underfit","text":""},{"location":"ml_fundamentals/regularization/overfitting_underfitting/#avoid-overfitting","title":"Avoid Overfitting","text":"<ul> <li>Data: obtaining more data is one primitive way of solving overfit problem as more data can help the model to learn more efficient features to mitigate the impact from noise. Using rotation or expansion for image or GAN for getting more new training data.</li> <li>Model: one could use less complicated / complex model to avoid overfitting. For example, in NN one could reduce the number of layers or neurons in each layer; or in decision tree, one could reduce the depth of the tree or cut the tree.</li> <li>Regularization: one could use L2 regularization in model parameters to constraint the model.</li> <li>Ensemble method: ensemble method is to integrate multiple models together to avoid a single model overfitting issue, such as bagging methods.</li> </ul>"},{"location":"ml_fundamentals/regularization/overfitting_underfitting/#avoid-underfitting","title":"Avoid Underfitting","text":"<ul> <li>Add more features: when there is not enough features or the features are not relevant with the sample labels, there would be a underfit. We could dig into contextual features / ID features / combination of features to obtain better results. In deep learning, factor decomposition / gradient-boosted decision tree / deep-crossing can all be used for get more features.</li> <li>Increase the complexity of model.</li> <li>Decrease regularization parameters.</li> </ul>"},{"location":"ml_fundamentals/regularization/overfitting_underfitting/#related-topics","title":"Related Topics","text":"<ul> <li>L1/L2 Regularization - Mathematical foundations of regularization</li> <li>Early Stopping - Training control techniques</li> <li>Model Evaluation - How to detect overfitting/underfitting</li> </ul>"},{"location":"ml_fundamentals/unsupervised_learning/k_means_clustering/","title":"K-means Clustering","text":"<p>Algorithms such as SVM, logistic regression, decision trees are more for the categorization, i.e. based on the known labelled samples, classifiers are training so that it could apply the same logic on unlabeled samples. Unlike the classification problems, clustering is directly categorize the samples without any previously known labelling.</p> <p>Classification belongs to supervised learning whereas clustering is a type of unsupervised learning algorithm. K-means clustering, as one type of the most basic and fundamental clustering algorithm, has the main idea of iteratively finding the way of cutting the space into K clusters, so that the loss function is the lowest. The loss function can be defined as the sum of squared error distance of each sample from their clustered centers:</p> \\[J(c,\\mu) = \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2\\] <p>where \\(x_i\\) represents the samples, \\(c_i\\) represents the cluster that \\(x_i\\) belongs to, \\(\\mu_{c_i}\\) corresponds to the center of the cluster that \\(x_i\\)'s located in and \\(M\\) is the total number of samples.</p>"},{"location":"ml_fundamentals/unsupervised_learning/k_means_clustering/#k-means-clustering-algorithm-in-steps","title":"K-means Clustering Algorithm in Steps","text":"<p>The goal of K-means clustering is to categorize the dataset of interest into K-clusters, and also provides the cluster center corresponding to each data points:</p> <ol> <li>Data engineering and cleaning: normalization and outlier removal.</li> <li>Randomly pick K-cluster centers, labelled as \\(\\mu_1^{(0)}, \\mu_2^{(0)}, ..., \\mu_K^{(0)}\\)</li> <li>Define the loss function to be \\(J(c,\\mu) = \\min_{\\mu} \\min_{c} \\sum_{i=1}^M ||x_i - \\mu_{c_i}||^2\\)</li> <li>Iterate through the process below by t times, where t denotes the number of iterations:</li> <li>for every sample \\(x_i\\), categorize it to the cluster that has shortest distance \\(\\(c_i^{(t)} \\leftarrow {\\arg\\min}_k ||x_i - \\mu_k^{(t)}||^2\\)\\)</li> <li>for every cluster k, recalculate the center: \\(\\(\\mu_k^{(t+1)}\\leftarrow {\\arg\\min}_\\mu \\sum_{i:c_i^{(t)}=k} ||x_i - \\mu||^2\\)\\)</li> </ol> <pre><code># k-Means algorithm\ndef k_means(data, centers, k):\n    while True:\n        clusters = [[] for _ in range(k)] \n\n        # Assign data points to the closest center\n        for point in data:\n            distances = [distance(point, center) for center in centers]\n            index = distances.index(min(distances)) \n            clusters[index].append(point)\n\n        # Update centers to be the mean of points in a cluster\n        new_centers = []\n        for cluster in clusters:\n            center = (sum([point[0] for point in cluster])/len(cluster), \n                      sum([point[1] for point in cluster])/len(cluster)) \n            new_centers.append(center)\n\n        # Break loop if centers don't change significantly\n        if max([distance(new, old) for new, old in zip(new_centers, centers)]) &lt; 0.0001:\n            break\n        else:\n            centers = new_centers\n    return clusters, centers\n</code></pre>"},{"location":"ml_fundamentals/unsupervised_learning/k_means_clustering/#related-topics","title":"Related Topics","text":"<ul> <li>K-Nearest Neighbors - Alternative unsupervised learning algorithm</li> <li>Model Evaluation - Evaluating clustering performance</li> <li>Feature Engineering - How normalization affects clustering</li> </ul>"},{"location":"ml_fundamentals/unsupervised_learning/k_nearest_neighbors/","title":"K-Nearest Neighbors (k-NN) Algorithm","text":"<p>The kNN algorithm works on a basic principle: a data point is likely to be in the same category as the data points it is closest to. Note that choosing 'k' significantly impacts our model. A low 'k' might capture more noise in the data, whereas a high 'k' is computationally expensive.</p>"},{"location":"ml_fundamentals/unsupervised_learning/k_nearest_neighbors/#euclidean-distance-calculation","title":"Euclidean Distance Calculation","text":"<p>In k-NN, classification is determined by weighing the distance between data points. Euclidean distance is a frequently used metric that calculates the shortest straight-line distance \\(\\sqrt{(x_1-x_2)^2 + (y_1 - y_2)^2}\\) between two data points \\((x_1, y_1)\\) and \\((x_2, y_2)\\) in a Euclidean space.</p> <pre><code>import math\n\n# The 'euclidean_distance' function computes the Euclidean distance between two points\ndef euclidean_distance(point1, point2):\n    squares = [(p - q) ** 2 for p, q in zip(point1, point2)] # Calculate squared distance for each dimension\n    return math.sqrt(sum(squares)) # Return the square root of the sum of squares\n\n# Test it\npoint1 = (1, 2) # The coordinates of the first point\npoint2 = (4, 6) # The coordinates of the second point\nprint(euclidean_distance(point1, point2)) # 5.0\n</code></pre>"},{"location":"ml_fundamentals/unsupervised_learning/k_nearest_neighbors/#actual-knn-algorithm","title":"Actual KNN Algorithm","text":"<pre><code>from collections import Counter\nimport numpy as np\n\ndef k_nearest_neighbors(data, query, k, distance_fn):\n    neighbor_distances_and_indices = []\n    # Compute distance from each training data point\n    for idx, label in enumerate(data):\n        distance = euclidean_distance(label[0], query)\n        neighbor_distances_and_indices.append((distance, idx))\n    # Sort array by distance\n    sorted_neighbor_distances_and_indices = sorted(neighbor_distances_and_indices)\n    # Select k closest data points\n    k_nearest_distances_and_indices = sorted_neighbor_distances_and_indices[:k]\n    # Obtain class labels for those k data points\n    k_nearest_labels = [data[i][1] for distance, i in k_nearest_distances_and_indices]\n    # Majority vote\n    most_common = Counter(k_nearest_labels).most_common(1)\n    return most_common[0][0] # Return the label of the class that receives the majority vote\n\ndef euclidean_distance(point1, point2):\n    distance = sum((p - q) ** 2 for p, q in zip(point1, point2))\n    return np.sqrt(distance)\n\ndef mannhattan_distance(point1, point2):\n    return np.sum(np.abs(p - q) for p, q in zip(point1, point2))\n\ndata = [\n    ((2, 3), 0),\n    ((5, 4), 0),\n    ((9, 6), 1),\n    ((4, 7), 0),\n    ((8, 1), 1),\n    ((7, 2), 1)\n]\nquery = (7,6)\nk=2\n\nclass_label = k_nearest_neighbors(data, query, k, distance_fn)\nprint(class_label)\n</code></pre>"},{"location":"ml_fundamentals/unsupervised_learning/k_nearest_neighbors/#related-topics","title":"Related Topics","text":"<ul> <li>K-Means Clustering - Alternative unsupervised learning algorithm</li> <li>Model Evaluation - Evaluating KNN performance</li> <li>Feature Engineering - How normalization affects KNN</li> </ul>"},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/","title":"Neural_Networks_and_Deep_Learning_Overview","text":""},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/#introduction","title":"Introduction","text":"<p>Neural networks approximate complex nonlinear functions by stacking layers of linear transformations and nonlinear activations. Backpropagation efficiently computes gradients for training, enabling deep learning breakthroughs.</p>"},{"location":"neural_networks_and_deep_learning/Neural_Networks_and_Deep_Learning_Overview/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Introduction to Perceptron Algorithm</li> <li>Structure of a feed-forward neural network</li> <li>Activation functions: ReLU, softmax</li> <li>Backpropagation algorithm</li> <li>Implementing a simple NN from scratch (e.g., MNIST/XOR)</li> <li>Deriving gradient of softmax + cross-entropy</li> </ul>"},{"location":"neural_networks_and_deep_learning/neural_networks_sections/Introduction_to_Perceptron_Algorithm/","title":"Introduction_to_Perceptron_Algorithm","text":"<pre><code>import numpy as np\n\nclass Perceptron(object):\n\u00a0 \u00a0 def __init__(self, no_of_inputs, max_iterations=100, learning_rate=0.01):\n\u00a0 \u00a0 \u00a0 \u00a0 self.weights = np.zeros(no_of_inputs + 1)\n\u00a0 \u00a0 \u00a0 \u00a0 self.max_iterations = max_iterations\n\u00a0 \u00a0 \u00a0 \u00a0 self.learning_rate = learning_rate\n\n\u00a0 \u00a0 def predict(self, inputs):\n\u00a0 \u00a0 \u00a0 \u00a0 summation = np.dot(inputs, self.weights[1:]) + self.weights[0]\n\u00a0 \u00a0 \u00a0 \u00a0 if summation &gt; 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 activation = 1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 activation = 0\n\u00a0 \u00a0 \u00a0 \u00a0 return activation\n\n\u00a0 \u00a0 def train(self, training_inputs, labels):\n\u00a0 \u00a0 \u00a0 \u00a0 for _ in range(self.max_iterations):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for inputs, label in zip(training_inputs, labels):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prediction = self.predict(inputs)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.weights[1:] += self.learning_rate * (label - prediction) * inputs\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.weights[0] += self.learning_rate * (label - prediction)\n\n# AND dataset\ntraining_inputs = [\n\u00a0 \u00a0 np.array([0, 0]),\n\u00a0 \u00a0 np.array([0, 1]),\n\u00a0 \u00a0 np.array([1, 0]),\n\u00a0 \u00a0 np.array([1, 1])\n]\nlabels = np.array([0, 0, 0, 1])\nperceptron = Perceptron(2)\nperceptron.train(training_inputs, labels)\n\ninputs = np.array([1, 1]) \u00a0# Expected: 1\nprint(perceptron.predict(inputs))\n</code></pre>"},{"location":"probability_and_markov/Probability_and_Markov_Overview/","title":"Week1_Probability_and_Markov","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#title-probability-markov","title":"title: Probability &amp; Markov","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#probability-foundations-markov-assumption","title":"Probability Foundations &amp; Markov Assumption","text":""},{"location":"probability_and_markov/Probability_and_Markov_Overview/#introduction","title":"Introduction","text":"<p>Probability theory provides the core mathematical language for reasoning under uncertainty, while the Markov assumption simplifies sequential dependencies\u00e2\u20ac\u201dboth are fundamental for modern NLP and language modeling.</p> <p>Through this module you will refresh key probability concepts and see how the Markov assumption enables tractable modeling of text sequences.</p>"},{"location":"probability_and_markov/Probability_and_Markov_Overview/#knowledge-points","title":"Knowledge Points","text":"<ul> <li>Conditional Probability &amp; Bayes' Rule</li> <li>Naive Bayes</li> <li>Joint &amp; Marginal</li> <li>ML Fundamentals</li> <li>Markov Assumption: definition &amp; role in NLP</li> </ul>"},{"location":"probability_and_markov/probability_and_markov_sections/","title":"Index","text":"<p># Week 1 Overview</p> <p>Short overview of Probability \\&amp; Markov topics.</p> <p>- [[Week1P1-conditional_probability_and_bayes_rule|Bayes\u2019 Rule]]</p> <p>- [[Week1P2-naive_bayes_and_gaussian_naive_bayes|Naive Bayes]]</p> <p>- [[Week1P3-joint_and_marginal_distributions|Joint \\&amp; Marginal]]</p>"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/","title":"Conditional Probability & Bayes Rule","text":"<p>Resources - StatQuest: Conditional Probability (YouTube) - StatQuest: Bayes' Rule - 3Blue1Brown: Bayes theorem, the geometry of changing beliefs</p> <p></p> Loves Candy Does not Love Candy Row Total Loves Soda 2\\(p=\\frac{2}{14}\\) 5\\(p=\\frac{5}{14}\\) 2+5=7\\(p=\\frac{7}{14}\\) Does not Loves Soda 4\\(p=\\frac{4}{14}\\) 3\\(p=\\frac{3}{14}\\) 4+3=7\\(p=\\frac{7}{14}\\) Column total 2+4=6\\(p=\\frac{6}{14}\\) 5+3=8\\(p=\\frac{8}{14}\\)"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/#probabilities","title":"Probabilities","text":"<p>\\(p(\\text{loves candy and soda}) =\\frac{2}{14}=0.14\\) \\(p(\\text{does not love candy but love soda}) =\\frac{5}{14}=0.36\\)</p>"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/#conditional-probabilities","title":"Conditional probabilities","text":"<ul> <li>probability of someone loving candy and soda given that we know they love soda: \\(p(\\text{loves candy and soda}\\vert\\text{loves soda}) =\\frac{2}{2+5}=0.29\\)</li> <li>probability of someone does not love candy, given that we know they love soda: \\(p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{5}{2+5}=0.71\\) Dividing the numerator and denominator by the total number of people 14, the equation above becomes: \\(\\(p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{\\frac{5}{14}}{\\frac{2+5}{14}}=\\frac{p(\\text{does not love candy but love soda})}{p(\\text{loves soda})}=0.71\\)\\) To generalize: \\(\\(p(\\text{something will happen}\\vert\\text{we know})=\\frac{p(\\text{something will happen})}{p(\\text{we know})}\\)\\)</li> </ul> <p>So the conditional probability is the probability that something will happen scaled by whatever knowledge we already have about the event</p>"},{"location":"probability_and_markov/probability_and_markov_sections/conditional_probability_and_bayes_rule/#bayes-theorem","title":"Bayes Theorem","text":"\\[p(\\text{something will happen}\\vert\\text{we know})=\\frac{p(\\text{something will happen})}{p(\\text{we know})}\\] <p>Taking the conditional probabilities from the section above, we can calculate: - probability of someone does not love candy, given that we know they love soda: \\(p(\\text{does not love candy but love soda}\\vert\\text{loves soda}) =\\frac{5}{2+5}=0.71\\) - probability of someone does not love candy but love soda, given that we know they does not love candy: \\(p(\\text{does not love candy but love soda}\\vert\\text{does not love candy}) =\\frac{5}{5+3}=0.63\\) In both cases above, we want to know the probability of the same event, meeting someone who does not love candy but loves soda. This means that the numerators are the same in both cases. However since we have different prior knowledge in each case, we scale the probabilities of the events differently. So ultimately we get different probabilities.</p> <p>Now, what if we do not know the probability of someone does not love candy but love soda, which is the numerator in the cases above, we can still multiply both sides of the top equation by \\(p(\\text{loves soda})\\) from the equation: \\(p(\\text{does not love candy but love soda})\\ = p(\\text{does not love candy but love soda}\\vert\\text{loves soda})p(\\text{loves soda})\\) So overall, what we have is: \\(\\(\\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{love s})p(\\text{love s})}{p(\\text{love s})}=\\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{no love c})p(\\text{no love c})}{p(\\text{love s})}\\)\\) leading to: \\(\\(p(\\text{no love c \\&amp; love s}\\vert\\text{love s})=\\frac{p(\\text{no love c \\&amp; love s}\\vert\\text{no love c})p(\\text{no love c})}{p(\\text{love s})}\\)\\)</p> <p>In general, the Bayes' theorem can be represented by event A and B in the following form: \\(\\(p(\\text{A\\&amp;B}\\vert\\text{B})=\\frac{p(\\text{A\\&amp;B}\\vert\\text{A})\\times p(\\text{A})}{p(\\text{B})}\\)\\) Or in the other way around: \\(\\(p(\\text{A\\&amp;B}\\vert\\text{A})=\\frac{p(\\text{A\\&amp;B}\\vert\\text{B})\\times p(\\text{B})}{p(\\text{A})}\\)\\) the conditional probability given that we know one thing about an event can be derived from knowing the other thing about the event.</p> <p>Bayes' Theorem is the basis for Bayesian Statistics, which is this equation, paired with a broader philosophy of how statistics should be calculated.</p>"},{"location":"probability_and_markov/probability_and_markov_sections/naive_bayes_and_gaussian_naive_bayes/","title":"Naive Bayes & Gaussian Naive Bayes","text":"<p>Resources - StatQuest: Conditional Probability (YouTube) - StatQuest: Bayes' Rule - 3Blue1Brown: Bayes theorem, the geometry of changing beliefs</p>"},{"location":"probability_and_markov/probability_and_markov_sections/naive_bayes_and_gaussian_naive_bayes/#implementing-naive-bayes-classifier-from-scratch-in-python","title":"Implementing Naive Bayes Classifier from Scratch in Python","text":"<p>We approach the implementation of the Naive Bayes Classifier by first calculating the prior probabilities of each class, and then the likelihood of each feature given a class.</p> <pre><code>import pandas as pd\n\ndef calculate_prior_probabilities(y):\n    # Calculate prior probabilities for each class\n    return y.value_counts(normalize=True)\n\ndef calculate_likelihoods(X, y, smoothing = False):\n    likelihoods = {}\n    for column in X.columns:\n        likelihoods[column] = {}\n        for class_ in y.unique():\n            # Filter feature column data for each class\n            class_data = X[y == class_][column]\n            counts = class_data.value_counts()\n            if not smoothing:\n                total_count = len(class_data)  # Total count of instances for current class\n                likelihoods[column][class_] = counts / total_count  # Direct likelihoods without smoothing\n            else:\n                total_count = len(class_data) + len(X[column].unique()) # total count with smoothing \n                likelihoods[column][class_] = (counts + 1) / total_count # add-1 smoothing\n    return likelihoods\n</code></pre> <p>Armed with these utility functions, we can implement the Naive Bayes Classifier function:</p> <pre><code>def naive_bayes_classifier(X_test, priors, likelihoods):\n    predictions = []\n    for _, data_point in X_test.iterrows():\n        class_probabilities = {}\n        for class_ in priors.index:\n            class_probabilities[class_] = priors[class_]\n            for feature in X_test.columns:\n                # Use .get to safely retrieve probability and get a default of 1/total to handle unseen values\n                feature_probs = likelihoods[feature][class_]\n                class_probabilities[class_] *= feature_probs.get(data_point[feature], 1 / (len(feature_probs) + 1))\n\n        # Predict class with maximum posterior probability\n        predictions.append(max(class_probabilities, key=class_probabilities.get))\n\n    return predictions\n</code></pre>"}]}